
Firmware_PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007718  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080078a0  080078a0  000178a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007900  08007900  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007900  08007900  00017900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007908  08007908  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007908  08007908  00017908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001cc4  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001dc0  20001dc0  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014775  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f0b  00000000  00000000  000348a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001008  00000000  00000000  000377b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ef8  00000000  00000000  000387b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a72  00000000  00000000  000396b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015622  00000000  00000000  0005b122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bde90  00000000  00000000  00070744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012e5d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042b0  00000000  00000000  0012e624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007888 	.word	0x08007888

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08007888 	.word	0x08007888

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fa58 	bl	8000984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f814 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8d6 	bl	8000688 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f87c 	bl	80005d8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80004e0:	f000 f8a8 	bl	8000634 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80004e4:	f006 fcb0 	bl	8006e48 <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80004e8:	2108      	movs	r1, #8
 80004ea:	4804      	ldr	r0, [pc, #16]	; (80004fc <main+0x30>)
 80004ec:	f000 fda7 	bl	800103e <HAL_GPIO_TogglePin>
	 HAL_Delay(500);
 80004f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f4:	f000 fab8 	bl	8000a68 <HAL_Delay>
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80004f8:	e7f6      	b.n	80004e8 <main+0x1c>
 80004fa:	bf00      	nop
 80004fc:	40020000 	.word	0x40020000

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f007 f9b2 	bl	8007878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <SystemClock_Config+0xd0>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a28      	ldr	r2, [pc, #160]	; (80005d0 <SystemClock_Config+0xd0>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <SystemClock_Config+0xd0>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <SystemClock_Config+0xd4>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a22      	ldr	r2, [pc, #136]	; (80005d4 <SystemClock_Config+0xd4>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <SystemClock_Config+0xd4>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800055c:	2303      	movs	r3, #3
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000566:	2301      	movs	r3, #1
 8000568:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056a:	2310      	movs	r3, #16
 800056c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000578:	230f      	movs	r3, #15
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800057c:	2390      	movs	r3, #144	; 0x90
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000584:	2305      	movs	r3, #5
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4618      	mov	r0, r3
 800058e:	f002 f933 	bl	80027f8 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000598:	f000 f8c6 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 fb96 	bl	8002ce8 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005c2:	f000 f8b1 	bl	8000728 <Error_Handler>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3750      	adds	r7, #80	; 0x50
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40007000 	.word	0x40007000

080005d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_I2C1_Init+0x50>)
 80005de:	4a13      	ldr	r2, [pc, #76]	; (800062c <MX_I2C1_Init+0x54>)
 80005e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_I2C1_Init+0x50>)
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <MX_I2C1_Init+0x58>)
 80005e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_I2C1_Init+0x50>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_I2C1_Init+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_I2C1_Init+0x50>)
 80005f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <MX_I2C1_Init+0x50>)
 8000616:	f000 fd2d 	bl	8001074 <HAL_I2C_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000620:	f000 f882 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000118 	.word	0x20000118
 800062c:	40005400 	.word	0x40005400
 8000630:	000186a0 	.word	0x000186a0

08000634 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_USART3_UART_Init+0x4c>)
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_USART3_UART_Init+0x50>)
 800063c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_USART3_UART_Init+0x4c>)
 8000640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000644:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_USART3_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_USART3_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_USART3_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_USART3_UART_Init+0x4c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_USART3_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_USART3_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_USART3_UART_Init+0x4c>)
 800066c:	f002 fd5a 	bl	8003124 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000676:	f000 f857 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000016c 	.word	0x2000016c
 8000684:	40004800 	.word	0x40004800

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_GPIO_Init+0x98>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a1e      	ldr	r2, [pc, #120]	; (8000720 <MX_GPIO_Init+0x98>)
 80006a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_GPIO_Init+0x98>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_GPIO_Init+0x98>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a17      	ldr	r2, [pc, #92]	; (8000720 <MX_GPIO_Init+0x98>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_GPIO_Init+0x98>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_GPIO_Init+0x98>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a10      	ldr	r2, [pc, #64]	; (8000720 <MX_GPIO_Init+0x98>)
 80006e0:	f043 0302 	orr.w	r3, r3, #2
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_GPIO_Init+0x98>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2108      	movs	r1, #8
 80006f6:	480b      	ldr	r0, [pc, #44]	; (8000724 <MX_GPIO_Init+0x9c>)
 80006f8:	f000 fc88 	bl	800100c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006fc:	2308      	movs	r3, #8
 80006fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4619      	mov	r1, r3
 8000712:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_GPIO_Init+0x9c>)
 8000714:	f000 fade 	bl	8000cd4 <HAL_GPIO_Init>

}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40020000 	.word	0x40020000

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	e7fe      	b.n	8000730 <Error_Handler+0x8>
	...

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <HAL_MspInit+0x4c>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	4a0f      	ldr	r2, [pc, #60]	; (8000780 <HAL_MspInit+0x4c>)
 8000744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000748:	6453      	str	r3, [r2, #68]	; 0x44
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <HAL_MspInit+0x4c>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <HAL_MspInit+0x4c>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	4a08      	ldr	r2, [pc, #32]	; (8000780 <HAL_MspInit+0x4c>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000764:	6413      	str	r3, [r2, #64]	; 0x40
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_MspInit+0x4c>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800

08000784 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a19      	ldr	r2, [pc, #100]	; (8000808 <HAL_I2C_MspInit+0x84>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d12b      	bne.n	80007fe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <HAL_I2C_MspInit+0x88>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a17      	ldr	r2, [pc, #92]	; (800080c <HAL_I2C_MspInit+0x88>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <HAL_I2C_MspInit+0x88>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007c2:	23c0      	movs	r3, #192	; 0xc0
 80007c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c6:	2312      	movs	r3, #18
 80007c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007d2:	2304      	movs	r3, #4
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <HAL_I2C_MspInit+0x8c>)
 80007de:	f000 fa79 	bl	8000cd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_I2C_MspInit+0x88>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <HAL_I2C_MspInit+0x88>)
 80007ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007f0:	6413      	str	r3, [r2, #64]	; 0x40
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_I2C_MspInit+0x88>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007fe:	bf00      	nop
 8000800:	3728      	adds	r7, #40	; 0x28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40005400 	.word	0x40005400
 800080c:	40023800 	.word	0x40023800
 8000810:	40020400 	.word	0x40020400

08000814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a19      	ldr	r2, [pc, #100]	; (8000898 <HAL_UART_MspInit+0x84>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d12c      	bne.n	8000890 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <HAL_UART_MspInit+0x88>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	4a17      	ldr	r2, [pc, #92]	; (800089c <HAL_UART_MspInit+0x88>)
 8000840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000844:	6413      	str	r3, [r2, #64]	; 0x40
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <HAL_UART_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_UART_MspInit+0x88>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a10      	ldr	r2, [pc, #64]	; (800089c <HAL_UART_MspInit+0x88>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_UART_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800086e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000880:	2307      	movs	r3, #7
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <HAL_UART_MspInit+0x8c>)
 800088c:	f000 fa22 	bl	8000cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40004800 	.word	0x40004800
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020400 	.word	0x40020400

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler+0x4>

080008b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f0:	f000 f89a 	bl	8000a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <OTG_FS_IRQHandler+0x10>)
 80008fe:	f000 fe4d 	bl	800159c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20001694 	.word	0x20001694

0800090c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <SystemInit+0x20>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000916:	4a05      	ldr	r2, [pc, #20]	; (800092c <SystemInit+0x20>)
 8000918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000968 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000936:	490e      	ldr	r1, [pc, #56]	; (8000970 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000938:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800094c:	4c0b      	ldr	r4, [pc, #44]	; (800097c <LoopFillZerobss+0x26>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800095a:	f7ff ffd7 	bl	800090c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800095e:	f006 ff67 	bl	8007830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000962:	f7ff fdb3 	bl	80004cc <main>
  bx  lr    
 8000966:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000968:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000974:	08007910 	.word	0x08007910
  ldr r2, =_sbss
 8000978:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 800097c:	20001dc0 	.word	0x20001dc0

08000980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC_IRQHandler>
	...

08000984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_Init+0x40>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <HAL_Init+0x40>)
 800098e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <HAL_Init+0x40>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <HAL_Init+0x40>)
 800099a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800099e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <HAL_Init+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <HAL_Init+0x40>)
 80009a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f000 f94f 	bl	8000c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b2:	200f      	movs	r0, #15
 80009b4:	f000 f808 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b8:	f7ff febc 	bl	8000734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023c00 	.word	0x40023c00

080009c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_InitTick+0x54>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_InitTick+0x58>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009de:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f967 	bl	8000cba <HAL_SYSTICK_Config>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e00e      	b.n	8000a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	d80a      	bhi.n	8000a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f000 f92f 	bl	8000c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a08:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <HAL_InitTick+0x5c>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e000      	b.n	8000a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20000004 	.word	0x20000004

08000a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_IncTick+0x20>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x24>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <HAL_IncTick+0x24>)
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	200001b0 	.word	0x200001b0

08000a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <HAL_GetTick+0x14>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	200001b0 	.word	0x200001b0

08000a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a70:	f7ff ffee 	bl	8000a50 <HAL_GetTick>
 8000a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a80:	d005      	beq.n	8000a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_Delay+0x44>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a8e:	bf00      	nop
 8000a90:	f7ff ffde 	bl	8000a50 <HAL_GetTick>
 8000a94:	4602      	mov	r2, r0
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d8f7      	bhi.n	8000a90 <HAL_Delay+0x28>
  {
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000008 	.word	0x20000008

08000ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000acc:	4013      	ands	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	60d3      	str	r3, [r2, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <__NVIC_GetPriorityGrouping+0x18>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	f003 0307 	and.w	r3, r3, #7
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	db0b      	blt.n	8000b3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 021f 	and.w	r2, r3, #31
 8000b2c:	4907      	ldr	r1, [pc, #28]	; (8000b4c <__NVIC_EnableIRQ+0x38>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	095b      	lsrs	r3, r3, #5
 8000b34:	2001      	movs	r0, #1
 8000b36:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db0a      	blt.n	8000b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	490c      	ldr	r1, [pc, #48]	; (8000b9c <__NVIC_SetPriority+0x4c>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	0112      	lsls	r2, r2, #4
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	440b      	add	r3, r1
 8000b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b78:	e00a      	b.n	8000b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4908      	ldr	r1, [pc, #32]	; (8000ba0 <__NVIC_SetPriority+0x50>)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	3b04      	subs	r3, #4
 8000b88:	0112      	lsls	r2, r2, #4
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	761a      	strb	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000e100 	.word	0xe000e100
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b089      	sub	sp, #36	; 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	f1c3 0307 	rsb	r3, r3, #7
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	bf28      	it	cs
 8000bc2:	2304      	movcs	r3, #4
 8000bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	2b06      	cmp	r3, #6
 8000bcc:	d902      	bls.n	8000bd4 <NVIC_EncodePriority+0x30>
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3b03      	subs	r3, #3
 8000bd2:	e000      	b.n	8000bd6 <NVIC_EncodePriority+0x32>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43da      	mvns	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	401a      	ands	r2, r3
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	43d9      	mvns	r1, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	4313      	orrs	r3, r2
         );
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3724      	adds	r7, #36	; 0x24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c1c:	d301      	bcc.n	8000c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00f      	b.n	8000c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <SysTick_Config+0x40>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2a:	210f      	movs	r1, #15
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f7ff ff8e 	bl	8000b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <SysTick_Config+0x40>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <SysTick_Config+0x40>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	e000e010 	.word	0xe000e010

08000c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ff29 	bl	8000ab0 <__NVIC_SetPriorityGrouping>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c78:	f7ff ff3e 	bl	8000af8 <__NVIC_GetPriorityGrouping>
 8000c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	6978      	ldr	r0, [r7, #20]
 8000c84:	f7ff ff8e 	bl	8000ba4 <NVIC_EncodePriority>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff5d 	bl	8000b50 <__NVIC_SetPriority>
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff31 	bl	8000b14 <__NVIC_EnableIRQ>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ffa2 	bl	8000c0c <SysTick_Config>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b089      	sub	sp, #36	; 0x24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
 8000cee:	e16b      	b.n	8000fc8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	f040 815a 	bne.w	8000fc2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d005      	beq.n	8000d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d130      	bne.n	8000d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	2203      	movs	r2, #3
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	091b      	lsrs	r3, r3, #4
 8000d72:	f003 0201 	and.w	r2, r3, #1
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	2b03      	cmp	r3, #3
 8000d92:	d017      	beq.n	8000dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	2203      	movs	r2, #3
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4013      	ands	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	689a      	ldr	r2, [r3, #8]
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d123      	bne.n	8000e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	08da      	lsrs	r2, r3, #3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3208      	adds	r2, #8
 8000dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	f003 0307 	and.w	r3, r3, #7
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	220f      	movs	r2, #15
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	691a      	ldr	r2, [r3, #16]
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	08da      	lsrs	r2, r3, #3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3208      	adds	r2, #8
 8000e12:	69b9      	ldr	r1, [r7, #24]
 8000e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0203 	and.w	r2, r3, #3
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 80b4 	beq.w	8000fc2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b60      	ldr	r3, [pc, #384]	; (8000fe0 <HAL_GPIO_Init+0x30c>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	4a5f      	ldr	r2, [pc, #380]	; (8000fe0 <HAL_GPIO_Init+0x30c>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e68:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6a:	4b5d      	ldr	r3, [pc, #372]	; (8000fe0 <HAL_GPIO_Init+0x30c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e76:	4a5b      	ldr	r2, [pc, #364]	; (8000fe4 <HAL_GPIO_Init+0x310>)
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	089b      	lsrs	r3, r3, #2
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a52      	ldr	r2, [pc, #328]	; (8000fe8 <HAL_GPIO_Init+0x314>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d02b      	beq.n	8000efa <HAL_GPIO_Init+0x226>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a51      	ldr	r2, [pc, #324]	; (8000fec <HAL_GPIO_Init+0x318>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d025      	beq.n	8000ef6 <HAL_GPIO_Init+0x222>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a50      	ldr	r2, [pc, #320]	; (8000ff0 <HAL_GPIO_Init+0x31c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d01f      	beq.n	8000ef2 <HAL_GPIO_Init+0x21e>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a4f      	ldr	r2, [pc, #316]	; (8000ff4 <HAL_GPIO_Init+0x320>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d019      	beq.n	8000eee <HAL_GPIO_Init+0x21a>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a4e      	ldr	r2, [pc, #312]	; (8000ff8 <HAL_GPIO_Init+0x324>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d013      	beq.n	8000eea <HAL_GPIO_Init+0x216>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a4d      	ldr	r2, [pc, #308]	; (8000ffc <HAL_GPIO_Init+0x328>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d00d      	beq.n	8000ee6 <HAL_GPIO_Init+0x212>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4c      	ldr	r2, [pc, #304]	; (8001000 <HAL_GPIO_Init+0x32c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d007      	beq.n	8000ee2 <HAL_GPIO_Init+0x20e>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4b      	ldr	r2, [pc, #300]	; (8001004 <HAL_GPIO_Init+0x330>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_GPIO_Init+0x20a>
 8000eda:	2307      	movs	r3, #7
 8000edc:	e00e      	b.n	8000efc <HAL_GPIO_Init+0x228>
 8000ede:	2308      	movs	r3, #8
 8000ee0:	e00c      	b.n	8000efc <HAL_GPIO_Init+0x228>
 8000ee2:	2306      	movs	r3, #6
 8000ee4:	e00a      	b.n	8000efc <HAL_GPIO_Init+0x228>
 8000ee6:	2305      	movs	r3, #5
 8000ee8:	e008      	b.n	8000efc <HAL_GPIO_Init+0x228>
 8000eea:	2304      	movs	r3, #4
 8000eec:	e006      	b.n	8000efc <HAL_GPIO_Init+0x228>
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e004      	b.n	8000efc <HAL_GPIO_Init+0x228>
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	e002      	b.n	8000efc <HAL_GPIO_Init+0x228>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e000      	b.n	8000efc <HAL_GPIO_Init+0x228>
 8000efa:	2300      	movs	r3, #0
 8000efc:	69fa      	ldr	r2, [r7, #28]
 8000efe:	f002 0203 	and.w	r2, r2, #3
 8000f02:	0092      	lsls	r2, r2, #2
 8000f04:	4093      	lsls	r3, r2
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f0c:	4935      	ldr	r1, [pc, #212]	; (8000fe4 <HAL_GPIO_Init+0x310>)
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	3302      	adds	r3, #2
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f1a:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <HAL_GPIO_Init+0x334>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f3e:	4a32      	ldr	r2, [pc, #200]	; (8001008 <HAL_GPIO_Init+0x334>)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f44:	4b30      	ldr	r3, [pc, #192]	; (8001008 <HAL_GPIO_Init+0x334>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f68:	4a27      	ldr	r2, [pc, #156]	; (8001008 <HAL_GPIO_Init+0x334>)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <HAL_GPIO_Init+0x334>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f92:	4a1d      	ldr	r2, [pc, #116]	; (8001008 <HAL_GPIO_Init+0x334>)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <HAL_GPIO_Init+0x334>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fbc:	4a12      	ldr	r2, [pc, #72]	; (8001008 <HAL_GPIO_Init+0x334>)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	61fb      	str	r3, [r7, #28]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	2b0f      	cmp	r3, #15
 8000fcc:	f67f ae90 	bls.w	8000cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40013800 	.word	0x40013800
 8000fe8:	40020000 	.word	0x40020000
 8000fec:	40020400 	.word	0x40020400
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	40020c00 	.word	0x40020c00
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40021400 	.word	0x40021400
 8001000:	40021800 	.word	0x40021800
 8001004:	40021c00 	.word	0x40021c00
 8001008:	40013c00 	.word	0x40013c00

0800100c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	807b      	strh	r3, [r7, #2]
 8001018:	4613      	mov	r3, r2
 800101a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800101c:	787b      	ldrb	r3, [r7, #1]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001022:	887a      	ldrh	r2, [r7, #2]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001028:	e003      	b.n	8001032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800102a:	887b      	ldrh	r3, [r7, #2]
 800102c:	041a      	lsls	r2, r3, #16
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	619a      	str	r2, [r3, #24]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800103e:	b480      	push	{r7}
 8001040:	b085      	sub	sp, #20
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001050:	887a      	ldrh	r2, [r7, #2]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4013      	ands	r3, r2
 8001056:	041a      	lsls	r2, r3, #16
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	43d9      	mvns	r1, r3
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	400b      	ands	r3, r1
 8001060:	431a      	orrs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	619a      	str	r2, [r3, #24]
}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e12b      	b.n	80012de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d106      	bne.n	80010a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff fb72 	bl	8000784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2224      	movs	r2, #36	; 0x24
 80010a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0201 	bic.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010d8:	f001 fffc 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 80010dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	4a81      	ldr	r2, [pc, #516]	; (80012e8 <HAL_I2C_Init+0x274>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d807      	bhi.n	80010f8 <HAL_I2C_Init+0x84>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4a80      	ldr	r2, [pc, #512]	; (80012ec <HAL_I2C_Init+0x278>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	bf94      	ite	ls
 80010f0:	2301      	movls	r3, #1
 80010f2:	2300      	movhi	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	e006      	b.n	8001106 <HAL_I2C_Init+0x92>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4a7d      	ldr	r2, [pc, #500]	; (80012f0 <HAL_I2C_Init+0x27c>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	bf94      	ite	ls
 8001100:	2301      	movls	r3, #1
 8001102:	2300      	movhi	r3, #0
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e0e7      	b.n	80012de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4a78      	ldr	r2, [pc, #480]	; (80012f4 <HAL_I2C_Init+0x280>)
 8001112:	fba2 2303 	umull	r2, r3, r2, r3
 8001116:	0c9b      	lsrs	r3, r3, #18
 8001118:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	430a      	orrs	r2, r1
 800112c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	4a6a      	ldr	r2, [pc, #424]	; (80012e8 <HAL_I2C_Init+0x274>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d802      	bhi.n	8001148 <HAL_I2C_Init+0xd4>
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	3301      	adds	r3, #1
 8001146:	e009      	b.n	800115c <HAL_I2C_Init+0xe8>
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800114e:	fb02 f303 	mul.w	r3, r2, r3
 8001152:	4a69      	ldr	r2, [pc, #420]	; (80012f8 <HAL_I2C_Init+0x284>)
 8001154:	fba2 2303 	umull	r2, r3, r2, r3
 8001158:	099b      	lsrs	r3, r3, #6
 800115a:	3301      	adds	r3, #1
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	430b      	orrs	r3, r1
 8001162:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800116e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	495c      	ldr	r1, [pc, #368]	; (80012e8 <HAL_I2C_Init+0x274>)
 8001178:	428b      	cmp	r3, r1
 800117a:	d819      	bhi.n	80011b0 <HAL_I2C_Init+0x13c>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	1e59      	subs	r1, r3, #1
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	fbb1 f3f3 	udiv	r3, r1, r3
 800118a:	1c59      	adds	r1, r3, #1
 800118c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001190:	400b      	ands	r3, r1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00a      	beq.n	80011ac <HAL_I2C_Init+0x138>
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	1e59      	subs	r1, r3, #1
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80011a4:	3301      	adds	r3, #1
 80011a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011aa:	e051      	b.n	8001250 <HAL_I2C_Init+0x1dc>
 80011ac:	2304      	movs	r3, #4
 80011ae:	e04f      	b.n	8001250 <HAL_I2C_Init+0x1dc>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d111      	bne.n	80011dc <HAL_I2C_Init+0x168>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	1e58      	subs	r0, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6859      	ldr	r1, [r3, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	440b      	add	r3, r1
 80011c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ca:	3301      	adds	r3, #1
 80011cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf0c      	ite	eq
 80011d4:	2301      	moveq	r3, #1
 80011d6:	2300      	movne	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	e012      	b.n	8001202 <HAL_I2C_Init+0x18e>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	1e58      	subs	r0, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6859      	ldr	r1, [r3, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	0099      	lsls	r1, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80011f2:	3301      	adds	r3, #1
 80011f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	bf0c      	ite	eq
 80011fc:	2301      	moveq	r3, #1
 80011fe:	2300      	movne	r3, #0
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_I2C_Init+0x196>
 8001206:	2301      	movs	r3, #1
 8001208:	e022      	b.n	8001250 <HAL_I2C_Init+0x1dc>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10e      	bne.n	8001230 <HAL_I2C_Init+0x1bc>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1e58      	subs	r0, r3, #1
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6859      	ldr	r1, [r3, #4]
 800121a:	460b      	mov	r3, r1
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	440b      	add	r3, r1
 8001220:	fbb0 f3f3 	udiv	r3, r0, r3
 8001224:	3301      	adds	r3, #1
 8001226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800122a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800122e:	e00f      	b.n	8001250 <HAL_I2C_Init+0x1dc>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	1e58      	subs	r0, r3, #1
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6859      	ldr	r1, [r3, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	0099      	lsls	r1, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	fbb0 f3f3 	udiv	r3, r0, r3
 8001246:	3301      	adds	r3, #1
 8001248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800124c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	6809      	ldr	r1, [r1, #0]
 8001254:	4313      	orrs	r3, r2
 8001256:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69da      	ldr	r2, [r3, #28]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800127e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6911      	ldr	r1, [r2, #16]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68d2      	ldr	r2, [r2, #12]
 800128a:	4311      	orrs	r1, r2
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	6812      	ldr	r2, [r2, #0]
 8001290:	430b      	orrs	r3, r1
 8001292:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695a      	ldr	r2, [r3, #20]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0201 	orr.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2220      	movs	r2, #32
 80012ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	000186a0 	.word	0x000186a0
 80012ec:	001e847f 	.word	0x001e847f
 80012f0:	003d08ff 	.word	0x003d08ff
 80012f4:	431bde83 	.word	0x431bde83
 80012f8:	10624dd3 	.word	0x10624dd3

080012fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fe:	b08f      	sub	sp, #60	; 0x3c
 8001300:	af0a      	add	r7, sp, #40	; 0x28
 8001302:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e10f      	b.n	800152e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d106      	bne.n	800132e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f005 ff6d 	bl	8007208 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2203      	movs	r2, #3
 8001332:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133e:	2b00      	cmp	r3, #0
 8001340:	d102      	bne.n	8001348 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f002 fac0 	bl	80038d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	687e      	ldr	r6, [r7, #4]
 800135a:	466d      	mov	r5, sp
 800135c:	f106 0410 	add.w	r4, r6, #16
 8001360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001368:	e894 0003 	ldmia.w	r4, {r0, r1}
 800136c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001370:	1d33      	adds	r3, r6, #4
 8001372:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001374:	6838      	ldr	r0, [r7, #0]
 8001376:	f002 f997 	bl	80036a8 <USB_CoreInit>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2202      	movs	r2, #2
 8001384:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e0d0      	b.n	800152e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f002 faae 	bl	80038f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001398:	2300      	movs	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	e04a      	b.n	8001434 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800139e:	7bfa      	ldrb	r2, [r7, #15]
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	4413      	add	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	440b      	add	r3, r1
 80013ac:	333d      	adds	r3, #61	; 0x3d
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	333c      	adds	r3, #60	; 0x3c
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013c6:	7bfa      	ldrb	r2, [r7, #15]
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	b298      	uxth	r0, r3
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	4413      	add	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	440b      	add	r3, r1
 80013d8:	3344      	adds	r3, #68	; 0x44
 80013da:	4602      	mov	r2, r0
 80013dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	3340      	adds	r3, #64	; 0x40
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013f2:	7bfa      	ldrb	r2, [r7, #15]
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	4413      	add	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	440b      	add	r3, r1
 8001400:	3348      	adds	r3, #72	; 0x48
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001406:	7bfa      	ldrb	r2, [r7, #15]
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	4413      	add	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	440b      	add	r3, r1
 8001414:	334c      	adds	r3, #76	; 0x4c
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800141a:	7bfa      	ldrb	r2, [r7, #15]
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	440b      	add	r3, r1
 8001428:	3354      	adds	r3, #84	; 0x54
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	3301      	adds	r3, #1
 8001432:	73fb      	strb	r3, [r7, #15]
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	429a      	cmp	r2, r3
 800143c:	d3af      	bcc.n	800139e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	e044      	b.n	80014ce <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800145a:	7bfa      	ldrb	r2, [r7, #15]
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4413      	add	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	440b      	add	r3, r1
 80014c0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	3301      	adds	r3, #1
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d3b5      	bcc.n	8001444 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	687e      	ldr	r6, [r7, #4]
 80014e0:	466d      	mov	r5, sp
 80014e2:	f106 0410 	add.w	r4, r6, #16
 80014e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80014f6:	1d33      	adds	r3, r6, #4
 80014f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014fa:	6838      	ldr	r0, [r7, #0]
 80014fc:	f002 fa46 	bl	800398c <USB_DevInit>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2202      	movs	r2, #2
 800150a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e00d      	b.n	800152e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f003 fb95 	bl	8004c56 <USB_DevDisconnect>

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001536 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_PCD_Start+0x1c>
 800154e:	2302      	movs	r3, #2
 8001550:	e020      	b.n	8001594 <HAL_PCD_Start+0x5e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155e:	2b01      	cmp	r3, #1
 8001560:	d109      	bne.n	8001576 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001566:	2b01      	cmp	r3, #1
 8001568:	d005      	beq.n	8001576 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f002 f998 	bl	80038b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f003 fb45 	bl	8004c14 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b08d      	sub	sp, #52	; 0x34
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 fc03 	bl	8004dbe <USB_GetMode>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f040 848a 	bne.w	8001ed4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f003 fb67 	bl	8004c98 <USB_ReadInterrupts>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 8480 	beq.w	8001ed2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 fb54 	bl	8004c98 <USB_ReadInterrupts>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d107      	bne.n	800160a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	695a      	ldr	r2, [r3, #20]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f002 0202 	and.w	r2, r2, #2
 8001608:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f003 fb42 	bl	8004c98 <USB_ReadInterrupts>
 8001614:	4603      	mov	r3, r0
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	2b10      	cmp	r3, #16
 800161c:	d161      	bne.n	80016e2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	699a      	ldr	r2, [r3, #24]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0210 	bic.w	r2, r2, #16
 800162c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	f003 020f 	and.w	r2, r3, #15
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	3304      	adds	r3, #4
 800164c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	0c5b      	lsrs	r3, r3, #17
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	2b02      	cmp	r3, #2
 8001658:	d124      	bne.n	80016a4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001660:	4013      	ands	r3, r2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d035      	beq.n	80016d2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001670:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001674:	b29b      	uxth	r3, r3
 8001676:	461a      	mov	r2, r3
 8001678:	6a38      	ldr	r0, [r7, #32]
 800167a:	f003 f979 	bl	8004970 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	691a      	ldr	r2, [r3, #16]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800168a:	441a      	add	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	6a1a      	ldr	r2, [r3, #32]
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800169c:	441a      	add	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	621a      	str	r2, [r3, #32]
 80016a2:	e016      	b.n	80016d2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	0c5b      	lsrs	r3, r3, #17
 80016a8:	f003 030f 	and.w	r3, r3, #15
 80016ac:	2b06      	cmp	r3, #6
 80016ae:	d110      	bne.n	80016d2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80016b6:	2208      	movs	r2, #8
 80016b8:	4619      	mov	r1, r3
 80016ba:	6a38      	ldr	r0, [r7, #32]
 80016bc:	f003 f958 	bl	8004970 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	6a1a      	ldr	r2, [r3, #32]
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	091b      	lsrs	r3, r3, #4
 80016c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016cc:	441a      	add	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699a      	ldr	r2, [r3, #24]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 0210 	orr.w	r2, r2, #16
 80016e0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f003 fad6 	bl	8004c98 <USB_ReadInterrupts>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016f6:	f040 80a7 	bne.w	8001848 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f003 fadb 	bl	8004cbe <USB_ReadDevAllOutEpInterrupt>
 8001708:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800170a:	e099      	b.n	8001840 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 808e 	beq.w	8001834 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f003 faff 	bl	8004d26 <USB_ReadDevOutEPInterrupt>
 8001728:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00c      	beq.n	800174e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	015a      	lsls	r2, r3, #5
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	4413      	add	r3, r2
 800173c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001740:	461a      	mov	r2, r3
 8001742:	2301      	movs	r3, #1
 8001744:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 fec3 	bl	80024d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00c      	beq.n	8001772 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	015a      	lsls	r2, r3, #5
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	4413      	add	r3, r2
 8001760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001764:	461a      	mov	r2, r3
 8001766:	2308      	movs	r3, #8
 8001768:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800176a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 ff99 	bl	80026a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	015a      	lsls	r2, r3, #5
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	4413      	add	r3, r2
 8001784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001788:	461a      	mov	r2, r3
 800178a:	2310      	movs	r3, #16
 800178c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d030      	beq.n	80017fa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a0:	2b80      	cmp	r3, #128	; 0x80
 80017a2:	d109      	bne.n	80017b8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80017b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ba:	4613      	mov	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	3304      	adds	r3, #4
 80017cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	78db      	ldrb	r3, [r3, #3]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d108      	bne.n	80017e8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2200      	movs	r2, #0
 80017da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	4619      	mov	r1, r3
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f005 fe16 	bl	8007414 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	015a      	lsls	r2, r3, #5
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	4413      	add	r3, r2
 80017f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017f4:	461a      	mov	r2, r3
 80017f6:	2302      	movs	r3, #2
 80017f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	f003 0320 	and.w	r3, r3, #32
 8001800:	2b00      	cmp	r3, #0
 8001802:	d008      	beq.n	8001816 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	4413      	add	r3, r2
 800180c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001810:	461a      	mov	r2, r3
 8001812:	2320      	movs	r3, #32
 8001814:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d009      	beq.n	8001834 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	015a      	lsls	r2, r3, #5
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	4413      	add	r3, r2
 8001828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800182c:	461a      	mov	r2, r3
 800182e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001832:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	3301      	adds	r3, #1
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800183a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800183c:	085b      	lsrs	r3, r3, #1
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001842:	2b00      	cmp	r3, #0
 8001844:	f47f af62 	bne.w	800170c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f003 fa23 	bl	8004c98 <USB_ReadInterrupts>
 8001852:	4603      	mov	r3, r0
 8001854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001858:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800185c:	f040 80db 	bne.w	8001a16 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f003 fa44 	bl	8004cf2 <USB_ReadDevAllInEpInterrupt>
 800186a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001870:	e0cd      	b.n	8001a0e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 80c2 	beq.w	8001a02 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f003 fa6a 	bl	8004d62 <USB_ReadDevInEPInterrupt>
 800188e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d057      	beq.n	800194a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	f003 030f 	and.w	r3, r3, #15
 80018a0:	2201      	movs	r2, #1
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69f9      	ldr	r1, [r7, #28]
 80018b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80018ba:	4013      	ands	r3, r2
 80018bc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	015a      	lsls	r2, r3, #5
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	4413      	add	r3, r2
 80018c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ca:	461a      	mov	r2, r3
 80018cc:	2301      	movs	r3, #1
 80018ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d132      	bne.n	800193e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018dc:	4613      	mov	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	334c      	adds	r3, #76	; 0x4c
 80018e8:	6819      	ldr	r1, [r3, #0]
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ee:	4613      	mov	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	4413      	add	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4403      	add	r3, r0
 80018f8:	3348      	adds	r3, #72	; 0x48
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4419      	add	r1, r3
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001902:	4613      	mov	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4403      	add	r3, r0
 800190c:	334c      	adds	r3, #76	; 0x4c
 800190e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	2b00      	cmp	r3, #0
 8001914:	d113      	bne.n	800193e <HAL_PCD_IRQHandler+0x3a2>
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191a:	4613      	mov	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	3354      	adds	r3, #84	; 0x54
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d108      	bne.n	800193e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001936:	461a      	mov	r2, r3
 8001938:	2101      	movs	r1, #1
 800193a:	f003 fa71 	bl	8004e20 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	b2db      	uxtb	r3, r3
 8001942:	4619      	mov	r1, r3
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f005 fce0 	bl	800730a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d008      	beq.n	8001966 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	015a      	lsls	r2, r3, #5
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	4413      	add	r3, r2
 800195c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001960:	461a      	mov	r2, r3
 8001962:	2308      	movs	r3, #8
 8001964:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	f003 0310 	and.w	r3, r3, #16
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	015a      	lsls	r2, r3, #5
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	4413      	add	r3, r2
 8001978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800197c:	461a      	mov	r2, r3
 800197e:	2310      	movs	r3, #16
 8001980:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001988:	2b00      	cmp	r3, #0
 800198a:	d008      	beq.n	800199e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	015a      	lsls	r2, r3, #5
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	4413      	add	r3, r2
 8001994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001998:	461a      	mov	r2, r3
 800199a:	2340      	movs	r3, #64	; 0x40
 800199c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d023      	beq.n	80019f0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80019a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019aa:	6a38      	ldr	r0, [r7, #32]
 80019ac:	f002 f952 	bl	8003c54 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80019b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b2:	4613      	mov	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	3338      	adds	r3, #56	; 0x38
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	4413      	add	r3, r2
 80019c0:	3304      	adds	r3, #4
 80019c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	78db      	ldrb	r3, [r3, #3]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d108      	bne.n	80019de <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	2200      	movs	r2, #0
 80019d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	4619      	mov	r1, r3
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f005 fd2d 	bl	8007438 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	015a      	lsls	r2, r3, #5
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ea:	461a      	mov	r2, r3
 80019ec:	2302      	movs	r3, #2
 80019ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 fcdb 	bl	80023b8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	3301      	adds	r3, #1
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0a:	085b      	lsrs	r3, r3, #1
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f47f af2e 	bne.w	8001872 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 f93c 	bl	8004c98 <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a2a:	d122      	bne.n	8001a72 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	69fa      	ldr	r2, [r7, #28]
 8001a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a3a:	f023 0301 	bic.w	r3, r3, #1
 8001a3e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d108      	bne.n	8001a5c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a52:	2100      	movs	r1, #0
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 fec3 	bl	80027e0 <HAL_PCDEx_LPM_Callback>
 8001a5a:	e002      	b.n	8001a62 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f005 fccb 	bl	80073f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695a      	ldr	r2, [r3, #20]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f003 f90e 	bl	8004c98 <USB_ReadInterrupts>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a86:	d112      	bne.n	8001aae <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d102      	bne.n	8001a9e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f005 fc87 	bl	80073ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001aac:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 f8f0 	bl	8004c98 <USB_ReadInterrupts>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ac2:	f040 80b7 	bne.w	8001c34 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ad4:	f023 0301 	bic.w	r3, r3, #1
 8001ad8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2110      	movs	r1, #16
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f002 f8b7 	bl	8003c54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aea:	e046      	b.n	8001b7a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aee:	015a      	lsls	r2, r3, #5
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	4413      	add	r3, r2
 8001af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001af8:	461a      	mov	r2, r3
 8001afa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001afe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b02:	015a      	lsls	r2, r3, #5
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	4413      	add	r3, r2
 8001b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b10:	0151      	lsls	r1, r2, #5
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	440a      	add	r2, r1
 8001b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b1e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b22:	015a      	lsls	r2, r3, #5
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	4413      	add	r3, r2
 8001b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b32:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b36:	015a      	lsls	r2, r3, #5
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b44:	0151      	lsls	r1, r2, #5
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	440a      	add	r2, r1
 8001b4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b56:	015a      	lsls	r2, r3, #5
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b64:	0151      	lsls	r1, r2, #5
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	440a      	add	r2, r1
 8001b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b72:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b76:	3301      	adds	r3, #1
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d3b3      	bcc.n	8001aec <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b92:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b96:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d016      	beq.n	8001bce <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bb0:	f043 030b 	orr.w	r3, r3, #11
 8001bb4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc0:	69fa      	ldr	r2, [r7, #28]
 8001bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bc6:	f043 030b 	orr.w	r3, r3, #11
 8001bca:	6453      	str	r3, [r2, #68]	; 0x44
 8001bcc:	e015      	b.n	8001bfa <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001be0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001be4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bf4:	f043 030b 	orr.w	r3, r3, #11
 8001bf8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c08:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c0c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f003 f8fe 	bl	8004e20 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695a      	ldr	r2, [r3, #20]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 f82d 	bl	8004c98 <USB_ReadInterrupts>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c48:	d124      	bne.n	8001c94 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 f8c3 	bl	8004dda <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f002 f878 	bl	8003d4e <USB_GetDevSpeed>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	461a      	mov	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681c      	ldr	r4, [r3, #0]
 8001c6a:	f001 fa27 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 8001c6e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	4620      	mov	r0, r4
 8001c7a:	f001 fd77 	bl	800376c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f005 fb6b 	bl	800735a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695a      	ldr	r2, [r3, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c92:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f002 fffd 	bl	8004c98 <USB_ReadInterrupts>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d10a      	bne.n	8001cbe <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f005 fb48 	bl	800733e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695a      	ldr	r2, [r3, #20]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f002 0208 	and.w	r2, r2, #8
 8001cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f002 ffe8 	bl	8004c98 <USB_ReadInterrupts>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cce:	2b80      	cmp	r3, #128	; 0x80
 8001cd0:	d122      	bne.n	8001d18 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cde:	2301      	movs	r3, #1
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce2:	e014      	b.n	8001d0e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d105      	bne.n	8001d08 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	4619      	mov	r1, r3
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 fb27 	bl	8002356 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d3e5      	bcc.n	8001ce4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f002 ffbb 	bl	8004c98 <USB_ReadInterrupts>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d2c:	d13b      	bne.n	8001da6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d2e:	2301      	movs	r3, #1
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
 8001d32:	e02b      	b.n	8001d8c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	015a      	lsls	r2, r3, #5
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d48:	4613      	mov	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	3340      	adds	r3, #64	; 0x40
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d115      	bne.n	8001d86 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d5a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	da12      	bge.n	8001d86 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	333f      	adds	r3, #63	; 0x3f
 8001d70:	2201      	movs	r2, #1
 8001d72:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	4619      	mov	r1, r3
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 fae8 	bl	8002356 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	3301      	adds	r3, #1
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d3ce      	bcc.n	8001d34 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 ff74 	bl	8004c98 <USB_ReadInterrupts>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dba:	d155      	bne.n	8001e68 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc0:	e045      	b.n	8001e4e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d12e      	bne.n	8001e48 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001dea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	da2b      	bge.n	8001e48 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001dfc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d121      	bne.n	8001e48 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10a      	bne.n	8001e48 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e44:	6053      	str	r3, [r2, #4]
            break;
 8001e46:	e007      	b.n	8001e58 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d3b4      	bcc.n	8001dc2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f002 ff13 	bl	8004c98 <USB_ReadInterrupts>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7c:	d10a      	bne.n	8001e94 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f005 faec 	bl	800745c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f002 fefd 	bl	8004c98 <USB_ReadInterrupts>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d115      	bne.n	8001ed4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f005 fadc 	bl	8007478 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6859      	ldr	r1, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	e000      	b.n	8001ed4 <HAL_PCD_IRQHandler+0x938>
      return;
 8001ed2:	bf00      	nop
    }
  }
}
 8001ed4:	3734      	adds	r7, #52	; 0x34
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd90      	pop	{r4, r7, pc}

08001eda <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_PCD_SetAddress+0x1a>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e013      	b.n	8001f1c <HAL_PCD_SetAddress+0x42>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f002 fe5b 	bl	8004bc8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	4608      	mov	r0, r1
 8001f2e:	4611      	mov	r1, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	4603      	mov	r3, r0
 8001f34:	70fb      	strb	r3, [r7, #3]
 8001f36:	460b      	mov	r3, r1
 8001f38:	803b      	strh	r3, [r7, #0]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	da0f      	bge.n	8001f6a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	f003 020f 	and.w	r2, r3, #15
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	3338      	adds	r3, #56	; 0x38
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3304      	adds	r3, #4
 8001f60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	705a      	strb	r2, [r3, #1]
 8001f68:	e00f      	b.n	8001f8a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	f003 020f 	and.w	r2, r3, #15
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	4413      	add	r3, r2
 8001f80:	3304      	adds	r3, #4
 8001f82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f96:	883a      	ldrh	r2, [r7, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	78ba      	ldrb	r2, [r7, #2]
 8001fa0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	785b      	ldrb	r3, [r3, #1]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d004      	beq.n	8001fb4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fb4:	78bb      	ldrb	r3, [r7, #2]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d102      	bne.n	8001fc0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_PCD_EP_Open+0xaa>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e00e      	b.n	8001fec <HAL_PCD_EP_Open+0xc8>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68f9      	ldr	r1, [r7, #12]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 fedb 	bl	8003d98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001fea:	7afb      	ldrb	r3, [r7, #11]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002000:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002004:	2b00      	cmp	r3, #0
 8002006:	da0f      	bge.n	8002028 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	f003 020f 	and.w	r2, r3, #15
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	3338      	adds	r3, #56	; 0x38
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	4413      	add	r3, r2
 800201c:	3304      	adds	r3, #4
 800201e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	705a      	strb	r2, [r3, #1]
 8002026:	e00f      	b.n	8002048 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	f003 020f 	and.w	r2, r3, #15
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	3304      	adds	r3, #4
 8002040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	b2da      	uxtb	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_PCD_EP_Close+0x6e>
 800205e:	2302      	movs	r3, #2
 8002060:	e00e      	b.n	8002080 <HAL_PCD_EP_Close+0x8c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68f9      	ldr	r1, [r7, #12]
 8002070:	4618      	mov	r0, r3
 8002072:	f001 ff19 	bl	8003ea8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	460b      	mov	r3, r1
 8002096:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002098:	7afb      	ldrb	r3, [r7, #11]
 800209a:	f003 020f 	and.w	r2, r3, #15
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4413      	add	r3, r2
 80020ae:	3304      	adds	r3, #4
 80020b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2200      	movs	r2, #0
 80020c2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2200      	movs	r2, #0
 80020c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ca:	7afb      	ldrb	r3, [r7, #11]
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d102      	bne.n	80020e4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020e4:	7afb      	ldrb	r3, [r7, #11]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d109      	bne.n	8002102 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	6979      	ldr	r1, [r7, #20]
 80020fc:	f002 f9f8 	bl	80044f0 <USB_EP0StartXfer>
 8002100:	e008      	b.n	8002114 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	6979      	ldr	r1, [r7, #20]
 8002110:	f001 ffa6 	bl	8004060 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	460b      	mov	r3, r1
 8002128:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	f003 020f 	and.w	r2, r3, #15
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002140:	681b      	ldr	r3, [r3, #0]
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	603b      	str	r3, [r7, #0]
 800215a:	460b      	mov	r3, r1
 800215c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800215e:	7afb      	ldrb	r3, [r7, #11]
 8002160:	f003 020f 	and.w	r2, r3, #15
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	3338      	adds	r3, #56	; 0x38
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4413      	add	r3, r2
 8002172:	3304      	adds	r3, #4
 8002174:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2200      	movs	r2, #0
 8002186:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2201      	movs	r2, #1
 800218c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800218e:	7afb      	ldrb	r3, [r7, #11]
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	b2da      	uxtb	r2, r3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d102      	bne.n	80021a8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021a8:	7afb      	ldrb	r3, [r7, #11]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d109      	bne.n	80021c6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	6979      	ldr	r1, [r7, #20]
 80021c0:	f002 f996 	bl	80044f0 <USB_EP0StartXfer>
 80021c4:	e008      	b.n	80021d8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	6979      	ldr	r1, [r7, #20]
 80021d4:	f001 ff44 	bl	8004060 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	460b      	mov	r3, r1
 80021ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	f003 020f 	and.w	r2, r3, #15
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d901      	bls.n	8002200 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e050      	b.n	80022a2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002204:	2b00      	cmp	r3, #0
 8002206:	da0f      	bge.n	8002228 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	f003 020f 	and.w	r2, r3, #15
 800220e:	4613      	mov	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	3338      	adds	r3, #56	; 0x38
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	4413      	add	r3, r2
 800221c:	3304      	adds	r3, #4
 800221e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2201      	movs	r2, #1
 8002224:	705a      	strb	r2, [r3, #1]
 8002226:	e00d      	b.n	8002244 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	3304      	adds	r3, #4
 800223c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2201      	movs	r2, #1
 8002248:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800224a:	78fb      	ldrb	r3, [r7, #3]
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	b2da      	uxtb	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_PCD_EP_SetStall+0x82>
 8002260:	2302      	movs	r3, #2
 8002262:	e01e      	b.n	80022a2 <HAL_PCD_EP_SetStall+0xc0>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68f9      	ldr	r1, [r7, #12]
 8002272:	4618      	mov	r0, r3
 8002274:	f002 fbd4 	bl	8004a20 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10a      	bne.n	8002298 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	b2d9      	uxtb	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002292:	461a      	mov	r2, r3
 8002294:	f002 fdc4 	bl	8004e20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	f003 020f 	and.w	r2, r3, #15
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d901      	bls.n	80022c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e042      	b.n	800234e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	da0f      	bge.n	80022f0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	f003 020f 	and.w	r2, r3, #15
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	3338      	adds	r3, #56	; 0x38
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4413      	add	r3, r2
 80022e4:	3304      	adds	r3, #4
 80022e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	705a      	strb	r2, [r3, #1]
 80022ee:	e00f      	b.n	8002310 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	f003 020f 	and.w	r2, r3, #15
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	3304      	adds	r3, #4
 8002308:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	b2da      	uxtb	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_PCD_EP_ClrStall+0x86>
 800232c:	2302      	movs	r3, #2
 800232e:	e00e      	b.n	800234e <HAL_PCD_EP_ClrStall+0xa4>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68f9      	ldr	r1, [r7, #12]
 800233e:	4618      	mov	r0, r3
 8002340:	f002 fbdc 	bl	8004afc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002362:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002366:	2b00      	cmp	r3, #0
 8002368:	da0c      	bge.n	8002384 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	f003 020f 	and.w	r2, r3, #15
 8002370:	4613      	mov	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	3338      	adds	r3, #56	; 0x38
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	3304      	adds	r3, #4
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	e00c      	b.n	800239e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	f003 020f 	and.w	r2, r3, #15
 800238a:	4613      	mov	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4413      	add	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	3304      	adds	r3, #4
 800239c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68f9      	ldr	r1, [r7, #12]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f002 f9fb 	bl	80047a0 <USB_EPStopXfer>
 80023aa:	4603      	mov	r3, r0
 80023ac:	72fb      	strb	r3, [r7, #11]

  return ret;
 80023ae:	7afb      	ldrb	r3, [r7, #11]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	; 0x28
 80023bc:	af02      	add	r7, sp, #8
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	3338      	adds	r3, #56	; 0x38
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4413      	add	r3, r2
 80023dc:	3304      	adds	r3, #4
 80023de:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a1a      	ldr	r2, [r3, #32]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d901      	bls.n	80023f0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e06c      	b.n	80024ca <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	699a      	ldr	r2, [r3, #24]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	429a      	cmp	r2, r3
 8002404:	d902      	bls.n	800240c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	3303      	adds	r3, #3
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002414:	e02b      	b.n	800246e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	699a      	ldr	r2, [r3, #24]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	429a      	cmp	r2, r3
 800242a:	d902      	bls.n	8002432 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3303      	adds	r3, #3
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6919      	ldr	r1, [r3, #16]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800244a:	b2db      	uxtb	r3, r3
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	4603      	mov	r3, r0
 8002450:	6978      	ldr	r0, [r7, #20]
 8002452:	f002 fa4f 	bl	80048f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	441a      	add	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a1a      	ldr	r2, [r3, #32]
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	441a      	add	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	b29b      	uxth	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	429a      	cmp	r2, r3
 8002482:	d809      	bhi.n	8002498 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a1a      	ldr	r2, [r3, #32]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800248c:	429a      	cmp	r2, r3
 800248e:	d203      	bcs.n	8002498 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1be      	bne.n	8002416 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	699a      	ldr	r2, [r3, #24]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d811      	bhi.n	80024c8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	2201      	movs	r2, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	43db      	mvns	r3, r3
 80024be:	6939      	ldr	r1, [r7, #16]
 80024c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024c4:	4013      	ands	r3, r2
 80024c6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3720      	adds	r7, #32
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	333c      	adds	r3, #60	; 0x3c
 80024ec:	3304      	adds	r3, #4
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d17b      	bne.n	8002602 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d015      	beq.n	8002540 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	4a61      	ldr	r2, [pc, #388]	; (800269c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	f240 80b9 	bls.w	8002690 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80b3 	beq.w	8002690 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4413      	add	r3, r2
 8002532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002536:	461a      	mov	r2, r3
 8002538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800253c:	6093      	str	r3, [r2, #8]
 800253e:	e0a7      	b.n	8002690 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	015a      	lsls	r2, r3, #5
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	4413      	add	r3, r2
 8002552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002556:	461a      	mov	r2, r3
 8002558:	2320      	movs	r3, #32
 800255a:	6093      	str	r3, [r2, #8]
 800255c:	e098      	b.n	8002690 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002564:	2b00      	cmp	r3, #0
 8002566:	f040 8093 	bne.w	8002690 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	4a4b      	ldr	r2, [pc, #300]	; (800269c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d90f      	bls.n	8002592 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	4413      	add	r3, r2
 8002584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002588:	461a      	mov	r2, r3
 800258a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800258e:	6093      	str	r3, [r2, #8]
 8002590:	e07e      	b.n	8002690 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	4613      	mov	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	4413      	add	r3, r2
 80025a4:	3304      	adds	r3, #4
 80025a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	69da      	ldr	r2, [r3, #28]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	0159      	lsls	r1, r3, #5
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	440b      	add	r3, r1
 80025b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025be:	1ad2      	subs	r2, r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d114      	bne.n	80025f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025dc:	461a      	mov	r2, r3
 80025de:	2101      	movs	r1, #1
 80025e0:	f002 fc1e 	bl	8004e20 <USB_EP0_OutStart>
 80025e4:	e006      	b.n	80025f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	691a      	ldr	r2, [r3, #16]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	441a      	add	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	4619      	mov	r1, r3
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f004 fe6a 	bl	80072d4 <HAL_PCD_DataOutStageCallback>
 8002600:	e046      	b.n	8002690 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	4a26      	ldr	r2, [pc, #152]	; (80026a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d124      	bne.n	8002654 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	4413      	add	r3, r2
 800261c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002620:	461a      	mov	r2, r3
 8002622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002626:	6093      	str	r3, [r2, #8]
 8002628:	e032      	b.n	8002690 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	4413      	add	r3, r2
 800263c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002640:	461a      	mov	r2, r3
 8002642:	2320      	movs	r3, #32
 8002644:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f004 fe41 	bl	80072d4 <HAL_PCD_DataOutStageCallback>
 8002652:	e01d      	b.n	8002690 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d114      	bne.n	8002684 <PCD_EP_OutXfrComplete_int+0x1b0>
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	4613      	mov	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4413      	add	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d108      	bne.n	8002684 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800267c:	461a      	mov	r2, r3
 800267e:	2100      	movs	r1, #0
 8002680:	f002 fbce 	bl	8004e20 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	4619      	mov	r1, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f004 fe22 	bl	80072d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3720      	adds	r7, #32
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	4f54300a 	.word	0x4f54300a
 80026a0:	4f54310a 	.word	0x4f54310a

080026a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	333c      	adds	r3, #60	; 0x3c
 80026bc:	3304      	adds	r3, #4
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4a15      	ldr	r2, [pc, #84]	; (800272c <PCD_EP_OutSetupPacket_int+0x88>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d90e      	bls.n	80026f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d009      	beq.n	80026f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f0:	461a      	mov	r2, r3
 80026f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f004 fdd9 	bl	80072b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <PCD_EP_OutSetupPacket_int+0x88>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d90c      	bls.n	8002720 <PCD_EP_OutSetupPacket_int+0x7c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d108      	bne.n	8002720 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002718:	461a      	mov	r2, r3
 800271a:	2101      	movs	r1, #1
 800271c:	f002 fb80 	bl	8004e20 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	4f54300a 	.word	0x4f54300a

08002730 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	70fb      	strb	r3, [r7, #3]
 800273c:	4613      	mov	r3, r2
 800273e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d107      	bne.n	800275e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800274e:	883b      	ldrh	r3, [r7, #0]
 8002750:	0419      	lsls	r1, r3, #16
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	430a      	orrs	r2, r1
 800275a:	629a      	str	r2, [r3, #40]	; 0x28
 800275c:	e028      	b.n	80027b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	0c1b      	lsrs	r3, r3, #16
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	4413      	add	r3, r2
 800276a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800276c:	2300      	movs	r3, #0
 800276e:	73fb      	strb	r3, [r7, #15]
 8002770:	e00d      	b.n	800278e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	3340      	adds	r3, #64	; 0x40
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	0c1b      	lsrs	r3, r3, #16
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	4413      	add	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	3301      	adds	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	3b01      	subs	r3, #1
 8002794:	429a      	cmp	r2, r3
 8002796:	d3ec      	bcc.n	8002772 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002798:	883b      	ldrh	r3, [r7, #0]
 800279a:	0418      	lsls	r0, r3, #16
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6819      	ldr	r1, [r3, #0]
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	4302      	orrs	r2, r0
 80027a8:	3340      	adds	r3, #64	; 0x40
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	460b      	mov	r3, r1
 80027c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	887a      	ldrh	r2, [r7, #2]
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e267      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d075      	beq.n	8002902 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002816:	4b88      	ldr	r3, [pc, #544]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
 800281e:	2b04      	cmp	r3, #4
 8002820:	d00c      	beq.n	800283c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002822:	4b85      	ldr	r3, [pc, #532]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800282a:	2b08      	cmp	r3, #8
 800282c:	d112      	bne.n	8002854 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282e:	4b82      	ldr	r3, [pc, #520]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800283a:	d10b      	bne.n	8002854 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283c:	4b7e      	ldr	r3, [pc, #504]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d05b      	beq.n	8002900 <HAL_RCC_OscConfig+0x108>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d157      	bne.n	8002900 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e242      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285c:	d106      	bne.n	800286c <HAL_RCC_OscConfig+0x74>
 800285e:	4b76      	ldr	r3, [pc, #472]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a75      	ldr	r2, [pc, #468]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e01d      	b.n	80028a8 <HAL_RCC_OscConfig+0xb0>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x98>
 8002876:	4b70      	ldr	r3, [pc, #448]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a6f      	ldr	r2, [pc, #444]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 800287c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b6d      	ldr	r3, [pc, #436]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a6c      	ldr	r2, [pc, #432]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e00b      	b.n	80028a8 <HAL_RCC_OscConfig+0xb0>
 8002890:	4b69      	ldr	r3, [pc, #420]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a68      	ldr	r2, [pc, #416]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	4b66      	ldr	r3, [pc, #408]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a65      	ldr	r2, [pc, #404]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 80028a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d013      	beq.n	80028d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe f8ce 	bl	8000a50 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b8:	f7fe f8ca 	bl	8000a50 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e207      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	4b5b      	ldr	r3, [pc, #364]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0xc0>
 80028d6:	e014      	b.n	8002902 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7fe f8ba 	bl	8000a50 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e0:	f7fe f8b6 	bl	8000a50 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1f3      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f2:	4b51      	ldr	r3, [pc, #324]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0xe8>
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d063      	beq.n	80029d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800290e:	4b4a      	ldr	r3, [pc, #296]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291a:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002922:	2b08      	cmp	r3, #8
 8002924:	d11c      	bne.n	8002960 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002926:	4b44      	ldr	r3, [pc, #272]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d116      	bne.n	8002960 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002932:	4b41      	ldr	r3, [pc, #260]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_RCC_OscConfig+0x152>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d001      	beq.n	800294a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e1c7      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294a:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4937      	ldr	r1, [pc, #220]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295e:	e03a      	b.n	80029d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d020      	beq.n	80029aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002968:	4b34      	ldr	r3, [pc, #208]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 800296a:	2201      	movs	r2, #1
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7fe f86f 	bl	8000a50 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002976:	f7fe f86b 	bl	8000a50 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e1a8      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002988:	4b2b      	ldr	r3, [pc, #172]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002994:	4b28      	ldr	r3, [pc, #160]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4925      	ldr	r1, [pc, #148]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]
 80029a8:	e015      	b.n	80029d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029aa:	4b24      	ldr	r3, [pc, #144]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe f84e 	bl	8000a50 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b8:	f7fe f84a 	bl	8000a50 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e187      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ca:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d036      	beq.n	8002a50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d016      	beq.n	8002a18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ea:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <HAL_RCC_OscConfig+0x248>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7fe f82e 	bl	8000a50 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f8:	f7fe f82a 	bl	8000a50 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e167      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x200>
 8002a16:	e01b      	b.n	8002a50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_RCC_OscConfig+0x248>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1e:	f7fe f817 	bl	8000a50 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a24:	e00e      	b.n	8002a44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a26:	f7fe f813 	bl	8000a50 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d907      	bls.n	8002a44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e150      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	42470000 	.word	0x42470000
 8002a40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a44:	4b88      	ldr	r3, [pc, #544]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1ea      	bne.n	8002a26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8097 	beq.w	8002b8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a62:	4b81      	ldr	r3, [pc, #516]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10f      	bne.n	8002a8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	4b7d      	ldr	r3, [pc, #500]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	4a7c      	ldr	r2, [pc, #496]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7e:	4b7a      	ldr	r3, [pc, #488]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8e:	4b77      	ldr	r3, [pc, #476]	; (8002c6c <HAL_RCC_OscConfig+0x474>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d118      	bne.n	8002acc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9a:	4b74      	ldr	r3, [pc, #464]	; (8002c6c <HAL_RCC_OscConfig+0x474>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a73      	ldr	r2, [pc, #460]	; (8002c6c <HAL_RCC_OscConfig+0x474>)
 8002aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa6:	f7fd ffd3 	bl	8000a50 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aae:	f7fd ffcf 	bl	8000a50 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e10c      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	4b6a      	ldr	r3, [pc, #424]	; (8002c6c <HAL_RCC_OscConfig+0x474>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d106      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x2ea>
 8002ad4:	4b64      	ldr	r3, [pc, #400]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad8:	4a63      	ldr	r2, [pc, #396]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae0:	e01c      	b.n	8002b1c <HAL_RCC_OscConfig+0x324>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x30c>
 8002aea:	4b5f      	ldr	r3, [pc, #380]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	4a5e      	ldr	r2, [pc, #376]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002af0:	f043 0304 	orr.w	r3, r3, #4
 8002af4:	6713      	str	r3, [r2, #112]	; 0x70
 8002af6:	4b5c      	ldr	r3, [pc, #368]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	4a5b      	ldr	r2, [pc, #364]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6713      	str	r3, [r2, #112]	; 0x70
 8002b02:	e00b      	b.n	8002b1c <HAL_RCC_OscConfig+0x324>
 8002b04:	4b58      	ldr	r3, [pc, #352]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	4a57      	ldr	r2, [pc, #348]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b0a:	f023 0301 	bic.w	r3, r3, #1
 8002b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b10:	4b55      	ldr	r3, [pc, #340]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4a54      	ldr	r2, [pc, #336]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b16:	f023 0304 	bic.w	r3, r3, #4
 8002b1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d015      	beq.n	8002b50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b24:	f7fd ff94 	bl	8000a50 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2a:	e00a      	b.n	8002b42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2c:	f7fd ff90 	bl	8000a50 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e0cb      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b42:	4b49      	ldr	r3, [pc, #292]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0ee      	beq.n	8002b2c <HAL_RCC_OscConfig+0x334>
 8002b4e:	e014      	b.n	8002b7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b50:	f7fd ff7e 	bl	8000a50 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b58:	f7fd ff7a 	bl	8000a50 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e0b5      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6e:	4b3e      	ldr	r3, [pc, #248]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1ee      	bne.n	8002b58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d105      	bne.n	8002b8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b80:	4b39      	ldr	r3, [pc, #228]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	4a38      	ldr	r2, [pc, #224]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80a1 	beq.w	8002cd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b96:	4b34      	ldr	r3, [pc, #208]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d05c      	beq.n	8002c5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d141      	bne.n	8002c2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002baa:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <HAL_RCC_OscConfig+0x478>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fd ff4e 	bl	8000a50 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fd ff4a 	bl	8000a50 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e087      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bca:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69da      	ldr	r2, [r3, #28]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	019b      	lsls	r3, r3, #6
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	085b      	lsrs	r3, r3, #1
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	041b      	lsls	r3, r3, #16
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	061b      	lsls	r3, r3, #24
 8002bfa:	491b      	ldr	r1, [pc, #108]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <HAL_RCC_OscConfig+0x478>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7fd ff23 	bl	8000a50 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c0e:	f7fd ff1f 	bl	8000a50 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e05c      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x416>
 8002c2c:	e054      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2e:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <HAL_RCC_OscConfig+0x478>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fd ff0c 	bl	8000a50 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7fd ff08 	bl	8000a50 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e045      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x444>
 8002c5a:	e03d      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d107      	bne.n	8002c74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e038      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40007000 	.word	0x40007000
 8002c70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c74:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <HAL_RCC_OscConfig+0x4ec>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d028      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d121      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d11a      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002caa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d111      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cba:	085b      	lsrs	r3, r3, #1
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d107      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800

08002ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0cc      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cfc:	4b68      	ldr	r3, [pc, #416]	; (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d90c      	bls.n	8002d24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0a:	4b65      	ldr	r3, [pc, #404]	; (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d12:	4b63      	ldr	r3, [pc, #396]	; (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0b8      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d020      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d3c:	4b59      	ldr	r3, [pc, #356]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	4a58      	ldr	r2, [pc, #352]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d54:	4b53      	ldr	r3, [pc, #332]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	4a52      	ldr	r2, [pc, #328]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d60:	4b50      	ldr	r3, [pc, #320]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	494d      	ldr	r1, [pc, #308]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d044      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d107      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	4b47      	ldr	r3, [pc, #284]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d119      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e07f      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d003      	beq.n	8002da6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d107      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da6:	4b3f      	ldr	r3, [pc, #252]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e06f      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db6:	4b3b      	ldr	r3, [pc, #236]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e067      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dc6:	4b37      	ldr	r3, [pc, #220]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f023 0203 	bic.w	r2, r3, #3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	4934      	ldr	r1, [pc, #208]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dd8:	f7fd fe3a 	bl	8000a50 <HAL_GetTick>
 8002ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dde:	e00a      	b.n	8002df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de0:	f7fd fe36 	bl	8000a50 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e04f      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df6:	4b2b      	ldr	r3, [pc, #172]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 020c 	and.w	r2, r3, #12
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d1eb      	bne.n	8002de0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e08:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d20c      	bcs.n	8002e30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e16:	4b22      	ldr	r3, [pc, #136]	; (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1e:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e032      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3c:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4916      	ldr	r1, [pc, #88]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e5a:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	490e      	ldr	r1, [pc, #56]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e6e:	f000 f821 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 8002e72:	4602      	mov	r2, r0
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	490a      	ldr	r1, [pc, #40]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e80:	5ccb      	ldrb	r3, [r1, r3]
 8002e82:	fa22 f303 	lsr.w	r3, r2, r3
 8002e86:	4a09      	ldr	r2, [pc, #36]	; (8002eac <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fd9a 	bl	80009c8 <HAL_InitTick>

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023c00 	.word	0x40023c00
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	080078e8 	.word	0x080078e8
 8002eac:	20000000 	.word	0x20000000
 8002eb0:	20000004 	.word	0x20000004

08002eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb8:	b094      	sub	sp, #80	; 0x50
 8002eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ecc:	4b79      	ldr	r3, [pc, #484]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d00d      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	f200 80e1 	bhi.w	80030a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d003      	beq.n	8002eee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ee6:	e0db      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee8:	4b73      	ldr	r3, [pc, #460]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002eec:	e0db      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eee:	4b72      	ldr	r3, [pc, #456]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ef0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ef2:	e0d8      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef4:	4b6f      	ldr	r3, [pc, #444]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002efc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002efe:	4b6d      	ldr	r3, [pc, #436]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d063      	beq.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0a:	4b6a      	ldr	r3, [pc, #424]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	099b      	lsrs	r3, r3, #6
 8002f10:	2200      	movs	r2, #0
 8002f12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f1e:	2300      	movs	r3, #0
 8002f20:	637b      	str	r3, [r7, #52]	; 0x34
 8002f22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f26:	4622      	mov	r2, r4
 8002f28:	462b      	mov	r3, r5
 8002f2a:	f04f 0000 	mov.w	r0, #0
 8002f2e:	f04f 0100 	mov.w	r1, #0
 8002f32:	0159      	lsls	r1, r3, #5
 8002f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f38:	0150      	lsls	r0, r2, #5
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4621      	mov	r1, r4
 8002f40:	1a51      	subs	r1, r2, r1
 8002f42:	6139      	str	r1, [r7, #16]
 8002f44:	4629      	mov	r1, r5
 8002f46:	eb63 0301 	sbc.w	r3, r3, r1
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f58:	4659      	mov	r1, fp
 8002f5a:	018b      	lsls	r3, r1, #6
 8002f5c:	4651      	mov	r1, sl
 8002f5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f62:	4651      	mov	r1, sl
 8002f64:	018a      	lsls	r2, r1, #6
 8002f66:	4651      	mov	r1, sl
 8002f68:	ebb2 0801 	subs.w	r8, r2, r1
 8002f6c:	4659      	mov	r1, fp
 8002f6e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f86:	4690      	mov	r8, r2
 8002f88:	4699      	mov	r9, r3
 8002f8a:	4623      	mov	r3, r4
 8002f8c:	eb18 0303 	adds.w	r3, r8, r3
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	462b      	mov	r3, r5
 8002f94:	eb49 0303 	adc.w	r3, r9, r3
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	028b      	lsls	r3, r1, #10
 8002faa:	4621      	mov	r1, r4
 8002fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	028a      	lsls	r2, r1, #10
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fba:	2200      	movs	r2, #0
 8002fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fc4:	f7fd f900 	bl	80001c8 <__aeabi_uldivmod>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4613      	mov	r3, r2
 8002fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd0:	e058      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd2:	4b38      	ldr	r3, [pc, #224]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	099b      	lsrs	r3, r3, #6
 8002fd8:	2200      	movs	r2, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	4611      	mov	r1, r2
 8002fde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fe2:	623b      	str	r3, [r7, #32]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fec:	4642      	mov	r2, r8
 8002fee:	464b      	mov	r3, r9
 8002ff0:	f04f 0000 	mov.w	r0, #0
 8002ff4:	f04f 0100 	mov.w	r1, #0
 8002ff8:	0159      	lsls	r1, r3, #5
 8002ffa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ffe:	0150      	lsls	r0, r2, #5
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4641      	mov	r1, r8
 8003006:	ebb2 0a01 	subs.w	sl, r2, r1
 800300a:	4649      	mov	r1, r9
 800300c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800301c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003020:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003024:	ebb2 040a 	subs.w	r4, r2, sl
 8003028:	eb63 050b 	sbc.w	r5, r3, fp
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	00eb      	lsls	r3, r5, #3
 8003036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800303a:	00e2      	lsls	r2, r4, #3
 800303c:	4614      	mov	r4, r2
 800303e:	461d      	mov	r5, r3
 8003040:	4643      	mov	r3, r8
 8003042:	18e3      	adds	r3, r4, r3
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	464b      	mov	r3, r9
 8003048:	eb45 0303 	adc.w	r3, r5, r3
 800304c:	607b      	str	r3, [r7, #4]
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	e9d7 4500 	ldrd	r4, r5, [r7]
 800305a:	4629      	mov	r1, r5
 800305c:	028b      	lsls	r3, r1, #10
 800305e:	4621      	mov	r1, r4
 8003060:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003064:	4621      	mov	r1, r4
 8003066:	028a      	lsls	r2, r1, #10
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800306e:	2200      	movs	r2, #0
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	61fa      	str	r2, [r7, #28]
 8003074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003078:	f7fd f8a6 	bl	80001c8 <__aeabi_uldivmod>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4613      	mov	r3, r2
 8003082:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	3301      	adds	r3, #1
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003094:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003098:	fbb2 f3f3 	udiv	r3, r2, r3
 800309c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800309e:	e002      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80030a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3750      	adds	r7, #80	; 0x50
 80030ac:	46bd      	mov	sp, r7
 80030ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	00f42400 	.word	0x00f42400

080030bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000000 	.word	0x20000000

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030d8:	f7ff fff0 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	0a9b      	lsrs	r3, r3, #10
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4903      	ldr	r1, [pc, #12]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40023800 	.word	0x40023800
 80030f8:	080078f8 	.word	0x080078f8

080030fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003100:	f7ff ffdc 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	0b5b      	lsrs	r3, r3, #13
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4903      	ldr	r1, [pc, #12]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40023800 	.word	0x40023800
 8003120:	080078f8 	.word	0x080078f8

08003124 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e03f      	b.n	80031b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fd fb62 	bl	8000814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2224      	movs	r2, #36	; 0x24
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003166:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f829 	bl	80031c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800317c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695a      	ldr	r2, [r3, #20]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800318c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800319c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c4:	b0c0      	sub	sp, #256	; 0x100
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031dc:	68d9      	ldr	r1, [r3, #12]
 80031de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	ea40 0301 	orr.w	r3, r0, r1
 80031e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	431a      	orrs	r2, r3
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003218:	f021 010c 	bic.w	r1, r1, #12
 800321c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003226:	430b      	orrs	r3, r1
 8003228:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800322a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323a:	6999      	ldr	r1, [r3, #24]
 800323c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	ea40 0301 	orr.w	r3, r0, r1
 8003246:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4b8f      	ldr	r3, [pc, #572]	; (800348c <UART_SetConfig+0x2cc>)
 8003250:	429a      	cmp	r2, r3
 8003252:	d005      	beq.n	8003260 <UART_SetConfig+0xa0>
 8003254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	4b8d      	ldr	r3, [pc, #564]	; (8003490 <UART_SetConfig+0x2d0>)
 800325c:	429a      	cmp	r2, r3
 800325e:	d104      	bne.n	800326a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003260:	f7ff ff4c 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 8003264:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003268:	e003      	b.n	8003272 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800326a:	f7ff ff33 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 800326e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800327c:	f040 810c 	bne.w	8003498 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003284:	2200      	movs	r2, #0
 8003286:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800328a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800328e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003292:	4622      	mov	r2, r4
 8003294:	462b      	mov	r3, r5
 8003296:	1891      	adds	r1, r2, r2
 8003298:	65b9      	str	r1, [r7, #88]	; 0x58
 800329a:	415b      	adcs	r3, r3
 800329c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800329e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032a2:	4621      	mov	r1, r4
 80032a4:	eb12 0801 	adds.w	r8, r2, r1
 80032a8:	4629      	mov	r1, r5
 80032aa:	eb43 0901 	adc.w	r9, r3, r1
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032c2:	4690      	mov	r8, r2
 80032c4:	4699      	mov	r9, r3
 80032c6:	4623      	mov	r3, r4
 80032c8:	eb18 0303 	adds.w	r3, r8, r3
 80032cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032d0:	462b      	mov	r3, r5
 80032d2:	eb49 0303 	adc.w	r3, r9, r3
 80032d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032ee:	460b      	mov	r3, r1
 80032f0:	18db      	adds	r3, r3, r3
 80032f2:	653b      	str	r3, [r7, #80]	; 0x50
 80032f4:	4613      	mov	r3, r2
 80032f6:	eb42 0303 	adc.w	r3, r2, r3
 80032fa:	657b      	str	r3, [r7, #84]	; 0x54
 80032fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003300:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003304:	f7fc ff60 	bl	80001c8 <__aeabi_uldivmod>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4b61      	ldr	r3, [pc, #388]	; (8003494 <UART_SetConfig+0x2d4>)
 800330e:	fba3 2302 	umull	r2, r3, r3, r2
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	011c      	lsls	r4, r3, #4
 8003316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800331a:	2200      	movs	r2, #0
 800331c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003320:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003324:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003328:	4642      	mov	r2, r8
 800332a:	464b      	mov	r3, r9
 800332c:	1891      	adds	r1, r2, r2
 800332e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003330:	415b      	adcs	r3, r3
 8003332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003334:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003338:	4641      	mov	r1, r8
 800333a:	eb12 0a01 	adds.w	sl, r2, r1
 800333e:	4649      	mov	r1, r9
 8003340:	eb43 0b01 	adc.w	fp, r3, r1
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003350:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003358:	4692      	mov	sl, r2
 800335a:	469b      	mov	fp, r3
 800335c:	4643      	mov	r3, r8
 800335e:	eb1a 0303 	adds.w	r3, sl, r3
 8003362:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003366:	464b      	mov	r3, r9
 8003368:	eb4b 0303 	adc.w	r3, fp, r3
 800336c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800337c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003380:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003384:	460b      	mov	r3, r1
 8003386:	18db      	adds	r3, r3, r3
 8003388:	643b      	str	r3, [r7, #64]	; 0x40
 800338a:	4613      	mov	r3, r2
 800338c:	eb42 0303 	adc.w	r3, r2, r3
 8003390:	647b      	str	r3, [r7, #68]	; 0x44
 8003392:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003396:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800339a:	f7fc ff15 	bl	80001c8 <__aeabi_uldivmod>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4611      	mov	r1, r2
 80033a4:	4b3b      	ldr	r3, [pc, #236]	; (8003494 <UART_SetConfig+0x2d4>)
 80033a6:	fba3 2301 	umull	r2, r3, r3, r1
 80033aa:	095b      	lsrs	r3, r3, #5
 80033ac:	2264      	movs	r2, #100	; 0x64
 80033ae:	fb02 f303 	mul.w	r3, r2, r3
 80033b2:	1acb      	subs	r3, r1, r3
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033ba:	4b36      	ldr	r3, [pc, #216]	; (8003494 <UART_SetConfig+0x2d4>)
 80033bc:	fba3 2302 	umull	r2, r3, r3, r2
 80033c0:	095b      	lsrs	r3, r3, #5
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033c8:	441c      	add	r4, r3
 80033ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ce:	2200      	movs	r2, #0
 80033d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80033d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033dc:	4642      	mov	r2, r8
 80033de:	464b      	mov	r3, r9
 80033e0:	1891      	adds	r1, r2, r2
 80033e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80033e4:	415b      	adcs	r3, r3
 80033e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033ec:	4641      	mov	r1, r8
 80033ee:	1851      	adds	r1, r2, r1
 80033f0:	6339      	str	r1, [r7, #48]	; 0x30
 80033f2:	4649      	mov	r1, r9
 80033f4:	414b      	adcs	r3, r1
 80033f6:	637b      	str	r3, [r7, #52]	; 0x34
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003404:	4659      	mov	r1, fp
 8003406:	00cb      	lsls	r3, r1, #3
 8003408:	4651      	mov	r1, sl
 800340a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800340e:	4651      	mov	r1, sl
 8003410:	00ca      	lsls	r2, r1, #3
 8003412:	4610      	mov	r0, r2
 8003414:	4619      	mov	r1, r3
 8003416:	4603      	mov	r3, r0
 8003418:	4642      	mov	r2, r8
 800341a:	189b      	adds	r3, r3, r2
 800341c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003420:	464b      	mov	r3, r9
 8003422:	460a      	mov	r2, r1
 8003424:	eb42 0303 	adc.w	r3, r2, r3
 8003428:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003438:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800343c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003440:	460b      	mov	r3, r1
 8003442:	18db      	adds	r3, r3, r3
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
 8003446:	4613      	mov	r3, r2
 8003448:	eb42 0303 	adc.w	r3, r2, r3
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800344e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003452:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003456:	f7fc feb7 	bl	80001c8 <__aeabi_uldivmod>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <UART_SetConfig+0x2d4>)
 8003460:	fba3 1302 	umull	r1, r3, r3, r2
 8003464:	095b      	lsrs	r3, r3, #5
 8003466:	2164      	movs	r1, #100	; 0x64
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	3332      	adds	r3, #50	; 0x32
 8003472:	4a08      	ldr	r2, [pc, #32]	; (8003494 <UART_SetConfig+0x2d4>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	f003 0207 	and.w	r2, r3, #7
 800347e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4422      	add	r2, r4
 8003486:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003488:	e105      	b.n	8003696 <UART_SetConfig+0x4d6>
 800348a:	bf00      	nop
 800348c:	40011000 	.word	0x40011000
 8003490:	40011400 	.word	0x40011400
 8003494:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800349c:	2200      	movs	r2, #0
 800349e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034aa:	4642      	mov	r2, r8
 80034ac:	464b      	mov	r3, r9
 80034ae:	1891      	adds	r1, r2, r2
 80034b0:	6239      	str	r1, [r7, #32]
 80034b2:	415b      	adcs	r3, r3
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
 80034b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ba:	4641      	mov	r1, r8
 80034bc:	1854      	adds	r4, r2, r1
 80034be:	4649      	mov	r1, r9
 80034c0:	eb43 0501 	adc.w	r5, r3, r1
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	00eb      	lsls	r3, r5, #3
 80034ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034d2:	00e2      	lsls	r2, r4, #3
 80034d4:	4614      	mov	r4, r2
 80034d6:	461d      	mov	r5, r3
 80034d8:	4643      	mov	r3, r8
 80034da:	18e3      	adds	r3, r4, r3
 80034dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034e0:	464b      	mov	r3, r9
 80034e2:	eb45 0303 	adc.w	r3, r5, r3
 80034e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003506:	4629      	mov	r1, r5
 8003508:	008b      	lsls	r3, r1, #2
 800350a:	4621      	mov	r1, r4
 800350c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003510:	4621      	mov	r1, r4
 8003512:	008a      	lsls	r2, r1, #2
 8003514:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003518:	f7fc fe56 	bl	80001c8 <__aeabi_uldivmod>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4b60      	ldr	r3, [pc, #384]	; (80036a4 <UART_SetConfig+0x4e4>)
 8003522:	fba3 2302 	umull	r2, r3, r3, r2
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	011c      	lsls	r4, r3, #4
 800352a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800352e:	2200      	movs	r2, #0
 8003530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003534:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003538:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800353c:	4642      	mov	r2, r8
 800353e:	464b      	mov	r3, r9
 8003540:	1891      	adds	r1, r2, r2
 8003542:	61b9      	str	r1, [r7, #24]
 8003544:	415b      	adcs	r3, r3
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800354c:	4641      	mov	r1, r8
 800354e:	1851      	adds	r1, r2, r1
 8003550:	6139      	str	r1, [r7, #16]
 8003552:	4649      	mov	r1, r9
 8003554:	414b      	adcs	r3, r1
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003564:	4659      	mov	r1, fp
 8003566:	00cb      	lsls	r3, r1, #3
 8003568:	4651      	mov	r1, sl
 800356a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800356e:	4651      	mov	r1, sl
 8003570:	00ca      	lsls	r2, r1, #3
 8003572:	4610      	mov	r0, r2
 8003574:	4619      	mov	r1, r3
 8003576:	4603      	mov	r3, r0
 8003578:	4642      	mov	r2, r8
 800357a:	189b      	adds	r3, r3, r2
 800357c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003580:	464b      	mov	r3, r9
 8003582:	460a      	mov	r2, r1
 8003584:	eb42 0303 	adc.w	r3, r2, r3
 8003588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800358c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	67bb      	str	r3, [r7, #120]	; 0x78
 8003596:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035a4:	4649      	mov	r1, r9
 80035a6:	008b      	lsls	r3, r1, #2
 80035a8:	4641      	mov	r1, r8
 80035aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035ae:	4641      	mov	r1, r8
 80035b0:	008a      	lsls	r2, r1, #2
 80035b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035b6:	f7fc fe07 	bl	80001c8 <__aeabi_uldivmod>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4b39      	ldr	r3, [pc, #228]	; (80036a4 <UART_SetConfig+0x4e4>)
 80035c0:	fba3 1302 	umull	r1, r3, r3, r2
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	2164      	movs	r1, #100	; 0x64
 80035c8:	fb01 f303 	mul.w	r3, r1, r3
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	3332      	adds	r3, #50	; 0x32
 80035d2:	4a34      	ldr	r2, [pc, #208]	; (80036a4 <UART_SetConfig+0x4e4>)
 80035d4:	fba2 2303 	umull	r2, r3, r2, r3
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035de:	441c      	add	r4, r3
 80035e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035e4:	2200      	movs	r2, #0
 80035e6:	673b      	str	r3, [r7, #112]	; 0x70
 80035e8:	677a      	str	r2, [r7, #116]	; 0x74
 80035ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035ee:	4642      	mov	r2, r8
 80035f0:	464b      	mov	r3, r9
 80035f2:	1891      	adds	r1, r2, r2
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	415b      	adcs	r3, r3
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035fe:	4641      	mov	r1, r8
 8003600:	1851      	adds	r1, r2, r1
 8003602:	6039      	str	r1, [r7, #0]
 8003604:	4649      	mov	r1, r9
 8003606:	414b      	adcs	r3, r1
 8003608:	607b      	str	r3, [r7, #4]
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003616:	4659      	mov	r1, fp
 8003618:	00cb      	lsls	r3, r1, #3
 800361a:	4651      	mov	r1, sl
 800361c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003620:	4651      	mov	r1, sl
 8003622:	00ca      	lsls	r2, r1, #3
 8003624:	4610      	mov	r0, r2
 8003626:	4619      	mov	r1, r3
 8003628:	4603      	mov	r3, r0
 800362a:	4642      	mov	r2, r8
 800362c:	189b      	adds	r3, r3, r2
 800362e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003630:	464b      	mov	r3, r9
 8003632:	460a      	mov	r2, r1
 8003634:	eb42 0303 	adc.w	r3, r2, r3
 8003638:	66fb      	str	r3, [r7, #108]	; 0x6c
 800363a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	663b      	str	r3, [r7, #96]	; 0x60
 8003644:	667a      	str	r2, [r7, #100]	; 0x64
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003652:	4649      	mov	r1, r9
 8003654:	008b      	lsls	r3, r1, #2
 8003656:	4641      	mov	r1, r8
 8003658:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800365c:	4641      	mov	r1, r8
 800365e:	008a      	lsls	r2, r1, #2
 8003660:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003664:	f7fc fdb0 	bl	80001c8 <__aeabi_uldivmod>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <UART_SetConfig+0x4e4>)
 800366e:	fba3 1302 	umull	r1, r3, r3, r2
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	2164      	movs	r1, #100	; 0x64
 8003676:	fb01 f303 	mul.w	r3, r1, r3
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	3332      	adds	r3, #50	; 0x32
 8003680:	4a08      	ldr	r2, [pc, #32]	; (80036a4 <UART_SetConfig+0x4e4>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	f003 020f 	and.w	r2, r3, #15
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4422      	add	r2, r4
 8003694:	609a      	str	r2, [r3, #8]
}
 8003696:	bf00      	nop
 8003698:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800369c:	46bd      	mov	sp, r7
 800369e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036a2:	bf00      	nop
 80036a4:	51eb851f 	.word	0x51eb851f

080036a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036a8:	b084      	sub	sp, #16
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b084      	sub	sp, #16
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	f107 001c 	add.w	r0, r7, #28
 80036b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d122      	bne.n	8003706 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80036d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d105      	bne.n	80036fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f001 fbee 	bl	8004edc <USB_CoreReset>
 8003700:	4603      	mov	r3, r0
 8003702:	73fb      	strb	r3, [r7, #15]
 8003704:	e01a      	b.n	800373c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f001 fbe2 	bl	8004edc <USB_CoreReset>
 8003718:	4603      	mov	r3, r0
 800371a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800371c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800371e:	2b00      	cmp	r3, #0
 8003720:	d106      	bne.n	8003730 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	639a      	str	r2, [r3, #56]	; 0x38
 800372e:	e005      	b.n	800373c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373e:	2b01      	cmp	r3, #1
 8003740:	d10b      	bne.n	800375a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f043 0206 	orr.w	r2, r3, #6
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f043 0220 	orr.w	r2, r3, #32
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800375a:	7bfb      	ldrb	r3, [r7, #15]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003766:	b004      	add	sp, #16
 8003768:	4770      	bx	lr
	...

0800376c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	4613      	mov	r3, r2
 8003778:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d165      	bne.n	800384c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4a41      	ldr	r2, [pc, #260]	; (8003888 <USB_SetTurnaroundTime+0x11c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d906      	bls.n	8003796 <USB_SetTurnaroundTime+0x2a>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4a40      	ldr	r2, [pc, #256]	; (800388c <USB_SetTurnaroundTime+0x120>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d202      	bcs.n	8003796 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003790:	230f      	movs	r3, #15
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	e062      	b.n	800385c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4a3c      	ldr	r2, [pc, #240]	; (800388c <USB_SetTurnaroundTime+0x120>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d306      	bcc.n	80037ac <USB_SetTurnaroundTime+0x40>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	4a3b      	ldr	r2, [pc, #236]	; (8003890 <USB_SetTurnaroundTime+0x124>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d202      	bcs.n	80037ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80037a6:	230e      	movs	r3, #14
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	e057      	b.n	800385c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4a38      	ldr	r2, [pc, #224]	; (8003890 <USB_SetTurnaroundTime+0x124>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d306      	bcc.n	80037c2 <USB_SetTurnaroundTime+0x56>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4a37      	ldr	r2, [pc, #220]	; (8003894 <USB_SetTurnaroundTime+0x128>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d202      	bcs.n	80037c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80037bc:	230d      	movs	r3, #13
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	e04c      	b.n	800385c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4a33      	ldr	r2, [pc, #204]	; (8003894 <USB_SetTurnaroundTime+0x128>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d306      	bcc.n	80037d8 <USB_SetTurnaroundTime+0x6c>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4a32      	ldr	r2, [pc, #200]	; (8003898 <USB_SetTurnaroundTime+0x12c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d802      	bhi.n	80037d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80037d2:	230c      	movs	r3, #12
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	e041      	b.n	800385c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4a2f      	ldr	r2, [pc, #188]	; (8003898 <USB_SetTurnaroundTime+0x12c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d906      	bls.n	80037ee <USB_SetTurnaroundTime+0x82>
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4a2e      	ldr	r2, [pc, #184]	; (800389c <USB_SetTurnaroundTime+0x130>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d802      	bhi.n	80037ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80037e8:	230b      	movs	r3, #11
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	e036      	b.n	800385c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	4a2a      	ldr	r2, [pc, #168]	; (800389c <USB_SetTurnaroundTime+0x130>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d906      	bls.n	8003804 <USB_SetTurnaroundTime+0x98>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4a29      	ldr	r2, [pc, #164]	; (80038a0 <USB_SetTurnaroundTime+0x134>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d802      	bhi.n	8003804 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80037fe:	230a      	movs	r3, #10
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	e02b      	b.n	800385c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4a26      	ldr	r2, [pc, #152]	; (80038a0 <USB_SetTurnaroundTime+0x134>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d906      	bls.n	800381a <USB_SetTurnaroundTime+0xae>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4a25      	ldr	r2, [pc, #148]	; (80038a4 <USB_SetTurnaroundTime+0x138>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d202      	bcs.n	800381a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003814:	2309      	movs	r3, #9
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	e020      	b.n	800385c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4a21      	ldr	r2, [pc, #132]	; (80038a4 <USB_SetTurnaroundTime+0x138>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d306      	bcc.n	8003830 <USB_SetTurnaroundTime+0xc4>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	4a20      	ldr	r2, [pc, #128]	; (80038a8 <USB_SetTurnaroundTime+0x13c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d802      	bhi.n	8003830 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800382a:	2308      	movs	r3, #8
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	e015      	b.n	800385c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4a1d      	ldr	r2, [pc, #116]	; (80038a8 <USB_SetTurnaroundTime+0x13c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d906      	bls.n	8003846 <USB_SetTurnaroundTime+0xda>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4a1c      	ldr	r2, [pc, #112]	; (80038ac <USB_SetTurnaroundTime+0x140>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d202      	bcs.n	8003846 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003840:	2307      	movs	r3, #7
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	e00a      	b.n	800385c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003846:	2306      	movs	r3, #6
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	e007      	b.n	800385c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d102      	bne.n	8003858 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003852:	2309      	movs	r3, #9
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	e001      	b.n	800385c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003858:	2309      	movs	r3, #9
 800385a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	029b      	lsls	r3, r3, #10
 8003870:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003874:	431a      	orrs	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	00d8acbf 	.word	0x00d8acbf
 800388c:	00e4e1c0 	.word	0x00e4e1c0
 8003890:	00f42400 	.word	0x00f42400
 8003894:	01067380 	.word	0x01067380
 8003898:	011a499f 	.word	0x011a499f
 800389c:	01312cff 	.word	0x01312cff
 80038a0:	014ca43f 	.word	0x014ca43f
 80038a4:	016e3600 	.word	0x016e3600
 80038a8:	01a6ab1f 	.word	0x01a6ab1f
 80038ac:	01e84800 	.word	0x01e84800

080038b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f043 0201 	orr.w	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f023 0201 	bic.w	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d115      	bne.n	8003942 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003922:	2001      	movs	r0, #1
 8003924:	f7fd f8a0 	bl	8000a68 <HAL_Delay>
      ms++;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3301      	adds	r3, #1
 800392c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f001 fa45 	bl	8004dbe <USB_GetMode>
 8003934:	4603      	mov	r3, r0
 8003936:	2b01      	cmp	r3, #1
 8003938:	d01e      	beq.n	8003978 <USB_SetCurrentMode+0x84>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b31      	cmp	r3, #49	; 0x31
 800393e:	d9f0      	bls.n	8003922 <USB_SetCurrentMode+0x2e>
 8003940:	e01a      	b.n	8003978 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d115      	bne.n	8003974 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003954:	2001      	movs	r0, #1
 8003956:	f7fd f887 	bl	8000a68 <HAL_Delay>
      ms++;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3301      	adds	r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f001 fa2c 	bl	8004dbe <USB_GetMode>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <USB_SetCurrentMode+0x84>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b31      	cmp	r3, #49	; 0x31
 8003970:	d9f0      	bls.n	8003954 <USB_SetCurrentMode+0x60>
 8003972:	e001      	b.n	8003978 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e005      	b.n	8003984 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b32      	cmp	r3, #50	; 0x32
 800397c:	d101      	bne.n	8003982 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800398c:	b084      	sub	sp, #16
 800398e:	b580      	push	{r7, lr}
 8003990:	b086      	sub	sp, #24
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800399a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	e009      	b.n	80039c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	3340      	adds	r3, #64	; 0x40
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	2200      	movs	r2, #0
 80039b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	3301      	adds	r3, #1
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	2b0e      	cmp	r3, #14
 80039c4:	d9f2      	bls.n	80039ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80039c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d11c      	bne.n	8003a06 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039da:	f043 0302 	orr.w	r3, r3, #2
 80039de:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	639a      	str	r2, [r3, #56]	; 0x38
 8003a04:	e00b      	b.n	8003a1e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a24:	461a      	mov	r2, r3
 8003a26:	2300      	movs	r3, #0
 8003a28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a30:	4619      	mov	r1, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a38:	461a      	mov	r2, r3
 8003a3a:	680b      	ldr	r3, [r1, #0]
 8003a3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d10c      	bne.n	8003a5e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d104      	bne.n	8003a54 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f965 	bl	8003d1c <USB_SetDevSpeed>
 8003a52:	e008      	b.n	8003a66 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a54:	2101      	movs	r1, #1
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f960 	bl	8003d1c <USB_SetDevSpeed>
 8003a5c:	e003      	b.n	8003a66 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a5e:	2103      	movs	r1, #3
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f95b 	bl	8003d1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a66:	2110      	movs	r1, #16
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f8f3 	bl	8003c54 <USB_FlushTxFifo>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f91f 	bl	8003cbc <USB_FlushRxFifo>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a8e:	461a      	mov	r2, r3
 8003a90:	2300      	movs	r3, #0
 8003a92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aac:	2300      	movs	r3, #0
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	e043      	b.n	8003b3a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ac8:	d118      	bne.n	8003afc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003adc:	461a      	mov	r2, r3
 8003ade:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	e013      	b.n	8003b0e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af2:	461a      	mov	r2, r3
 8003af4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e008      	b.n	8003b0e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b08:	461a      	mov	r2, r3
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	3301      	adds	r3, #1
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d3b7      	bcc.n	8003ab2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b42:	2300      	movs	r3, #0
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	e043      	b.n	8003bd0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b5e:	d118      	bne.n	8003b92 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10a      	bne.n	8003b7c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b72:	461a      	mov	r2, r3
 8003b74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	e013      	b.n	8003ba4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	e008      	b.n	8003ba4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d3b7      	bcc.n	8003b48 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003be6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003bf8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d105      	bne.n	8003c0c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f043 0210 	orr.w	r2, r3, #16
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699a      	ldr	r2, [r3, #24]
 8003c10:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <USB_DevInit+0x2c4>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d005      	beq.n	8003c2a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f043 0208 	orr.w	r2, r3, #8
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d107      	bne.n	8003c40 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c38:	f043 0304 	orr.w	r3, r3, #4
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c4c:	b004      	add	sp, #16
 8003c4e:	4770      	bx	lr
 8003c50:	803c3800 	.word	0x803c3800

08003c54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3301      	adds	r3, #1
 8003c66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a13      	ldr	r2, [pc, #76]	; (8003cb8 <USB_FlushTxFifo+0x64>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d901      	bls.n	8003c74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e01b      	b.n	8003cac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	daf2      	bge.n	8003c62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	019b      	lsls	r3, r3, #6
 8003c84:	f043 0220 	orr.w	r2, r3, #32
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4a08      	ldr	r2, [pc, #32]	; (8003cb8 <USB_FlushTxFifo+0x64>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e006      	b.n	8003cac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d0f0      	beq.n	8003c8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	00030d40 	.word	0x00030d40

08003cbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4a11      	ldr	r2, [pc, #68]	; (8003d18 <USB_FlushRxFifo+0x5c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e018      	b.n	8003d0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	daf2      	bge.n	8003cc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2210      	movs	r2, #16
 8003cea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <USB_FlushRxFifo+0x5c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e006      	b.n	8003d0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0310 	and.w	r3, r3, #16
 8003d06:	2b10      	cmp	r3, #16
 8003d08:	d0f0      	beq.n	8003cec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	00030d40 	.word	0x00030d40

08003d1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	68f9      	ldr	r1, [r7, #12]
 8003d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b087      	sub	sp, #28
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 0306 	and.w	r3, r3, #6
 8003d66:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	75fb      	strb	r3, [r7, #23]
 8003d72:	e00a      	b.n	8003d8a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d002      	beq.n	8003d80 <USB_GetDevSpeed+0x32>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2b06      	cmp	r3, #6
 8003d7e:	d102      	bne.n	8003d86 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003d80:	2302      	movs	r3, #2
 8003d82:	75fb      	strb	r3, [r7, #23]
 8003d84:	e001      	b.n	8003d8a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003d86:	230f      	movs	r3, #15
 8003d88:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	371c      	adds	r7, #28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	785b      	ldrb	r3, [r3, #1]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d13a      	bne.n	8003e2a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dba:	69da      	ldr	r2, [r3, #28]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	68f9      	ldr	r1, [r7, #12]
 8003dce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d155      	bne.n	8003e98 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	791b      	ldrb	r3, [r3, #4]
 8003e06:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e08:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	059b      	lsls	r3, r3, #22
 8003e0e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e10:	4313      	orrs	r3, r2
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	0151      	lsls	r1, r2, #5
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	440a      	add	r2, r1
 8003e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	e036      	b.n	8003e98 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e30:	69da      	ldr	r2, [r3, #28]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e40:	041b      	lsls	r3, r3, #16
 8003e42:	68f9      	ldr	r1, [r7, #12]
 8003e44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d11a      	bne.n	8003e98 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	791b      	ldrb	r3, [r3, #4]
 8003e7c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e7e:	430b      	orrs	r3, r1
 8003e80:	4313      	orrs	r3, r2
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	0151      	lsls	r1, r2, #5
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	440a      	add	r2, r1
 8003e8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e96:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
	...

08003ea8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	785b      	ldrb	r3, [r3, #1]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d161      	bne.n	8003f88 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eda:	d11f      	bne.n	8003f1c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ef6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003efa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	0151      	lsls	r1, r2, #5
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	440a      	add	r2, r1
 8003f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	43db      	mvns	r3, r3
 8003f36:	68f9      	ldr	r1, [r7, #12]
 8003f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	2101      	movs	r1, #1
 8003f52:	fa01 f303 	lsl.w	r3, r1, r3
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	68f9      	ldr	r1, [r7, #12]
 8003f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f60:	4013      	ands	r3, r2
 8003f62:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	0159      	lsls	r1, r3, #5
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	440b      	add	r3, r1
 8003f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4b35      	ldr	r3, [pc, #212]	; (8004058 <USB_DeactivateEndpoint+0x1b0>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]
 8003f86:	e060      	b.n	800404a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f9e:	d11f      	bne.n	8003fe0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	0151      	lsls	r1, r2, #5
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	440a      	add	r2, r1
 8003fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fbe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	0151      	lsls	r1, r2, #5
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	440a      	add	r2, r1
 8003fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	f003 030f 	and.w	r3, r3, #15
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff6:	041b      	lsls	r3, r3, #16
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	68f9      	ldr	r1, [r7, #12]
 8003ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004000:	4013      	ands	r3, r2
 8004002:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400a:	69da      	ldr	r2, [r3, #28]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	2101      	movs	r1, #1
 8004016:	fa01 f303 	lsl.w	r3, r1, r3
 800401a:	041b      	lsls	r3, r3, #16
 800401c:	43db      	mvns	r3, r3
 800401e:	68f9      	ldr	r1, [r7, #12]
 8004020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004024:	4013      	ands	r3, r2
 8004026:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	0159      	lsls	r1, r3, #5
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	440b      	add	r3, r1
 800403e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004042:	4619      	mov	r1, r3
 8004044:	4b05      	ldr	r3, [pc, #20]	; (800405c <USB_DeactivateEndpoint+0x1b4>)
 8004046:	4013      	ands	r3, r2
 8004048:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	ec337800 	.word	0xec337800
 800405c:	eff37800 	.word	0xeff37800

08004060 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	; 0x28
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	4613      	mov	r3, r2
 800406c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	785b      	ldrb	r3, [r3, #1]
 800407c:	2b01      	cmp	r3, #1
 800407e:	f040 815c 	bne.w	800433a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d132      	bne.n	80040f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	0151      	lsls	r1, r2, #5
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	440a      	add	r2, r1
 80040a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	0151      	lsls	r1, r2, #5
 80040c0:	69fa      	ldr	r2, [r7, #28]
 80040c2:	440a      	add	r2, r1
 80040c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	0151      	lsls	r1, r2, #5
 80040e0:	69fa      	ldr	r2, [r7, #28]
 80040e2:	440a      	add	r2, r1
 80040e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e8:	0cdb      	lsrs	r3, r3, #19
 80040ea:	04db      	lsls	r3, r3, #19
 80040ec:	6113      	str	r3, [r2, #16]
 80040ee:	e074      	b.n	80041da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	0151      	lsls	r1, r2, #5
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	440a      	add	r2, r1
 8004106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800410a:	0cdb      	lsrs	r3, r3, #19
 800410c:	04db      	lsls	r3, r3, #19
 800410e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	0151      	lsls	r1, r2, #5
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	440a      	add	r2, r1
 8004126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800412a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800412e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004132:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004140:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	6999      	ldr	r1, [r3, #24]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	440b      	add	r3, r1
 800414c:	1e59      	subs	r1, r3, #1
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	fbb1 f3f3 	udiv	r3, r1, r3
 8004156:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004158:	4b9d      	ldr	r3, [pc, #628]	; (80043d0 <USB_EPStartXfer+0x370>)
 800415a:	400b      	ands	r3, r1
 800415c:	69b9      	ldr	r1, [r7, #24]
 800415e:	0148      	lsls	r0, r1, #5
 8004160:	69f9      	ldr	r1, [r7, #28]
 8004162:	4401      	add	r1, r0
 8004164:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004168:	4313      	orrs	r3, r2
 800416a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004182:	69b9      	ldr	r1, [r7, #24]
 8004184:	0148      	lsls	r0, r1, #5
 8004186:	69f9      	ldr	r1, [r7, #28]
 8004188:	4401      	add	r1, r0
 800418a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800418e:	4313      	orrs	r3, r2
 8004190:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	791b      	ldrb	r3, [r3, #4]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d11f      	bne.n	80041da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	0151      	lsls	r1, r2, #5
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	440a      	add	r2, r1
 80041b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80041b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	69fa      	ldr	r2, [r7, #28]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d14b      	bne.n	8004278 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d009      	beq.n	80041fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f4:	461a      	mov	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	791b      	ldrb	r3, [r3, #4]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d128      	bne.n	8004256 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004210:	2b00      	cmp	r3, #0
 8004212:	d110      	bne.n	8004236 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	0151      	lsls	r1, r2, #5
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	440a      	add	r2, r1
 800422a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800422e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	e00f      	b.n	8004256 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	0151      	lsls	r1, r2, #5
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	440a      	add	r2, r1
 800424c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004254:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	0151      	lsls	r1, r2, #5
 8004268:	69fa      	ldr	r2, [r7, #28]
 800426a:	440a      	add	r2, r1
 800426c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004270:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	e133      	b.n	80044e0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	0151      	lsls	r1, r2, #5
 800428a:	69fa      	ldr	r2, [r7, #28]
 800428c:	440a      	add	r2, r1
 800428e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004292:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004296:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	791b      	ldrb	r3, [r3, #4]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d015      	beq.n	80042cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 811b 	beq.w	80044e0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	2101      	movs	r1, #1
 80042bc:	fa01 f303 	lsl.w	r3, r1, r3
 80042c0:	69f9      	ldr	r1, [r7, #28]
 80042c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042c6:	4313      	orrs	r3, r2
 80042c8:	634b      	str	r3, [r1, #52]	; 0x34
 80042ca:	e109      	b.n	80044e0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d110      	bne.n	80042fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	0151      	lsls	r1, r2, #5
 80042ee:	69fa      	ldr	r2, [r7, #28]
 80042f0:	440a      	add	r2, r1
 80042f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	e00f      	b.n	800431e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	0151      	lsls	r1, r2, #5
 8004310:	69fa      	ldr	r2, [r7, #28]
 8004312:	440a      	add	r2, r1
 8004314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6919      	ldr	r1, [r3, #16]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	781a      	ldrb	r2, [r3, #0]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	b298      	uxth	r0, r3
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	4603      	mov	r3, r0
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 fade 	bl	80048f4 <USB_WritePacket>
 8004338:	e0d2      	b.n	80044e0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	0151      	lsls	r1, r2, #5
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	440a      	add	r2, r1
 8004350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004354:	0cdb      	lsrs	r3, r3, #19
 8004356:	04db      	lsls	r3, r3, #19
 8004358:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	0151      	lsls	r1, r2, #5
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	440a      	add	r2, r1
 8004370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004374:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004378:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800437c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d126      	bne.n	80043d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439c:	69b9      	ldr	r1, [r7, #24]
 800439e:	0148      	lsls	r0, r1, #5
 80043a0:	69f9      	ldr	r1, [r7, #28]
 80043a2:	4401      	add	r1, r0
 80043a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043a8:	4313      	orrs	r3, r2
 80043aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	0151      	lsls	r1, r2, #5
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	440a      	add	r2, r1
 80043c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043ca:	6113      	str	r3, [r2, #16]
 80043cc:	e03a      	b.n	8004444 <USB_EPStartXfer+0x3e4>
 80043ce:	bf00      	nop
 80043d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	699a      	ldr	r2, [r3, #24]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	4413      	add	r3, r2
 80043de:	1e5a      	subs	r2, r3, #1
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	8afa      	ldrh	r2, [r7, #22]
 80043f0:	fb03 f202 	mul.w	r2, r3, r2
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	8afb      	ldrh	r3, [r7, #22]
 8004408:	04d9      	lsls	r1, r3, #19
 800440a:	4b38      	ldr	r3, [pc, #224]	; (80044ec <USB_EPStartXfer+0x48c>)
 800440c:	400b      	ands	r3, r1
 800440e:	69b9      	ldr	r1, [r7, #24]
 8004410:	0148      	lsls	r0, r1, #5
 8004412:	69f9      	ldr	r1, [r7, #28]
 8004414:	4401      	add	r1, r0
 8004416:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800441a:	4313      	orrs	r3, r2
 800441c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004434:	69b9      	ldr	r1, [r7, #24]
 8004436:	0148      	lsls	r0, r1, #5
 8004438:	69f9      	ldr	r1, [r7, #28]
 800443a:	4401      	add	r1, r0
 800443c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004440:	4313      	orrs	r3, r2
 8004442:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d10d      	bne.n	8004466 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d009      	beq.n	8004466 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	6919      	ldr	r1, [r3, #16]
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	4413      	add	r3, r2
 800445e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004462:	460a      	mov	r2, r1
 8004464:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	791b      	ldrb	r3, [r3, #4]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d128      	bne.n	80044c0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447a:	2b00      	cmp	r3, #0
 800447c:	d110      	bne.n	80044a0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	0151      	lsls	r1, r2, #5
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	440a      	add	r2, r1
 8004494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004498:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e00f      	b.n	80044c0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	0151      	lsls	r1, r2, #5
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	440a      	add	r2, r1
 80044b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	0151      	lsls	r1, r2, #5
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	440a      	add	r2, r1
 80044d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3720      	adds	r7, #32
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	1ff80000 	.word	0x1ff80000

080044f0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	4613      	mov	r3, r2
 80044fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	785b      	ldrb	r3, [r3, #1]
 800450c:	2b01      	cmp	r3, #1
 800450e:	f040 80ce 	bne.w	80046ae <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d132      	bne.n	8004580 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	0151      	lsls	r1, r2, #5
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	440a      	add	r2, r1
 8004530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004534:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004538:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800453c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	0151      	lsls	r1, r2, #5
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	440a      	add	r2, r1
 8004554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004558:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800455c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	0151      	lsls	r1, r2, #5
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	440a      	add	r2, r1
 8004574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004578:	0cdb      	lsrs	r3, r3, #19
 800457a:	04db      	lsls	r3, r3, #19
 800457c:	6113      	str	r3, [r2, #16]
 800457e:	e04e      	b.n	800461e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	4413      	add	r3, r2
 8004588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	0151      	lsls	r1, r2, #5
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	440a      	add	r2, r1
 8004596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800459a:	0cdb      	lsrs	r3, r3, #19
 800459c:	04db      	lsls	r3, r3, #19
 800459e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	0151      	lsls	r1, r2, #5
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	440a      	add	r2, r1
 80045b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045c2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	699a      	ldr	r2, [r3, #24]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d903      	bls.n	80045d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	0151      	lsls	r1, r2, #5
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	440a      	add	r2, r1
 80045ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800460e:	6939      	ldr	r1, [r7, #16]
 8004610:	0148      	lsls	r0, r1, #5
 8004612:	6979      	ldr	r1, [r7, #20]
 8004614:	4401      	add	r1, r0
 8004616:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800461a:	4313      	orrs	r3, r2
 800461c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d11e      	bne.n	8004662 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d009      	beq.n	8004640 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004638:	461a      	mov	r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	0151      	lsls	r1, r2, #5
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	440a      	add	r2, r1
 8004656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800465a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	e097      	b.n	8004792 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	0151      	lsls	r1, r2, #5
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	440a      	add	r2, r1
 8004678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800467c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004680:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 8083 	beq.w	8004792 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	f003 030f 	and.w	r3, r3, #15
 800469c:	2101      	movs	r1, #1
 800469e:	fa01 f303 	lsl.w	r3, r1, r3
 80046a2:	6979      	ldr	r1, [r7, #20]
 80046a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046a8:	4313      	orrs	r3, r2
 80046aa:	634b      	str	r3, [r1, #52]	; 0x34
 80046ac:	e071      	b.n	8004792 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	0151      	lsls	r1, r2, #5
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	440a      	add	r2, r1
 80046c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046c8:	0cdb      	lsrs	r3, r3, #19
 80046ca:	04db      	lsls	r3, r3, #19
 80046cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	0151      	lsls	r1, r2, #5
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	440a      	add	r2, r1
 80046e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	0151      	lsls	r1, r2, #5
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	440a      	add	r2, r1
 8004720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004724:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004728:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004740:	6939      	ldr	r1, [r7, #16]
 8004742:	0148      	lsls	r0, r1, #5
 8004744:	6979      	ldr	r1, [r7, #20]
 8004746:	4401      	add	r1, r0
 8004748:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800474c:	4313      	orrs	r3, r2
 800474e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004750:	79fb      	ldrb	r3, [r7, #7]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d10d      	bne.n	8004772 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d009      	beq.n	8004772 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	6919      	ldr	r1, [r3, #16]
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476e:	460a      	mov	r2, r1
 8004770:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	0151      	lsls	r1, r2, #5
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	440a      	add	r2, r1
 8004788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800478c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004790:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	371c      	adds	r7, #28
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	785b      	ldrb	r3, [r3, #1]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d14a      	bne.n	8004854 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047d6:	f040 8086 	bne.w	80048e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	7812      	ldrb	r2, [r2, #0]
 80047ee:	0151      	lsls	r1, r2, #5
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	440a      	add	r2, r1
 80047f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	7812      	ldrb	r2, [r2, #0]
 8004812:	0151      	lsls	r1, r2, #5
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	440a      	add	r2, r1
 8004818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800481c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004820:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3301      	adds	r3, #1
 8004826:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f242 7210 	movw	r2, #10000	; 0x2710
 800482e:	4293      	cmp	r3, r2
 8004830:	d902      	bls.n	8004838 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	75fb      	strb	r3, [r7, #23]
          break;
 8004836:	e056      	b.n	80048e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800484c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004850:	d0e7      	beq.n	8004822 <USB_EPStopXfer+0x82>
 8004852:	e048      	b.n	80048e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800486c:	d13b      	bne.n	80048e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	7812      	ldrb	r2, [r2, #0]
 8004882:	0151      	lsls	r1, r2, #5
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	440a      	add	r2, r1
 8004888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800488c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004890:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	7812      	ldrb	r2, [r2, #0]
 80048a6:	0151      	lsls	r1, r2, #5
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	440a      	add	r2, r1
 80048ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3301      	adds	r3, #1
 80048ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f242 7210 	movw	r2, #10000	; 0x2710
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d902      	bls.n	80048cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	75fb      	strb	r3, [r7, #23]
          break;
 80048ca:	e00c      	b.n	80048e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048e4:	d0e7      	beq.n	80048b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	371c      	adds	r7, #28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b089      	sub	sp, #36	; 0x24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	4611      	mov	r1, r2
 8004900:	461a      	mov	r2, r3
 8004902:	460b      	mov	r3, r1
 8004904:	71fb      	strb	r3, [r7, #7]
 8004906:	4613      	mov	r3, r2
 8004908:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004912:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004916:	2b00      	cmp	r3, #0
 8004918:	d123      	bne.n	8004962 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800491a:	88bb      	ldrh	r3, [r7, #4]
 800491c:	3303      	adds	r3, #3
 800491e:	089b      	lsrs	r3, r3, #2
 8004920:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004922:	2300      	movs	r3, #0
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	e018      	b.n	800495a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004928:	79fb      	ldrb	r3, [r7, #7]
 800492a:	031a      	lsls	r2, r3, #12
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	4413      	add	r3, r2
 8004930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004934:	461a      	mov	r2, r3
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	3301      	adds	r3, #1
 8004940:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	3301      	adds	r3, #1
 8004946:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	3301      	adds	r3, #1
 800494c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	3301      	adds	r3, #1
 8004952:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	3301      	adds	r3, #1
 8004958:	61bb      	str	r3, [r7, #24]
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	429a      	cmp	r2, r3
 8004960:	d3e2      	bcc.n	8004928 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3724      	adds	r7, #36	; 0x24
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004970:	b480      	push	{r7}
 8004972:	b08b      	sub	sp, #44	; 0x2c
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	089b      	lsrs	r3, r3, #2
 800498a:	b29b      	uxth	r3, r3
 800498c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800498e:	88fb      	ldrh	r3, [r7, #6]
 8004990:	f003 0303 	and.w	r3, r3, #3
 8004994:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004996:	2300      	movs	r3, #0
 8004998:	623b      	str	r3, [r7, #32]
 800499a:	e014      	b.n	80049c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	3301      	adds	r3, #1
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	3301      	adds	r3, #1
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	3301      	adds	r3, #1
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	3301      	adds	r3, #1
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	3301      	adds	r3, #1
 80049c4:	623b      	str	r3, [r7, #32]
 80049c6:	6a3a      	ldr	r2, [r7, #32]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d3e6      	bcc.n	800499c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80049ce:	8bfb      	ldrh	r3, [r7, #30]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01e      	beq.n	8004a12 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049de:	461a      	mov	r2, r3
 80049e0:	f107 0310 	add.w	r3, r7, #16
 80049e4:	6812      	ldr	r2, [r2, #0]
 80049e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	701a      	strb	r2, [r3, #0]
      i++;
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	3301      	adds	r3, #1
 80049fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	3301      	adds	r3, #1
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a06:	8bfb      	ldrh	r3, [r7, #30]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a0c:	8bfb      	ldrh	r3, [r7, #30]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1ea      	bne.n	80049e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	372c      	adds	r7, #44	; 0x2c
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	785b      	ldrb	r3, [r3, #1]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d12c      	bne.n	8004a96 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	db12      	blt.n	8004a74 <USB_EPSetStall+0x54>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00f      	beq.n	8004a74 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	0151      	lsls	r1, r2, #5
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	440a      	add	r2, r1
 8004a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a72:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	0151      	lsls	r1, r2, #5
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	440a      	add	r2, r1
 8004a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	e02b      	b.n	8004aee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	db12      	blt.n	8004ace <USB_EPSetStall+0xae>
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00f      	beq.n	8004ace <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	0151      	lsls	r1, r2, #5
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	440a      	add	r2, r1
 8004ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004acc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	0151      	lsls	r1, r2, #5
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	440a      	add	r2, r1
 8004ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004aec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	785b      	ldrb	r3, [r3, #1]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d128      	bne.n	8004b6a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	0151      	lsls	r1, r2, #5
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	440a      	add	r2, r1
 8004b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b36:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	791b      	ldrb	r3, [r3, #4]
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d003      	beq.n	8004b48 <USB_EPClearStall+0x4c>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	791b      	ldrb	r3, [r3, #4]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d138      	bne.n	8004bba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	0151      	lsls	r1, r2, #5
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	440a      	add	r2, r1
 8004b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	e027      	b.n	8004bba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	0151      	lsls	r1, r2, #5
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	440a      	add	r2, r1
 8004b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b88:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	791b      	ldrb	r3, [r3, #4]
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d003      	beq.n	8004b9a <USB_EPClearStall+0x9e>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	791b      	ldrb	r3, [r3, #4]
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d10f      	bne.n	8004bba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	0151      	lsls	r1, r2, #5
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	440a      	add	r2, r1
 8004bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004be6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004bea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004bfc:	68f9      	ldr	r1, [r7, #12]
 8004bfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c02:	4313      	orrs	r3, r2
 8004c04:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c2e:	f023 0303 	bic.w	r3, r3, #3
 8004c32:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c42:	f023 0302 	bic.w	r3, r3, #2
 8004c46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b085      	sub	sp, #20
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c70:	f023 0303 	bic.w	r3, r3, #3
 8004c74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c84:	f043 0302 	orr.w	r3, r3, #2
 8004c88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4013      	ands	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b085      	sub	sp, #20
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	0c1b      	lsrs	r3, r3, #16
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b085      	sub	sp, #20
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	4013      	ands	r3, r2
 8004d14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	b29b      	uxth	r3, r3
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b085      	sub	sp, #20
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	4013      	ands	r3, r2
 8004d52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d54:	68bb      	ldr	r3, [r7, #8]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b087      	sub	sp, #28
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d84:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d86:	78fb      	ldrb	r3, [r7, #3]
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d92:	01db      	lsls	r3, r3, #7
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4013      	ands	r3, r2
 8004dae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004db0:	68bb      	ldr	r3, [r7, #8]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	371c      	adds	r7, #28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f003 0301 	and.w	r3, r3, #1
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b085      	sub	sp, #20
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004df8:	f023 0307 	bic.w	r3, r3, #7
 8004dfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	333c      	adds	r3, #60	; 0x3c
 8004e36:	3304      	adds	r3, #4
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4a26      	ldr	r2, [pc, #152]	; (8004ed8 <USB_EP0_OutStart+0xb8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d90a      	bls.n	8004e5a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e54:	d101      	bne.n	8004e5a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	e037      	b.n	8004eca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e60:	461a      	mov	r2, r3
 8004e62:	2300      	movs	r3, #0
 8004e64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e88:	f043 0318 	orr.w	r3, r3, #24
 8004e8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004ea0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004ea2:	7afb      	ldrb	r3, [r7, #11]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d10f      	bne.n	8004ec8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eae:	461a      	mov	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ec2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004ec6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	4f54300a 	.word	0x4f54300a

08004edc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	3301      	adds	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4a13      	ldr	r2, [pc, #76]	; (8004f40 <USB_CoreReset+0x64>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e01b      	b.n	8004f32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	daf2      	bge.n	8004ee8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f043 0201 	orr.w	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3301      	adds	r3, #1
 8004f16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4a09      	ldr	r2, [pc, #36]	; (8004f40 <USB_CoreReset+0x64>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d901      	bls.n	8004f24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e006      	b.n	8004f32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d0f0      	beq.n	8004f12 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	00030d40 	.word	0x00030d40

08004f44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f50:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f54:	f002 fc28 	bl	80077a8 <USBD_static_malloc>
 8004f58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d109      	bne.n	8004f74 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	32b0      	adds	r2, #176	; 0xb0
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004f70:	2302      	movs	r3, #2
 8004f72:	e0d4      	b.n	800511e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004f74:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004f78:	2100      	movs	r1, #0
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f002 fc7c 	bl	8007878 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	32b0      	adds	r2, #176	; 0xb0
 8004f8a:	68f9      	ldr	r1, [r7, #12]
 8004f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	32b0      	adds	r2, #176	; 0xb0
 8004f9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	7c1b      	ldrb	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d138      	bne.n	800501e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004fac:	4b5e      	ldr	r3, [pc, #376]	; (8005128 <USBD_CDC_Init+0x1e4>)
 8004fae:	7819      	ldrb	r1, [r3, #0]
 8004fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f002 fad3 	bl	8007562 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004fbc:	4b5a      	ldr	r3, [pc, #360]	; (8005128 <USBD_CDC_Init+0x1e4>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	f003 020f 	and.w	r2, r3, #15
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	3324      	adds	r3, #36	; 0x24
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004fd6:	4b55      	ldr	r3, [pc, #340]	; (800512c <USBD_CDC_Init+0x1e8>)
 8004fd8:	7819      	ldrb	r1, [r3, #0]
 8004fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fde:	2202      	movs	r2, #2
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f002 fabe 	bl	8007562 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004fe6:	4b51      	ldr	r3, [pc, #324]	; (800512c <USBD_CDC_Init+0x1e8>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	f003 020f 	and.w	r2, r3, #15
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004ffe:	2201      	movs	r2, #1
 8005000:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005002:	4b4b      	ldr	r3, [pc, #300]	; (8005130 <USBD_CDC_Init+0x1ec>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	f003 020f 	and.w	r2, r3, #15
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	3326      	adds	r3, #38	; 0x26
 8005018:	2210      	movs	r2, #16
 800501a:	801a      	strh	r2, [r3, #0]
 800501c:	e035      	b.n	800508a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800501e:	4b42      	ldr	r3, [pc, #264]	; (8005128 <USBD_CDC_Init+0x1e4>)
 8005020:	7819      	ldrb	r1, [r3, #0]
 8005022:	2340      	movs	r3, #64	; 0x40
 8005024:	2202      	movs	r2, #2
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f002 fa9b 	bl	8007562 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800502c:	4b3e      	ldr	r3, [pc, #248]	; (8005128 <USBD_CDC_Init+0x1e4>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	f003 020f 	and.w	r2, r3, #15
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	3324      	adds	r3, #36	; 0x24
 8005042:	2201      	movs	r2, #1
 8005044:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005046:	4b39      	ldr	r3, [pc, #228]	; (800512c <USBD_CDC_Init+0x1e8>)
 8005048:	7819      	ldrb	r1, [r3, #0]
 800504a:	2340      	movs	r3, #64	; 0x40
 800504c:	2202      	movs	r2, #2
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f002 fa87 	bl	8007562 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005054:	4b35      	ldr	r3, [pc, #212]	; (800512c <USBD_CDC_Init+0x1e8>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	f003 020f 	and.w	r2, r3, #15
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	440b      	add	r3, r1
 8005068:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800506c:	2201      	movs	r2, #1
 800506e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005070:	4b2f      	ldr	r3, [pc, #188]	; (8005130 <USBD_CDC_Init+0x1ec>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	f003 020f 	and.w	r2, r3, #15
 8005078:	6879      	ldr	r1, [r7, #4]
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	440b      	add	r3, r1
 8005084:	3326      	adds	r3, #38	; 0x26
 8005086:	2210      	movs	r2, #16
 8005088:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800508a:	4b29      	ldr	r3, [pc, #164]	; (8005130 <USBD_CDC_Init+0x1ec>)
 800508c:	7819      	ldrb	r1, [r3, #0]
 800508e:	2308      	movs	r3, #8
 8005090:	2203      	movs	r2, #3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f002 fa65 	bl	8007562 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005098:	4b25      	ldr	r3, [pc, #148]	; (8005130 <USBD_CDC_Init+0x1ec>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	f003 020f 	and.w	r2, r3, #15
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	3324      	adds	r3, #36	; 0x24
 80050ae:	2201      	movs	r2, #1
 80050b0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	33b0      	adds	r3, #176	; 0xb0
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80050e8:	2302      	movs	r3, #2
 80050ea:	e018      	b.n	800511e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	7c1b      	ldrb	r3, [r3, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10a      	bne.n	800510a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050f4:	4b0d      	ldr	r3, [pc, #52]	; (800512c <USBD_CDC_Init+0x1e8>)
 80050f6:	7819      	ldrb	r1, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f002 fb1c 	bl	8007740 <USBD_LL_PrepareReceive>
 8005108:	e008      	b.n	800511c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800510a:	4b08      	ldr	r3, [pc, #32]	; (800512c <USBD_CDC_Init+0x1e8>)
 800510c:	7819      	ldrb	r1, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005114:	2340      	movs	r3, #64	; 0x40
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f002 fb12 	bl	8007740 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20000093 	.word	0x20000093
 800512c:	20000094 	.word	0x20000094
 8005130:	20000095 	.word	0x20000095

08005134 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005140:	4b3a      	ldr	r3, [pc, #232]	; (800522c <USBD_CDC_DeInit+0xf8>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f002 fa31 	bl	80075ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800514c:	4b37      	ldr	r3, [pc, #220]	; (800522c <USBD_CDC_DeInit+0xf8>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	f003 020f 	and.w	r2, r3, #15
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	3324      	adds	r3, #36	; 0x24
 8005162:	2200      	movs	r2, #0
 8005164:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005166:	4b32      	ldr	r3, [pc, #200]	; (8005230 <USBD_CDC_DeInit+0xfc>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	4619      	mov	r1, r3
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f002 fa1e 	bl	80075ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005172:	4b2f      	ldr	r3, [pc, #188]	; (8005230 <USBD_CDC_DeInit+0xfc>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	f003 020f 	and.w	r2, r3, #15
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	440b      	add	r3, r1
 8005186:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800518a:	2200      	movs	r2, #0
 800518c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800518e:	4b29      	ldr	r3, [pc, #164]	; (8005234 <USBD_CDC_DeInit+0x100>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	4619      	mov	r1, r3
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f002 fa0a 	bl	80075ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800519a:	4b26      	ldr	r3, [pc, #152]	; (8005234 <USBD_CDC_DeInit+0x100>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	f003 020f 	and.w	r2, r3, #15
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	3324      	adds	r3, #36	; 0x24
 80051b0:	2200      	movs	r2, #0
 80051b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80051b4:	4b1f      	ldr	r3, [pc, #124]	; (8005234 <USBD_CDC_DeInit+0x100>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	f003 020f 	and.w	r2, r3, #15
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	3326      	adds	r3, #38	; 0x26
 80051ca:	2200      	movs	r2, #0
 80051cc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	32b0      	adds	r2, #176	; 0xb0
 80051d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01f      	beq.n	8005220 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	33b0      	adds	r3, #176	; 0xb0
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	32b0      	adds	r2, #176	; 0xb0
 80051fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005202:	4618      	mov	r0, r3
 8005204:	f002 fade 	bl	80077c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	32b0      	adds	r2, #176	; 0xb0
 8005212:	2100      	movs	r1, #0
 8005214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20000093 	.word	0x20000093
 8005230:	20000094 	.word	0x20000094
 8005234:	20000095 	.word	0x20000095

08005238 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	32b0      	adds	r2, #176	; 0xb0
 800524c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005250:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005264:	2303      	movs	r3, #3
 8005266:	e0bf      	b.n	80053e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005270:	2b00      	cmp	r3, #0
 8005272:	d050      	beq.n	8005316 <USBD_CDC_Setup+0xde>
 8005274:	2b20      	cmp	r3, #32
 8005276:	f040 80af 	bne.w	80053d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	88db      	ldrh	r3, [r3, #6]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d03a      	beq.n	80052f8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	b25b      	sxtb	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	da1b      	bge.n	80052c4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	33b0      	adds	r3, #176	; 0xb0
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80052a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	88d2      	ldrh	r2, [r2, #6]
 80052a8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	88db      	ldrh	r3, [r3, #6]
 80052ae:	2b07      	cmp	r3, #7
 80052b0:	bf28      	it	cs
 80052b2:	2307      	movcs	r3, #7
 80052b4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	89fa      	ldrh	r2, [r7, #14]
 80052ba:	4619      	mov	r1, r3
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f001 fd43 	bl	8006d48 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80052c2:	e090      	b.n	80053e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	785a      	ldrb	r2, [r3, #1]
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	88db      	ldrh	r3, [r3, #6]
 80052d2:	2b3f      	cmp	r3, #63	; 0x3f
 80052d4:	d803      	bhi.n	80052de <USBD_CDC_Setup+0xa6>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	88db      	ldrh	r3, [r3, #6]
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	e000      	b.n	80052e0 <USBD_CDC_Setup+0xa8>
 80052de:	2240      	movs	r2, #64	; 0x40
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80052e6:	6939      	ldr	r1, [r7, #16]
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80052ee:	461a      	mov	r2, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f001 fd55 	bl	8006da0 <USBD_CtlPrepareRx>
      break;
 80052f6:	e076      	b.n	80053e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	33b0      	adds	r3, #176	; 0xb0
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	7850      	ldrb	r0, [r2, #1]
 800530e:	2200      	movs	r2, #0
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	4798      	blx	r3
      break;
 8005314:	e067      	b.n	80053e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	785b      	ldrb	r3, [r3, #1]
 800531a:	2b0b      	cmp	r3, #11
 800531c:	d851      	bhi.n	80053c2 <USBD_CDC_Setup+0x18a>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <USBD_CDC_Setup+0xec>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	08005355 	.word	0x08005355
 8005328:	080053d1 	.word	0x080053d1
 800532c:	080053c3 	.word	0x080053c3
 8005330:	080053c3 	.word	0x080053c3
 8005334:	080053c3 	.word	0x080053c3
 8005338:	080053c3 	.word	0x080053c3
 800533c:	080053c3 	.word	0x080053c3
 8005340:	080053c3 	.word	0x080053c3
 8005344:	080053c3 	.word	0x080053c3
 8005348:	080053c3 	.word	0x080053c3
 800534c:	0800537f 	.word	0x0800537f
 8005350:	080053a9 	.word	0x080053a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b03      	cmp	r3, #3
 800535e:	d107      	bne.n	8005370 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005360:	f107 030a 	add.w	r3, r7, #10
 8005364:	2202      	movs	r2, #2
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f001 fced 	bl	8006d48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800536e:	e032      	b.n	80053d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005370:	6839      	ldr	r1, [r7, #0]
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f001 fc77 	bl	8006c66 <USBD_CtlError>
            ret = USBD_FAIL;
 8005378:	2303      	movs	r3, #3
 800537a:	75fb      	strb	r3, [r7, #23]
          break;
 800537c:	e02b      	b.n	80053d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b03      	cmp	r3, #3
 8005388:	d107      	bne.n	800539a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800538a:	f107 030d 	add.w	r3, r7, #13
 800538e:	2201      	movs	r2, #1
 8005390:	4619      	mov	r1, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f001 fcd8 	bl	8006d48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005398:	e01d      	b.n	80053d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800539a:	6839      	ldr	r1, [r7, #0]
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f001 fc62 	bl	8006c66 <USBD_CtlError>
            ret = USBD_FAIL;
 80053a2:	2303      	movs	r3, #3
 80053a4:	75fb      	strb	r3, [r7, #23]
          break;
 80053a6:	e016      	b.n	80053d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d00f      	beq.n	80053d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80053b4:	6839      	ldr	r1, [r7, #0]
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f001 fc55 	bl	8006c66 <USBD_CtlError>
            ret = USBD_FAIL;
 80053bc:	2303      	movs	r3, #3
 80053be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80053c0:	e008      	b.n	80053d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80053c2:	6839      	ldr	r1, [r7, #0]
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f001 fc4e 	bl	8006c66 <USBD_CtlError>
          ret = USBD_FAIL;
 80053ca:	2303      	movs	r3, #3
 80053cc:	75fb      	strb	r3, [r7, #23]
          break;
 80053ce:	e002      	b.n	80053d6 <USBD_CDC_Setup+0x19e>
          break;
 80053d0:	bf00      	nop
 80053d2:	e008      	b.n	80053e6 <USBD_CDC_Setup+0x1ae>
          break;
 80053d4:	bf00      	nop
      }
      break;
 80053d6:	e006      	b.n	80053e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80053d8:	6839      	ldr	r1, [r7, #0]
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f001 fc43 	bl	8006c66 <USBD_CtlError>
      ret = USBD_FAIL;
 80053e0:	2303      	movs	r3, #3
 80053e2:	75fb      	strb	r3, [r7, #23]
      break;
 80053e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80053e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005402:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	32b0      	adds	r2, #176	; 0xb0
 800540e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005416:	2303      	movs	r3, #3
 8005418:	e065      	b.n	80054e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	32b0      	adds	r2, #176	; 0xb0
 8005424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005428:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800542a:	78fb      	ldrb	r3, [r7, #3]
 800542c:	f003 020f 	and.w	r2, r3, #15
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	4613      	mov	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	3318      	adds	r3, #24
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d02f      	beq.n	80054a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005444:	78fb      	ldrb	r3, [r7, #3]
 8005446:	f003 020f 	and.w	r2, r3, #15
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	3318      	adds	r3, #24
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	78fb      	ldrb	r3, [r7, #3]
 800545c:	f003 010f 	and.w	r1, r3, #15
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	460b      	mov	r3, r1
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	440b      	add	r3, r1
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4403      	add	r3, r0
 800546c:	3348      	adds	r3, #72	; 0x48
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	fbb2 f1f3 	udiv	r1, r2, r3
 8005474:	fb01 f303 	mul.w	r3, r1, r3
 8005478:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800547a:	2b00      	cmp	r3, #0
 800547c:	d112      	bne.n	80054a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800547e:	78fb      	ldrb	r3, [r7, #3]
 8005480:	f003 020f 	and.w	r2, r3, #15
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	4613      	mov	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	440b      	add	r3, r1
 8005490:	3318      	adds	r3, #24
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005496:	78f9      	ldrb	r1, [r7, #3]
 8005498:	2300      	movs	r3, #0
 800549a:	2200      	movs	r2, #0
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f002 f92e 	bl	80076fe <USBD_LL_Transmit>
 80054a2:	e01f      	b.n	80054e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	33b0      	adds	r3, #176	; 0xb0
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d010      	beq.n	80054e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	33b0      	adds	r3, #176	; 0xb0
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80054e0:	78fa      	ldrb	r2, [r7, #3]
 80054e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	460b      	mov	r3, r1
 80054f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	32b0      	adds	r2, #176	; 0xb0
 8005504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005508:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	32b0      	adds	r2, #176	; 0xb0
 8005514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800551c:	2303      	movs	r3, #3
 800551e:	e01a      	b.n	8005556 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f002 f92c 	bl	8007782 <USBD_LL_GetRxDataSize>
 800552a:	4602      	mov	r2, r0
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	33b0      	adds	r3, #176	; 0xb0
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005550:	4611      	mov	r1, r2
 8005552:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b084      	sub	sp, #16
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	32b0      	adds	r2, #176	; 0xb0
 8005570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005574:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800557c:	2303      	movs	r3, #3
 800557e:	e025      	b.n	80055cc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	33b0      	adds	r3, #176	; 0xb0
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01a      	beq.n	80055ca <USBD_CDC_EP0_RxReady+0x6c>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800559a:	2bff      	cmp	r3, #255	; 0xff
 800559c:	d015      	beq.n	80055ca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	33b0      	adds	r3, #176	; 0xb0
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80055b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80055be:	b292      	uxth	r2, r2
 80055c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	22ff      	movs	r2, #255	; 0xff
 80055c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055dc:	2182      	movs	r1, #130	; 0x82
 80055de:	4818      	ldr	r0, [pc, #96]	; (8005640 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055e0:	f000 fd09 	bl	8005ff6 <USBD_GetEpDesc>
 80055e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80055e6:	2101      	movs	r1, #1
 80055e8:	4815      	ldr	r0, [pc, #84]	; (8005640 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055ea:	f000 fd04 	bl	8005ff6 <USBD_GetEpDesc>
 80055ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80055f0:	2181      	movs	r1, #129	; 0x81
 80055f2:	4813      	ldr	r0, [pc, #76]	; (8005640 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055f4:	f000 fcff 	bl	8005ff6 <USBD_GetEpDesc>
 80055f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2210      	movs	r2, #16
 8005604:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d006      	beq.n	800561a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	2200      	movs	r2, #0
 8005610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005614:	711a      	strb	r2, [r3, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d006      	beq.n	800562e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005628:	711a      	strb	r2, [r3, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2243      	movs	r2, #67	; 0x43
 8005632:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005634:	4b02      	ldr	r3, [pc, #8]	; (8005640 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	20000050 	.word	0x20000050

08005644 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800564c:	2182      	movs	r1, #130	; 0x82
 800564e:	4818      	ldr	r0, [pc, #96]	; (80056b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005650:	f000 fcd1 	bl	8005ff6 <USBD_GetEpDesc>
 8005654:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005656:	2101      	movs	r1, #1
 8005658:	4815      	ldr	r0, [pc, #84]	; (80056b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800565a:	f000 fccc 	bl	8005ff6 <USBD_GetEpDesc>
 800565e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005660:	2181      	movs	r1, #129	; 0x81
 8005662:	4813      	ldr	r0, [pc, #76]	; (80056b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005664:	f000 fcc7 	bl	8005ff6 <USBD_GetEpDesc>
 8005668:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2210      	movs	r2, #16
 8005674:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d006      	beq.n	800568a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2200      	movs	r2, #0
 8005680:	711a      	strb	r2, [r3, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f042 0202 	orr.w	r2, r2, #2
 8005688:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d006      	beq.n	800569e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	711a      	strb	r2, [r3, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f042 0202 	orr.w	r2, r2, #2
 800569c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2243      	movs	r2, #67	; 0x43
 80056a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80056a4:	4b02      	ldr	r3, [pc, #8]	; (80056b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20000050 	.word	0x20000050

080056b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80056bc:	2182      	movs	r1, #130	; 0x82
 80056be:	4818      	ldr	r0, [pc, #96]	; (8005720 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056c0:	f000 fc99 	bl	8005ff6 <USBD_GetEpDesc>
 80056c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80056c6:	2101      	movs	r1, #1
 80056c8:	4815      	ldr	r0, [pc, #84]	; (8005720 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056ca:	f000 fc94 	bl	8005ff6 <USBD_GetEpDesc>
 80056ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80056d0:	2181      	movs	r1, #129	; 0x81
 80056d2:	4813      	ldr	r0, [pc, #76]	; (8005720 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056d4:	f000 fc8f 	bl	8005ff6 <USBD_GetEpDesc>
 80056d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2210      	movs	r2, #16
 80056e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d006      	beq.n	80056fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056f4:	711a      	strb	r2, [r3, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d006      	beq.n	800570e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005708:	711a      	strb	r2, [r3, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2243      	movs	r2, #67	; 0x43
 8005712:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005714:	4b02      	ldr	r3, [pc, #8]	; (8005720 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000050 	.word	0x20000050

08005724 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	220a      	movs	r2, #10
 8005730:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005732:	4b03      	ldr	r3, [pc, #12]	; (8005740 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	2000000c 	.word	0x2000000c

08005744 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005754:	2303      	movs	r3, #3
 8005756:	e009      	b.n	800576c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	33b0      	adds	r3, #176	; 0xb0
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	32b0      	adds	r2, #176	; 0xb0
 800578e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005792:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800579a:	2303      	movs	r3, #3
 800579c:	e008      	b.n	80057b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	32b0      	adds	r2, #176	; 0xb0
 80057d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80057dc:	2303      	movs	r3, #3
 80057de:	e004      	b.n	80057ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
	...

080057f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	32b0      	adds	r2, #176	; 0xb0
 800580a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	32b0      	adds	r2, #176	; 0xb0
 800581a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005822:	2303      	movs	r3, #3
 8005824:	e018      	b.n	8005858 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	7c1b      	ldrb	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10a      	bne.n	8005844 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800582e:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <USBD_CDC_ReceivePacket+0x68>)
 8005830:	7819      	ldrb	r1, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f001 ff7f 	bl	8007740 <USBD_LL_PrepareReceive>
 8005842:	e008      	b.n	8005856 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005844:	4b06      	ldr	r3, [pc, #24]	; (8005860 <USBD_CDC_ReceivePacket+0x68>)
 8005846:	7819      	ldrb	r1, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800584e:	2340      	movs	r3, #64	; 0x40
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f001 ff75 	bl	8007740 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	20000094 	.word	0x20000094

08005864 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	4613      	mov	r3, r2
 8005870:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005878:	2303      	movs	r3, #3
 800587a:	e01f      	b.n	80058bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	79fa      	ldrb	r2, [r7, #7]
 80058ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f001 fdef 	bl	8007494 <USBD_LL_Init>
 80058b6:	4603      	mov	r3, r0
 80058b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80058ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80058d8:	2303      	movs	r3, #3
 80058da:	e025      	b.n	8005928 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	32ae      	adds	r2, #174	; 0xae
 80058ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00f      	beq.n	8005918 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	32ae      	adds	r2, #174	; 0xae
 8005902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	f107 020e 	add.w	r2, r7, #14
 800590c:	4610      	mov	r0, r2
 800590e:	4798      	blx	r3
 8005910:	4602      	mov	r2, r0
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f001 fdf7 	bl	800752c <USBD_LL_Start>
 800593e:	4603      	mov	r3, r0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005950:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005952:	4618      	mov	r0, r3
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	460b      	mov	r3, r1
 8005968:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005974:	2b00      	cmp	r3, #0
 8005976:	d009      	beq.n	800598c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	78fa      	ldrb	r2, [r7, #3]
 8005982:	4611      	mov	r1, r2
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	4798      	blx	r3
 8005988:	4603      	mov	r3, r0
 800598a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800598c:	7bfb      	ldrb	r3, [r7, #15]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	78fa      	ldrb	r2, [r7, #3]
 80059b0:	4611      	mov	r1, r2
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	4798      	blx	r3
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80059bc:	2303      	movs	r3, #3
 80059be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b084      	sub	sp, #16
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059da:	6839      	ldr	r1, [r7, #0]
 80059dc:	4618      	mov	r0, r3
 80059de:	f001 f908 	bl	8006bf2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80059f0:	461a      	mov	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059fe:	f003 031f 	and.w	r3, r3, #31
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d01a      	beq.n	8005a3c <USBD_LL_SetupStage+0x72>
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d822      	bhi.n	8005a50 <USBD_LL_SetupStage+0x86>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <USBD_LL_SetupStage+0x4a>
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d00a      	beq.n	8005a28 <USBD_LL_SetupStage+0x5e>
 8005a12:	e01d      	b.n	8005a50 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fb5f 	bl	80060e0 <USBD_StdDevReq>
 8005a22:	4603      	mov	r3, r0
 8005a24:	73fb      	strb	r3, [r7, #15]
      break;
 8005a26:	e020      	b.n	8005a6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fbc7 	bl	80061c4 <USBD_StdItfReq>
 8005a36:	4603      	mov	r3, r0
 8005a38:	73fb      	strb	r3, [r7, #15]
      break;
 8005a3a:	e016      	b.n	8005a6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 fc29 	bl	800629c <USBD_StdEPReq>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	73fb      	strb	r3, [r7, #15]
      break;
 8005a4e:	e00c      	b.n	8005a6a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f001 fdc4 	bl	80075ec <USBD_LL_StallEP>
 8005a64:	4603      	mov	r3, r0
 8005a66:	73fb      	strb	r3, [r7, #15]
      break;
 8005a68:	bf00      	nop
  }

  return ret;
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	607a      	str	r2, [r7, #4]
 8005a80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005a86:	7afb      	ldrb	r3, [r7, #11]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d16e      	bne.n	8005b6a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	f040 8098 	bne.w	8005bd0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d913      	bls.n	8005ad4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	1ad2      	subs	r2, r2, r3
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	bf28      	it	cs
 8005ac6:	4613      	movcs	r3, r2
 8005ac8:	461a      	mov	r2, r3
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f001 f984 	bl	8006dda <USBD_CtlContinueRx>
 8005ad2:	e07d      	b.n	8005bd0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ada:	f003 031f 	and.w	r3, r3, #31
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d014      	beq.n	8005b0c <USBD_LL_DataOutStage+0x98>
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d81d      	bhi.n	8005b22 <USBD_LL_DataOutStage+0xae>
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <USBD_LL_DataOutStage+0x7c>
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d003      	beq.n	8005af6 <USBD_LL_DataOutStage+0x82>
 8005aee:	e018      	b.n	8005b22 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	75bb      	strb	r3, [r7, #22]
            break;
 8005af4:	e018      	b.n	8005b28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	4619      	mov	r1, r3
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 fa5e 	bl	8005fc2 <USBD_CoreFindIF>
 8005b06:	4603      	mov	r3, r0
 8005b08:	75bb      	strb	r3, [r7, #22]
            break;
 8005b0a:	e00d      	b.n	8005b28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	4619      	mov	r1, r3
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 fa60 	bl	8005fdc <USBD_CoreFindEP>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	75bb      	strb	r3, [r7, #22]
            break;
 8005b20:	e002      	b.n	8005b28 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	75bb      	strb	r3, [r7, #22]
            break;
 8005b26:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005b28:	7dbb      	ldrb	r3, [r7, #22]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d119      	bne.n	8005b62 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d113      	bne.n	8005b62 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005b3a:	7dba      	ldrb	r2, [r7, #22]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	32ae      	adds	r2, #174	; 0xae
 8005b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00b      	beq.n	8005b62 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005b4a:	7dba      	ldrb	r2, [r7, #22]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005b52:	7dba      	ldrb	r2, [r7, #22]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	32ae      	adds	r2, #174	; 0xae
 8005b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f001 f94a 	bl	8006dfc <USBD_CtlSendStatus>
 8005b68:	e032      	b.n	8005bd0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005b6a:	7afb      	ldrb	r3, [r7, #11]
 8005b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	4619      	mov	r1, r3
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 fa31 	bl	8005fdc <USBD_CoreFindEP>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b7e:	7dbb      	ldrb	r3, [r7, #22]
 8005b80:	2bff      	cmp	r3, #255	; 0xff
 8005b82:	d025      	beq.n	8005bd0 <USBD_LL_DataOutStage+0x15c>
 8005b84:	7dbb      	ldrb	r3, [r7, #22]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d122      	bne.n	8005bd0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d117      	bne.n	8005bc6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005b96:	7dba      	ldrb	r2, [r7, #22]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	32ae      	adds	r2, #174	; 0xae
 8005b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00f      	beq.n	8005bc6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005ba6:	7dba      	ldrb	r2, [r7, #22]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005bae:	7dba      	ldrb	r2, [r7, #22]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	32ae      	adds	r2, #174	; 0xae
 8005bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	7afa      	ldrb	r2, [r7, #11]
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	4798      	blx	r3
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
 8005bce:	e000      	b.n	8005bd2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b086      	sub	sp, #24
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	460b      	mov	r3, r1
 8005be4:	607a      	str	r2, [r7, #4]
 8005be6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005be8:	7afb      	ldrb	r3, [r7, #11]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d16f      	bne.n	8005cce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3314      	adds	r3, #20
 8005bf2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d15a      	bne.n	8005cb4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	689a      	ldr	r2, [r3, #8]
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d914      	bls.n	8005c34 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	689a      	ldr	r2, [r3, #8]
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	1ad2      	subs	r2, r2, r3
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	6879      	ldr	r1, [r7, #4]
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f001 f8ac 	bl	8006d7e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c26:	2300      	movs	r3, #0
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f001 fd87 	bl	8007740 <USBD_LL_PrepareReceive>
 8005c32:	e03f      	b.n	8005cb4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d11c      	bne.n	8005c7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d316      	bcc.n	8005c7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d20f      	bcs.n	8005c7a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f001 f88d 	bl	8006d7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2100      	movs	r1, #0
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f001 fd64 	bl	8007740 <USBD_LL_PrepareReceive>
 8005c78:	e01c      	b.n	8005cb4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d10f      	bne.n	8005ca6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d009      	beq.n	8005ca6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ca6:	2180      	movs	r1, #128	; 0x80
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f001 fc9f 	bl	80075ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f001 f8b7 	bl	8006e22 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d03a      	beq.n	8005d34 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7ff fe42 	bl	8005948 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005ccc:	e032      	b.n	8005d34 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005cce:	7afb      	ldrb	r3, [r7, #11]
 8005cd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 f97f 	bl	8005fdc <USBD_CoreFindEP>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
 8005ce4:	2bff      	cmp	r3, #255	; 0xff
 8005ce6:	d025      	beq.n	8005d34 <USBD_LL_DataInStage+0x15a>
 8005ce8:	7dfb      	ldrb	r3, [r7, #23]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d122      	bne.n	8005d34 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d11c      	bne.n	8005d34 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005cfa:	7dfa      	ldrb	r2, [r7, #23]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	32ae      	adds	r2, #174	; 0xae
 8005d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d014      	beq.n	8005d34 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005d0a:	7dfa      	ldrb	r2, [r7, #23]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005d12:	7dfa      	ldrb	r2, [r7, #23]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	32ae      	adds	r2, #174	; 0xae
 8005d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	7afa      	ldrb	r2, [r7, #11]
 8005d20:	4611      	mov	r1, r2
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	4798      	blx	r3
 8005d26:	4603      	mov	r3, r0
 8005d28:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005d2a:	7dbb      	ldrb	r3, [r7, #22]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005d30:	7dbb      	ldrb	r3, [r7, #22]
 8005d32:	e000      	b.n	8005d36 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b084      	sub	sp, #16
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d014      	beq.n	8005da4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00e      	beq.n	8005da4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6852      	ldr	r2, [r2, #4]
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	4611      	mov	r1, r2
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	4798      	blx	r3
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005da0:	2303      	movs	r3, #3
 8005da2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005da4:	2340      	movs	r3, #64	; 0x40
 8005da6:	2200      	movs	r2, #0
 8005da8:	2100      	movs	r1, #0
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f001 fbd9 	bl	8007562 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2240      	movs	r2, #64	; 0x40
 8005dbc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005dc0:	2340      	movs	r3, #64	; 0x40
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	2180      	movs	r1, #128	; 0x80
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f001 fbcb 	bl	8007562 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2240      	movs	r2, #64	; 0x40
 8005dd6:	621a      	str	r2, [r3, #32]

  return ret;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	460b      	mov	r3, r1
 8005dec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	78fa      	ldrb	r2, [r7, #3]
 8005df2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2204      	movs	r2, #4
 8005e1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b083      	sub	sp, #12
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d106      	bne.n	8005e50 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b082      	sub	sp, #8
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d110      	bne.n	8005e94 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00b      	beq.n	8005e94 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d005      	beq.n	8005e94 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b082      	sub	sp, #8
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	32ae      	adds	r2, #174	; 0xae
 8005eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e01c      	b.n	8005efa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d115      	bne.n	8005ef8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	32ae      	adds	r2, #174	; 0xae
 8005ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00b      	beq.n	8005ef8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	32ae      	adds	r2, #174	; 0xae
 8005eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	78fa      	ldrb	r2, [r7, #3]
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	32ae      	adds	r2, #174	; 0xae
 8005f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e01c      	b.n	8005f5e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d115      	bne.n	8005f5c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	32ae      	adds	r2, #174	; 0xae
 8005f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00b      	beq.n	8005f5c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	32ae      	adds	r2, #174	; 0xae
 8005f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	78fa      	ldrb	r2, [r7, #3]
 8005f56:	4611      	mov	r1, r2
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00e      	beq.n	8005fb8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6852      	ldr	r2, [r2, #4]
 8005fa6:	b2d2      	uxtb	r2, r2
 8005fa8:	4611      	mov	r1, r2
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	4798      	blx	r3
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005fce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005fe8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b086      	sub	sp, #24
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	460b      	mov	r3, r1
 8006000:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800600a:	2300      	movs	r3, #0
 800600c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	885b      	ldrh	r3, [r3, #2]
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	b29b      	uxth	r3, r3
 800601a:	429a      	cmp	r2, r3
 800601c:	d920      	bls.n	8006060 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	b29b      	uxth	r3, r3
 8006024:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006026:	e013      	b.n	8006050 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006028:	f107 030a 	add.w	r3, r7, #10
 800602c:	4619      	mov	r1, r3
 800602e:	6978      	ldr	r0, [r7, #20]
 8006030:	f000 f81b 	bl	800606a <USBD_GetNextDesc>
 8006034:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	2b05      	cmp	r3, #5
 800603c:	d108      	bne.n	8006050 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	789b      	ldrb	r3, [r3, #2]
 8006046:	78fa      	ldrb	r2, [r7, #3]
 8006048:	429a      	cmp	r2, r3
 800604a:	d008      	beq.n	800605e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800604c:	2300      	movs	r3, #0
 800604e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	885b      	ldrh	r3, [r3, #2]
 8006054:	b29a      	uxth	r2, r3
 8006056:	897b      	ldrh	r3, [r7, #10]
 8006058:	429a      	cmp	r2, r3
 800605a:	d8e5      	bhi.n	8006028 <USBD_GetEpDesc+0x32>
 800605c:	e000      	b.n	8006060 <USBD_GetEpDesc+0x6a>
          break;
 800605e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006060:	693b      	ldr	r3, [r7, #16]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800606a:	b480      	push	{r7}
 800606c:	b085      	sub	sp, #20
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	881a      	ldrh	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	b29b      	uxth	r3, r3
 8006082:	4413      	add	r3, r2
 8006084:	b29a      	uxth	r2, r3
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4413      	add	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006096:	68fb      	ldr	r3, [r7, #12]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	3301      	adds	r3, #1
 80060ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80060c2:	8a3b      	ldrh	r3, [r7, #16]
 80060c4:	021b      	lsls	r3, r3, #8
 80060c6:	b21a      	sxth	r2, r3
 80060c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	b21b      	sxth	r3, r3
 80060d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80060d2:	89fb      	ldrh	r3, [r7, #14]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	371c      	adds	r7, #28
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060f6:	2b40      	cmp	r3, #64	; 0x40
 80060f8:	d005      	beq.n	8006106 <USBD_StdDevReq+0x26>
 80060fa:	2b40      	cmp	r3, #64	; 0x40
 80060fc:	d857      	bhi.n	80061ae <USBD_StdDevReq+0xce>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00f      	beq.n	8006122 <USBD_StdDevReq+0x42>
 8006102:	2b20      	cmp	r3, #32
 8006104:	d153      	bne.n	80061ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	32ae      	adds	r2, #174	; 0xae
 8006110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	4798      	blx	r3
 800611c:	4603      	mov	r3, r0
 800611e:	73fb      	strb	r3, [r7, #15]
      break;
 8006120:	e04a      	b.n	80061b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	785b      	ldrb	r3, [r3, #1]
 8006126:	2b09      	cmp	r3, #9
 8006128:	d83b      	bhi.n	80061a2 <USBD_StdDevReq+0xc2>
 800612a:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <USBD_StdDevReq+0x50>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	08006185 	.word	0x08006185
 8006134:	08006199 	.word	0x08006199
 8006138:	080061a3 	.word	0x080061a3
 800613c:	0800618f 	.word	0x0800618f
 8006140:	080061a3 	.word	0x080061a3
 8006144:	08006163 	.word	0x08006163
 8006148:	08006159 	.word	0x08006159
 800614c:	080061a3 	.word	0x080061a3
 8006150:	0800617b 	.word	0x0800617b
 8006154:	0800616d 	.word	0x0800616d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fa3c 	bl	80065d8 <USBD_GetDescriptor>
          break;
 8006160:	e024      	b.n	80061ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006162:	6839      	ldr	r1, [r7, #0]
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fba1 	bl	80068ac <USBD_SetAddress>
          break;
 800616a:	e01f      	b.n	80061ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800616c:	6839      	ldr	r1, [r7, #0]
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fbe0 	bl	8006934 <USBD_SetConfig>
 8006174:	4603      	mov	r3, r0
 8006176:	73fb      	strb	r3, [r7, #15]
          break;
 8006178:	e018      	b.n	80061ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800617a:	6839      	ldr	r1, [r7, #0]
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fc83 	bl	8006a88 <USBD_GetConfig>
          break;
 8006182:	e013      	b.n	80061ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fcb4 	bl	8006af4 <USBD_GetStatus>
          break;
 800618c:	e00e      	b.n	80061ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fce3 	bl	8006b5c <USBD_SetFeature>
          break;
 8006196:	e009      	b.n	80061ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006198:	6839      	ldr	r1, [r7, #0]
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fd07 	bl	8006bae <USBD_ClrFeature>
          break;
 80061a0:	e004      	b.n	80061ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80061a2:	6839      	ldr	r1, [r7, #0]
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fd5e 	bl	8006c66 <USBD_CtlError>
          break;
 80061aa:	bf00      	nop
      }
      break;
 80061ac:	e004      	b.n	80061b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fd58 	bl	8006c66 <USBD_CtlError>
      break;
 80061b6:	bf00      	nop
  }

  return ret;
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop

080061c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061da:	2b40      	cmp	r3, #64	; 0x40
 80061dc:	d005      	beq.n	80061ea <USBD_StdItfReq+0x26>
 80061de:	2b40      	cmp	r3, #64	; 0x40
 80061e0:	d852      	bhi.n	8006288 <USBD_StdItfReq+0xc4>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <USBD_StdItfReq+0x26>
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	d14e      	bne.n	8006288 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d840      	bhi.n	800627a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	889b      	ldrh	r3, [r3, #4]
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d836      	bhi.n	8006270 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	889b      	ldrh	r3, [r3, #4]
 8006206:	b2db      	uxtb	r3, r3
 8006208:	4619      	mov	r1, r3
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff fed9 	bl	8005fc2 <USBD_CoreFindIF>
 8006210:	4603      	mov	r3, r0
 8006212:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006214:	7bbb      	ldrb	r3, [r7, #14]
 8006216:	2bff      	cmp	r3, #255	; 0xff
 8006218:	d01d      	beq.n	8006256 <USBD_StdItfReq+0x92>
 800621a:	7bbb      	ldrb	r3, [r7, #14]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d11a      	bne.n	8006256 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006220:	7bba      	ldrb	r2, [r7, #14]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	32ae      	adds	r2, #174	; 0xae
 8006226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00f      	beq.n	8006250 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006230:	7bba      	ldrb	r2, [r7, #14]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006238:	7bba      	ldrb	r2, [r7, #14]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	32ae      	adds	r2, #174	; 0xae
 800623e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	4798      	blx	r3
 800624a:	4603      	mov	r3, r0
 800624c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800624e:	e004      	b.n	800625a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006250:	2303      	movs	r3, #3
 8006252:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006254:	e001      	b.n	800625a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006256:	2303      	movs	r3, #3
 8006258:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	88db      	ldrh	r3, [r3, #6]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d110      	bne.n	8006284 <USBD_StdItfReq+0xc0>
 8006262:	7bfb      	ldrb	r3, [r7, #15]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10d      	bne.n	8006284 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fdc7 	bl	8006dfc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800626e:	e009      	b.n	8006284 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fcf7 	bl	8006c66 <USBD_CtlError>
          break;
 8006278:	e004      	b.n	8006284 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800627a:	6839      	ldr	r1, [r7, #0]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fcf2 	bl	8006c66 <USBD_CtlError>
          break;
 8006282:	e000      	b.n	8006286 <USBD_StdItfReq+0xc2>
          break;
 8006284:	bf00      	nop
      }
      break;
 8006286:	e004      	b.n	8006292 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fceb 	bl	8006c66 <USBD_CtlError>
      break;
 8006290:	bf00      	nop
  }

  return ret;
 8006292:	7bfb      	ldrb	r3, [r7, #15]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	889b      	ldrh	r3, [r3, #4]
 80062ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062b8:	2b40      	cmp	r3, #64	; 0x40
 80062ba:	d007      	beq.n	80062cc <USBD_StdEPReq+0x30>
 80062bc:	2b40      	cmp	r3, #64	; 0x40
 80062be:	f200 817f 	bhi.w	80065c0 <USBD_StdEPReq+0x324>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d02a      	beq.n	800631c <USBD_StdEPReq+0x80>
 80062c6:	2b20      	cmp	r3, #32
 80062c8:	f040 817a 	bne.w	80065c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80062cc:	7bbb      	ldrb	r3, [r7, #14]
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff fe83 	bl	8005fdc <USBD_CoreFindEP>
 80062d6:	4603      	mov	r3, r0
 80062d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062da:	7b7b      	ldrb	r3, [r7, #13]
 80062dc:	2bff      	cmp	r3, #255	; 0xff
 80062de:	f000 8174 	beq.w	80065ca <USBD_StdEPReq+0x32e>
 80062e2:	7b7b      	ldrb	r3, [r7, #13]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f040 8170 	bne.w	80065ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80062ea:	7b7a      	ldrb	r2, [r7, #13]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80062f2:	7b7a      	ldrb	r2, [r7, #13]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	32ae      	adds	r2, #174	; 0xae
 80062f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 8163 	beq.w	80065ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006304:	7b7a      	ldrb	r2, [r7, #13]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	32ae      	adds	r2, #174	; 0xae
 800630a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	4798      	blx	r3
 8006316:	4603      	mov	r3, r0
 8006318:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800631a:	e156      	b.n	80065ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	785b      	ldrb	r3, [r3, #1]
 8006320:	2b03      	cmp	r3, #3
 8006322:	d008      	beq.n	8006336 <USBD_StdEPReq+0x9a>
 8006324:	2b03      	cmp	r3, #3
 8006326:	f300 8145 	bgt.w	80065b4 <USBD_StdEPReq+0x318>
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 809b 	beq.w	8006466 <USBD_StdEPReq+0x1ca>
 8006330:	2b01      	cmp	r3, #1
 8006332:	d03c      	beq.n	80063ae <USBD_StdEPReq+0x112>
 8006334:	e13e      	b.n	80065b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d002      	beq.n	8006348 <USBD_StdEPReq+0xac>
 8006342:	2b03      	cmp	r3, #3
 8006344:	d016      	beq.n	8006374 <USBD_StdEPReq+0xd8>
 8006346:	e02c      	b.n	80063a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006348:	7bbb      	ldrb	r3, [r7, #14]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00d      	beq.n	800636a <USBD_StdEPReq+0xce>
 800634e:	7bbb      	ldrb	r3, [r7, #14]
 8006350:	2b80      	cmp	r3, #128	; 0x80
 8006352:	d00a      	beq.n	800636a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006354:	7bbb      	ldrb	r3, [r7, #14]
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f001 f947 	bl	80075ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800635e:	2180      	movs	r1, #128	; 0x80
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 f943 	bl	80075ec <USBD_LL_StallEP>
 8006366:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006368:	e020      	b.n	80063ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fc7a 	bl	8006c66 <USBD_CtlError>
              break;
 8006372:	e01b      	b.n	80063ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	885b      	ldrh	r3, [r3, #2]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10e      	bne.n	800639a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00b      	beq.n	800639a <USBD_StdEPReq+0xfe>
 8006382:	7bbb      	ldrb	r3, [r7, #14]
 8006384:	2b80      	cmp	r3, #128	; 0x80
 8006386:	d008      	beq.n	800639a <USBD_StdEPReq+0xfe>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	88db      	ldrh	r3, [r3, #6]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d104      	bne.n	800639a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006390:	7bbb      	ldrb	r3, [r7, #14]
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f001 f929 	bl	80075ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fd2e 	bl	8006dfc <USBD_CtlSendStatus>

              break;
 80063a0:	e004      	b.n	80063ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fc5e 	bl	8006c66 <USBD_CtlError>
              break;
 80063aa:	bf00      	nop
          }
          break;
 80063ac:	e107      	b.n	80065be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d002      	beq.n	80063c0 <USBD_StdEPReq+0x124>
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d016      	beq.n	80063ec <USBD_StdEPReq+0x150>
 80063be:	e04b      	b.n	8006458 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063c0:	7bbb      	ldrb	r3, [r7, #14]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00d      	beq.n	80063e2 <USBD_StdEPReq+0x146>
 80063c6:	7bbb      	ldrb	r3, [r7, #14]
 80063c8:	2b80      	cmp	r3, #128	; 0x80
 80063ca:	d00a      	beq.n	80063e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80063cc:	7bbb      	ldrb	r3, [r7, #14]
 80063ce:	4619      	mov	r1, r3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f001 f90b 	bl	80075ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063d6:	2180      	movs	r1, #128	; 0x80
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f001 f907 	bl	80075ec <USBD_LL_StallEP>
 80063de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063e0:	e040      	b.n	8006464 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fc3e 	bl	8006c66 <USBD_CtlError>
              break;
 80063ea:	e03b      	b.n	8006464 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	885b      	ldrh	r3, [r3, #2]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d136      	bne.n	8006462 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063f4:	7bbb      	ldrb	r3, [r7, #14]
 80063f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d004      	beq.n	8006408 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 f911 	bl	800762a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fcf7 	bl	8006dfc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800640e:	7bbb      	ldrb	r3, [r7, #14]
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fde2 	bl	8005fdc <USBD_CoreFindEP>
 8006418:	4603      	mov	r3, r0
 800641a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800641c:	7b7b      	ldrb	r3, [r7, #13]
 800641e:	2bff      	cmp	r3, #255	; 0xff
 8006420:	d01f      	beq.n	8006462 <USBD_StdEPReq+0x1c6>
 8006422:	7b7b      	ldrb	r3, [r7, #13]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d11c      	bne.n	8006462 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006428:	7b7a      	ldrb	r2, [r7, #13]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006430:	7b7a      	ldrb	r2, [r7, #13]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	32ae      	adds	r2, #174	; 0xae
 8006436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d010      	beq.n	8006462 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006440:	7b7a      	ldrb	r2, [r7, #13]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	32ae      	adds	r2, #174	; 0xae
 8006446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	4798      	blx	r3
 8006452:	4603      	mov	r3, r0
 8006454:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006456:	e004      	b.n	8006462 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fc03 	bl	8006c66 <USBD_CtlError>
              break;
 8006460:	e000      	b.n	8006464 <USBD_StdEPReq+0x1c8>
              break;
 8006462:	bf00      	nop
          }
          break;
 8006464:	e0ab      	b.n	80065be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d002      	beq.n	8006478 <USBD_StdEPReq+0x1dc>
 8006472:	2b03      	cmp	r3, #3
 8006474:	d032      	beq.n	80064dc <USBD_StdEPReq+0x240>
 8006476:	e097      	b.n	80065a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d007      	beq.n	800648e <USBD_StdEPReq+0x1f2>
 800647e:	7bbb      	ldrb	r3, [r7, #14]
 8006480:	2b80      	cmp	r3, #128	; 0x80
 8006482:	d004      	beq.n	800648e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fbed 	bl	8006c66 <USBD_CtlError>
                break;
 800648c:	e091      	b.n	80065b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800648e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006492:	2b00      	cmp	r3, #0
 8006494:	da0b      	bge.n	80064ae <USBD_StdEPReq+0x212>
 8006496:	7bbb      	ldrb	r3, [r7, #14]
 8006498:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800649c:	4613      	mov	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	3310      	adds	r3, #16
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	4413      	add	r3, r2
 80064aa:	3304      	adds	r3, #4
 80064ac:	e00b      	b.n	80064c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064ae:	7bbb      	ldrb	r3, [r7, #14]
 80064b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064b4:	4613      	mov	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	4413      	add	r3, r2
 80064c4:	3304      	adds	r3, #4
 80064c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2202      	movs	r2, #2
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fc37 	bl	8006d48 <USBD_CtlSendData>
              break;
 80064da:	e06a      	b.n	80065b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80064dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	da11      	bge.n	8006508 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064e4:	7bbb      	ldrb	r3, [r7, #14]
 80064e6:	f003 020f 	and.w	r2, r3, #15
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	4613      	mov	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	440b      	add	r3, r1
 80064f6:	3324      	adds	r3, #36	; 0x24
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d117      	bne.n	800652e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fbb0 	bl	8006c66 <USBD_CtlError>
                  break;
 8006506:	e054      	b.n	80065b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006508:	7bbb      	ldrb	r3, [r7, #14]
 800650a:	f003 020f 	and.w	r2, r3, #15
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	440b      	add	r3, r1
 800651a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d104      	bne.n	800652e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fb9d 	bl	8006c66 <USBD_CtlError>
                  break;
 800652c:	e041      	b.n	80065b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800652e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006532:	2b00      	cmp	r3, #0
 8006534:	da0b      	bge.n	800654e <USBD_StdEPReq+0x2b2>
 8006536:	7bbb      	ldrb	r3, [r7, #14]
 8006538:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800653c:	4613      	mov	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	3310      	adds	r3, #16
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	4413      	add	r3, r2
 800654a:	3304      	adds	r3, #4
 800654c:	e00b      	b.n	8006566 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800654e:	7bbb      	ldrb	r3, [r7, #14]
 8006550:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	4413      	add	r3, r2
 8006564:	3304      	adds	r3, #4
 8006566:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <USBD_StdEPReq+0x2d8>
 800656e:	7bbb      	ldrb	r3, [r7, #14]
 8006570:	2b80      	cmp	r3, #128	; 0x80
 8006572:	d103      	bne.n	800657c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2200      	movs	r2, #0
 8006578:	601a      	str	r2, [r3, #0]
 800657a:	e00e      	b.n	800659a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800657c:	7bbb      	ldrb	r3, [r7, #14]
 800657e:	4619      	mov	r1, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f001 f871 	bl	8007668 <USBD_LL_IsStallEP>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d003      	beq.n	8006594 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2201      	movs	r2, #1
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	e002      	b.n	800659a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2202      	movs	r2, #2
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fbd1 	bl	8006d48 <USBD_CtlSendData>
              break;
 80065a6:	e004      	b.n	80065b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fb5b 	bl	8006c66 <USBD_CtlError>
              break;
 80065b0:	bf00      	nop
          }
          break;
 80065b2:	e004      	b.n	80065be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80065b4:	6839      	ldr	r1, [r7, #0]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fb55 	bl	8006c66 <USBD_CtlError>
          break;
 80065bc:	bf00      	nop
      }
      break;
 80065be:	e005      	b.n	80065cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fb4f 	bl	8006c66 <USBD_CtlError>
      break;
 80065c8:	e000      	b.n	80065cc <USBD_StdEPReq+0x330>
      break;
 80065ca:	bf00      	nop
  }

  return ret;
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
	...

080065d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	885b      	ldrh	r3, [r3, #2]
 80065f2:	0a1b      	lsrs	r3, r3, #8
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	2b06      	cmp	r3, #6
 80065fa:	f200 8128 	bhi.w	800684e <USBD_GetDescriptor+0x276>
 80065fe:	a201      	add	r2, pc, #4	; (adr r2, 8006604 <USBD_GetDescriptor+0x2c>)
 8006600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006604:	08006621 	.word	0x08006621
 8006608:	08006639 	.word	0x08006639
 800660c:	08006679 	.word	0x08006679
 8006610:	0800684f 	.word	0x0800684f
 8006614:	0800684f 	.word	0x0800684f
 8006618:	080067ef 	.word	0x080067ef
 800661c:	0800681b 	.word	0x0800681b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	7c12      	ldrb	r2, [r2, #16]
 800662c:	f107 0108 	add.w	r1, r7, #8
 8006630:	4610      	mov	r0, r2
 8006632:	4798      	blx	r3
 8006634:	60f8      	str	r0, [r7, #12]
      break;
 8006636:	e112      	b.n	800685e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	7c1b      	ldrb	r3, [r3, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10d      	bne.n	800665c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006648:	f107 0208 	add.w	r2, r7, #8
 800664c:	4610      	mov	r0, r2
 800664e:	4798      	blx	r3
 8006650:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	3301      	adds	r3, #1
 8006656:	2202      	movs	r2, #2
 8006658:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800665a:	e100      	b.n	800685e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006664:	f107 0208 	add.w	r2, r7, #8
 8006668:	4610      	mov	r0, r2
 800666a:	4798      	blx	r3
 800666c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3301      	adds	r3, #1
 8006672:	2202      	movs	r2, #2
 8006674:	701a      	strb	r2, [r3, #0]
      break;
 8006676:	e0f2      	b.n	800685e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	885b      	ldrh	r3, [r3, #2]
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b05      	cmp	r3, #5
 8006680:	f200 80ac 	bhi.w	80067dc <USBD_GetDescriptor+0x204>
 8006684:	a201      	add	r2, pc, #4	; (adr r2, 800668c <USBD_GetDescriptor+0xb4>)
 8006686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668a:	bf00      	nop
 800668c:	080066a5 	.word	0x080066a5
 8006690:	080066d9 	.word	0x080066d9
 8006694:	0800670d 	.word	0x0800670d
 8006698:	08006741 	.word	0x08006741
 800669c:	08006775 	.word	0x08006775
 80066a0:	080067a9 	.word	0x080067a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00b      	beq.n	80066c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	7c12      	ldrb	r2, [r2, #16]
 80066bc:	f107 0108 	add.w	r1, r7, #8
 80066c0:	4610      	mov	r0, r2
 80066c2:	4798      	blx	r3
 80066c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066c6:	e091      	b.n	80067ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 facb 	bl	8006c66 <USBD_CtlError>
            err++;
 80066d0:	7afb      	ldrb	r3, [r7, #11]
 80066d2:	3301      	adds	r3, #1
 80066d4:	72fb      	strb	r3, [r7, #11]
          break;
 80066d6:	e089      	b.n	80067ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00b      	beq.n	80066fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	7c12      	ldrb	r2, [r2, #16]
 80066f0:	f107 0108 	add.w	r1, r7, #8
 80066f4:	4610      	mov	r0, r2
 80066f6:	4798      	blx	r3
 80066f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066fa:	e077      	b.n	80067ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fab1 	bl	8006c66 <USBD_CtlError>
            err++;
 8006704:	7afb      	ldrb	r3, [r7, #11]
 8006706:	3301      	adds	r3, #1
 8006708:	72fb      	strb	r3, [r7, #11]
          break;
 800670a:	e06f      	b.n	80067ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00b      	beq.n	8006730 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	7c12      	ldrb	r2, [r2, #16]
 8006724:	f107 0108 	add.w	r1, r7, #8
 8006728:	4610      	mov	r0, r2
 800672a:	4798      	blx	r3
 800672c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800672e:	e05d      	b.n	80067ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006730:	6839      	ldr	r1, [r7, #0]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa97 	bl	8006c66 <USBD_CtlError>
            err++;
 8006738:	7afb      	ldrb	r3, [r7, #11]
 800673a:	3301      	adds	r3, #1
 800673c:	72fb      	strb	r3, [r7, #11]
          break;
 800673e:	e055      	b.n	80067ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00b      	beq.n	8006764 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	7c12      	ldrb	r2, [r2, #16]
 8006758:	f107 0108 	add.w	r1, r7, #8
 800675c:	4610      	mov	r0, r2
 800675e:	4798      	blx	r3
 8006760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006762:	e043      	b.n	80067ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fa7d 	bl	8006c66 <USBD_CtlError>
            err++;
 800676c:	7afb      	ldrb	r3, [r7, #11]
 800676e:	3301      	adds	r3, #1
 8006770:	72fb      	strb	r3, [r7, #11]
          break;
 8006772:	e03b      	b.n	80067ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	7c12      	ldrb	r2, [r2, #16]
 800678c:	f107 0108 	add.w	r1, r7, #8
 8006790:	4610      	mov	r0, r2
 8006792:	4798      	blx	r3
 8006794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006796:	e029      	b.n	80067ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fa63 	bl	8006c66 <USBD_CtlError>
            err++;
 80067a0:	7afb      	ldrb	r3, [r7, #11]
 80067a2:	3301      	adds	r3, #1
 80067a4:	72fb      	strb	r3, [r7, #11]
          break;
 80067a6:	e021      	b.n	80067ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00b      	beq.n	80067cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	7c12      	ldrb	r2, [r2, #16]
 80067c0:	f107 0108 	add.w	r1, r7, #8
 80067c4:	4610      	mov	r0, r2
 80067c6:	4798      	blx	r3
 80067c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ca:	e00f      	b.n	80067ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fa49 	bl	8006c66 <USBD_CtlError>
            err++;
 80067d4:	7afb      	ldrb	r3, [r7, #11]
 80067d6:	3301      	adds	r3, #1
 80067d8:	72fb      	strb	r3, [r7, #11]
          break;
 80067da:	e007      	b.n	80067ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fa41 	bl	8006c66 <USBD_CtlError>
          err++;
 80067e4:	7afb      	ldrb	r3, [r7, #11]
 80067e6:	3301      	adds	r3, #1
 80067e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80067ea:	bf00      	nop
      }
      break;
 80067ec:	e037      	b.n	800685e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	7c1b      	ldrb	r3, [r3, #16]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d109      	bne.n	800680a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fe:	f107 0208 	add.w	r2, r7, #8
 8006802:	4610      	mov	r0, r2
 8006804:	4798      	blx	r3
 8006806:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006808:	e029      	b.n	800685e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fa2a 	bl	8006c66 <USBD_CtlError>
        err++;
 8006812:	7afb      	ldrb	r3, [r7, #11]
 8006814:	3301      	adds	r3, #1
 8006816:	72fb      	strb	r3, [r7, #11]
      break;
 8006818:	e021      	b.n	800685e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	7c1b      	ldrb	r3, [r3, #16]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10d      	bne.n	800683e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682a:	f107 0208 	add.w	r2, r7, #8
 800682e:	4610      	mov	r0, r2
 8006830:	4798      	blx	r3
 8006832:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3301      	adds	r3, #1
 8006838:	2207      	movs	r2, #7
 800683a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800683c:	e00f      	b.n	800685e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fa10 	bl	8006c66 <USBD_CtlError>
        err++;
 8006846:	7afb      	ldrb	r3, [r7, #11]
 8006848:	3301      	adds	r3, #1
 800684a:	72fb      	strb	r3, [r7, #11]
      break;
 800684c:	e007      	b.n	800685e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800684e:	6839      	ldr	r1, [r7, #0]
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fa08 	bl	8006c66 <USBD_CtlError>
      err++;
 8006856:	7afb      	ldrb	r3, [r7, #11]
 8006858:	3301      	adds	r3, #1
 800685a:	72fb      	strb	r3, [r7, #11]
      break;
 800685c:	bf00      	nop
  }

  if (err != 0U)
 800685e:	7afb      	ldrb	r3, [r7, #11]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d11e      	bne.n	80068a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	88db      	ldrh	r3, [r3, #6]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d016      	beq.n	800689a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800686c:	893b      	ldrh	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00e      	beq.n	8006890 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	88da      	ldrh	r2, [r3, #6]
 8006876:	893b      	ldrh	r3, [r7, #8]
 8006878:	4293      	cmp	r3, r2
 800687a:	bf28      	it	cs
 800687c:	4613      	movcs	r3, r2
 800687e:	b29b      	uxth	r3, r3
 8006880:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006882:	893b      	ldrh	r3, [r7, #8]
 8006884:	461a      	mov	r2, r3
 8006886:	68f9      	ldr	r1, [r7, #12]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fa5d 	bl	8006d48 <USBD_CtlSendData>
 800688e:	e009      	b.n	80068a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006890:	6839      	ldr	r1, [r7, #0]
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f9e7 	bl	8006c66 <USBD_CtlError>
 8006898:	e004      	b.n	80068a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 faae 	bl	8006dfc <USBD_CtlSendStatus>
 80068a0:	e000      	b.n	80068a4 <USBD_GetDescriptor+0x2cc>
    return;
 80068a2:	bf00      	nop
  }
}
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop

080068ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	889b      	ldrh	r3, [r3, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d131      	bne.n	8006922 <USBD_SetAddress+0x76>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	88db      	ldrh	r3, [r3, #6]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d12d      	bne.n	8006922 <USBD_SetAddress+0x76>
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	885b      	ldrh	r3, [r3, #2]
 80068ca:	2b7f      	cmp	r3, #127	; 0x7f
 80068cc:	d829      	bhi.n	8006922 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	885b      	ldrh	r3, [r3, #2]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	d104      	bne.n	80068f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f9bc 	bl	8006c66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ee:	e01d      	b.n	800692c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	7bfa      	ldrb	r2, [r7, #15]
 80068f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fedf 	bl	80076c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fa7a 	bl	8006dfc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006908:	7bfb      	ldrb	r3, [r7, #15]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d004      	beq.n	8006918 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2202      	movs	r2, #2
 8006912:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006916:	e009      	b.n	800692c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006920:	e004      	b.n	800692c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f99e 	bl	8006c66 <USBD_CtlError>
  }
}
 800692a:	bf00      	nop
 800692c:	bf00      	nop
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	885b      	ldrh	r3, [r3, #2]
 8006946:	b2da      	uxtb	r2, r3
 8006948:	4b4e      	ldr	r3, [pc, #312]	; (8006a84 <USBD_SetConfig+0x150>)
 800694a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800694c:	4b4d      	ldr	r3, [pc, #308]	; (8006a84 <USBD_SetConfig+0x150>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d905      	bls.n	8006960 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f985 	bl	8006c66 <USBD_CtlError>
    return USBD_FAIL;
 800695c:	2303      	movs	r3, #3
 800695e:	e08c      	b.n	8006a7a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d002      	beq.n	8006972 <USBD_SetConfig+0x3e>
 800696c:	2b03      	cmp	r3, #3
 800696e:	d029      	beq.n	80069c4 <USBD_SetConfig+0x90>
 8006970:	e075      	b.n	8006a5e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006972:	4b44      	ldr	r3, [pc, #272]	; (8006a84 <USBD_SetConfig+0x150>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d020      	beq.n	80069bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800697a:	4b42      	ldr	r3, [pc, #264]	; (8006a84 <USBD_SetConfig+0x150>)
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006984:	4b3f      	ldr	r3, [pc, #252]	; (8006a84 <USBD_SetConfig+0x150>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	4619      	mov	r1, r3
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7fe ffe7 	bl	800595e <USBD_SetClassConfig>
 8006990:	4603      	mov	r3, r0
 8006992:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d008      	beq.n	80069ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f962 	bl	8006c66 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2202      	movs	r2, #2
 80069a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069aa:	e065      	b.n	8006a78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fa25 	bl	8006dfc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2203      	movs	r2, #3
 80069b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069ba:	e05d      	b.n	8006a78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fa1d 	bl	8006dfc <USBD_CtlSendStatus>
      break;
 80069c2:	e059      	b.n	8006a78 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80069c4:	4b2f      	ldr	r3, [pc, #188]	; (8006a84 <USBD_SetConfig+0x150>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d112      	bne.n	80069f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80069d4:	4b2b      	ldr	r3, [pc, #172]	; (8006a84 <USBD_SetConfig+0x150>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	461a      	mov	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069de:	4b29      	ldr	r3, [pc, #164]	; (8006a84 <USBD_SetConfig+0x150>)
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7fe ffd6 	bl	8005996 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fa06 	bl	8006dfc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069f0:	e042      	b.n	8006a78 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80069f2:	4b24      	ldr	r3, [pc, #144]	; (8006a84 <USBD_SetConfig+0x150>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d02a      	beq.n	8006a56 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7fe ffc4 	bl	8005996 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006a0e:	4b1d      	ldr	r3, [pc, #116]	; (8006a84 <USBD_SetConfig+0x150>)
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a18:	4b1a      	ldr	r3, [pc, #104]	; (8006a84 <USBD_SetConfig+0x150>)
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7fe ff9d 	bl	800595e <USBD_SetClassConfig>
 8006a24:	4603      	mov	r3, r0
 8006a26:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00f      	beq.n	8006a4e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f918 	bl	8006c66 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7fe ffa9 	bl	8005996 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a4c:	e014      	b.n	8006a78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f9d4 	bl	8006dfc <USBD_CtlSendStatus>
      break;
 8006a54:	e010      	b.n	8006a78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f9d0 	bl	8006dfc <USBD_CtlSendStatus>
      break;
 8006a5c:	e00c      	b.n	8006a78 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f900 	bl	8006c66 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a66:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <USBD_SetConfig+0x150>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7fe ff92 	bl	8005996 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a72:	2303      	movs	r3, #3
 8006a74:	73fb      	strb	r3, [r7, #15]
      break;
 8006a76:	bf00      	nop
  }

  return ret;
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	200001b4 	.word	0x200001b4

08006a88 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	88db      	ldrh	r3, [r3, #6]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d004      	beq.n	8006aa4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f8e2 	bl	8006c66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006aa2:	e023      	b.n	8006aec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	dc02      	bgt.n	8006ab6 <USBD_GetConfig+0x2e>
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	dc03      	bgt.n	8006abc <USBD_GetConfig+0x34>
 8006ab4:	e015      	b.n	8006ae2 <USBD_GetConfig+0x5a>
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d00b      	beq.n	8006ad2 <USBD_GetConfig+0x4a>
 8006aba:	e012      	b.n	8006ae2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f93c 	bl	8006d48 <USBD_CtlSendData>
        break;
 8006ad0:	e00c      	b.n	8006aec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f934 	bl	8006d48 <USBD_CtlSendData>
        break;
 8006ae0:	e004      	b.n	8006aec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f8be 	bl	8006c66 <USBD_CtlError>
        break;
 8006aea:	bf00      	nop
}
 8006aec:	bf00      	nop
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	3b01      	subs	r3, #1
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d81e      	bhi.n	8006b4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	88db      	ldrh	r3, [r3, #6]
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d004      	beq.n	8006b1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f8a5 	bl	8006c66 <USBD_CtlError>
        break;
 8006b1c:	e01a      	b.n	8006b54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d005      	beq.n	8006b3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f043 0202 	orr.w	r2, r3, #2
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	330c      	adds	r3, #12
 8006b3e:	2202      	movs	r2, #2
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f900 	bl	8006d48 <USBD_CtlSendData>
      break;
 8006b48:	e004      	b.n	8006b54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f88a 	bl	8006c66 <USBD_CtlError>
      break;
 8006b52:	bf00      	nop
  }
}
 8006b54:	bf00      	nop
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	885b      	ldrh	r3, [r3, #2]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d107      	bne.n	8006b7e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f940 	bl	8006dfc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006b7c:	e013      	b.n	8006ba6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	885b      	ldrh	r3, [r3, #2]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d10b      	bne.n	8006b9e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	889b      	ldrh	r3, [r3, #4]
 8006b8a:	0a1b      	lsrs	r3, r3, #8
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f930 	bl	8006dfc <USBD_CtlSendStatus>
}
 8006b9c:	e003      	b.n	8006ba6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f860 	bl	8006c66 <USBD_CtlError>
}
 8006ba6:	bf00      	nop
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b082      	sub	sp, #8
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d80b      	bhi.n	8006bde <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	885b      	ldrh	r3, [r3, #2]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d10c      	bne.n	8006be8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f910 	bl	8006dfc <USBD_CtlSendStatus>
      }
      break;
 8006bdc:	e004      	b.n	8006be8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f840 	bl	8006c66 <USBD_CtlError>
      break;
 8006be6:	e000      	b.n	8006bea <USBD_ClrFeature+0x3c>
      break;
 8006be8:	bf00      	nop
  }
}
 8006bea:	bf00      	nop
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	781a      	ldrb	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	781a      	ldrb	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f7ff fa41 	bl	80060a4 <SWAPBYTE>
 8006c22:	4603      	mov	r3, r0
 8006c24:	461a      	mov	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	3301      	adds	r3, #1
 8006c34:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f7ff fa34 	bl	80060a4 <SWAPBYTE>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	461a      	mov	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	3301      	adds	r3, #1
 8006c48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f7ff fa27 	bl	80060a4 <SWAPBYTE>
 8006c56:	4603      	mov	r3, r0
 8006c58:	461a      	mov	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	80da      	strh	r2, [r3, #6]
}
 8006c5e:	bf00      	nop
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b082      	sub	sp, #8
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c70:	2180      	movs	r1, #128	; 0x80
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fcba 	bl	80075ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c78:	2100      	movs	r1, #0
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fcb6 	bl	80075ec <USBD_LL_StallEP>
}
 8006c80:	bf00      	nop
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d036      	beq.n	8006d0c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006ca2:	6938      	ldr	r0, [r7, #16]
 8006ca4:	f000 f836 	bl	8006d14 <USBD_GetLen>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	3301      	adds	r3, #1
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	005b      	lsls	r3, r3, #1
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	4413      	add	r3, r2
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	7812      	ldrb	r2, [r2, #0]
 8006cc0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	4413      	add	r3, r2
 8006cce:	2203      	movs	r2, #3
 8006cd0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006cd8:	e013      	b.n	8006d02 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006cda:	7dfb      	ldrb	r3, [r7, #23]
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	4413      	add	r3, r2
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	7812      	ldrb	r2, [r2, #0]
 8006ce4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	613b      	str	r3, [r7, #16]
    idx++;
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006cf2:	7dfb      	ldrb	r3, [r7, #23]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	701a      	strb	r2, [r3, #0]
    idx++;
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1e7      	bne.n	8006cda <USBD_GetString+0x52>
 8006d0a:	e000      	b.n	8006d0e <USBD_GetString+0x86>
    return;
 8006d0c:	bf00      	nop
  }
}
 8006d0e:	3718      	adds	r7, #24
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006d24:	e005      	b.n	8006d32 <USBD_GetLen+0x1e>
  {
    len++;
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1f5      	bne.n	8006d26 <USBD_GetLen+0x12>
  }

  return len;
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f000 fcc5 	bl	80076fe <USBD_LL_Transmit>

  return USBD_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	2100      	movs	r1, #0
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 fcb4 	bl	80076fe <USBD_LL_Transmit>

  return USBD_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2203      	movs	r2, #3
 8006db0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	2100      	movs	r1, #0
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 fcb8 	bl	8007740 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b084      	sub	sp, #16
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	60f8      	str	r0, [r7, #12]
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	2100      	movs	r1, #0
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 fca7 	bl	8007740 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2204      	movs	r2, #4
 8006e08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2100      	movs	r1, #0
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fc73 	bl	80076fe <USBD_LL_Transmit>

  return USBD_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b082      	sub	sp, #8
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2205      	movs	r2, #5
 8006e2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e32:	2300      	movs	r3, #0
 8006e34:	2200      	movs	r2, #0
 8006e36:	2100      	movs	r1, #0
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fc81 	bl	8007740 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	4912      	ldr	r1, [pc, #72]	; (8006e98 <MX_USB_DEVICE_Init+0x50>)
 8006e50:	4812      	ldr	r0, [pc, #72]	; (8006e9c <MX_USB_DEVICE_Init+0x54>)
 8006e52:	f7fe fd07 	bl	8005864 <USBD_Init>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e5c:	f7f9 fc64 	bl	8000728 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e60:	490f      	ldr	r1, [pc, #60]	; (8006ea0 <MX_USB_DEVICE_Init+0x58>)
 8006e62:	480e      	ldr	r0, [pc, #56]	; (8006e9c <MX_USB_DEVICE_Init+0x54>)
 8006e64:	f7fe fd2e 	bl	80058c4 <USBD_RegisterClass>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e6e:	f7f9 fc5b 	bl	8000728 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e72:	490c      	ldr	r1, [pc, #48]	; (8006ea4 <MX_USB_DEVICE_Init+0x5c>)
 8006e74:	4809      	ldr	r0, [pc, #36]	; (8006e9c <MX_USB_DEVICE_Init+0x54>)
 8006e76:	f7fe fc65 	bl	8005744 <USBD_CDC_RegisterInterface>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d001      	beq.n	8006e84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e80:	f7f9 fc52 	bl	8000728 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e84:	4805      	ldr	r0, [pc, #20]	; (8006e9c <MX_USB_DEVICE_Init+0x54>)
 8006e86:	f7fe fd53 	bl	8005930 <USBD_Start>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e90:	f7f9 fc4a 	bl	8000728 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e94:	bf00      	nop
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	200000ac 	.word	0x200000ac
 8006e9c:	200001b8 	.word	0x200001b8
 8006ea0:	20000018 	.word	0x20000018
 8006ea4:	20000098 	.word	0x20000098

08006ea8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006eac:	2200      	movs	r2, #0
 8006eae:	4905      	ldr	r1, [pc, #20]	; (8006ec4 <CDC_Init_FS+0x1c>)
 8006eb0:	4805      	ldr	r0, [pc, #20]	; (8006ec8 <CDC_Init_FS+0x20>)
 8006eb2:	f7fe fc61 	bl	8005778 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006eb6:	4905      	ldr	r1, [pc, #20]	; (8006ecc <CDC_Init_FS+0x24>)
 8006eb8:	4803      	ldr	r0, [pc, #12]	; (8006ec8 <CDC_Init_FS+0x20>)
 8006eba:	f7fe fc7f 	bl	80057bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006ebe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	20000c94 	.word	0x20000c94
 8006ec8:	200001b8 	.word	0x200001b8
 8006ecc:	20000494 	.word	0x20000494

08006ed0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006ed4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	6039      	str	r1, [r7, #0]
 8006eea:	71fb      	strb	r3, [r7, #7]
 8006eec:	4613      	mov	r3, r2
 8006eee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006ef0:	79fb      	ldrb	r3, [r7, #7]
 8006ef2:	2b23      	cmp	r3, #35	; 0x23
 8006ef4:	d84a      	bhi.n	8006f8c <CDC_Control_FS+0xac>
 8006ef6:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <CDC_Control_FS+0x1c>)
 8006ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efc:	08006f8d 	.word	0x08006f8d
 8006f00:	08006f8d 	.word	0x08006f8d
 8006f04:	08006f8d 	.word	0x08006f8d
 8006f08:	08006f8d 	.word	0x08006f8d
 8006f0c:	08006f8d 	.word	0x08006f8d
 8006f10:	08006f8d 	.word	0x08006f8d
 8006f14:	08006f8d 	.word	0x08006f8d
 8006f18:	08006f8d 	.word	0x08006f8d
 8006f1c:	08006f8d 	.word	0x08006f8d
 8006f20:	08006f8d 	.word	0x08006f8d
 8006f24:	08006f8d 	.word	0x08006f8d
 8006f28:	08006f8d 	.word	0x08006f8d
 8006f2c:	08006f8d 	.word	0x08006f8d
 8006f30:	08006f8d 	.word	0x08006f8d
 8006f34:	08006f8d 	.word	0x08006f8d
 8006f38:	08006f8d 	.word	0x08006f8d
 8006f3c:	08006f8d 	.word	0x08006f8d
 8006f40:	08006f8d 	.word	0x08006f8d
 8006f44:	08006f8d 	.word	0x08006f8d
 8006f48:	08006f8d 	.word	0x08006f8d
 8006f4c:	08006f8d 	.word	0x08006f8d
 8006f50:	08006f8d 	.word	0x08006f8d
 8006f54:	08006f8d 	.word	0x08006f8d
 8006f58:	08006f8d 	.word	0x08006f8d
 8006f5c:	08006f8d 	.word	0x08006f8d
 8006f60:	08006f8d 	.word	0x08006f8d
 8006f64:	08006f8d 	.word	0x08006f8d
 8006f68:	08006f8d 	.word	0x08006f8d
 8006f6c:	08006f8d 	.word	0x08006f8d
 8006f70:	08006f8d 	.word	0x08006f8d
 8006f74:	08006f8d 	.word	0x08006f8d
 8006f78:	08006f8d 	.word	0x08006f8d
 8006f7c:	08006f8d 	.word	0x08006f8d
 8006f80:	08006f8d 	.word	0x08006f8d
 8006f84:	08006f8d 	.word	0x08006f8d
 8006f88:	08006f8d 	.word	0x08006f8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f8c:	bf00      	nop
  }

  return (USBD_OK);
 8006f8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006fa6:	6879      	ldr	r1, [r7, #4]
 8006fa8:	4805      	ldr	r0, [pc, #20]	; (8006fc0 <CDC_Receive_FS+0x24>)
 8006faa:	f7fe fc07 	bl	80057bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006fae:	4804      	ldr	r0, [pc, #16]	; (8006fc0 <CDC_Receive_FS+0x24>)
 8006fb0:	f7fe fc22 	bl	80057f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006fb4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	200001b8 	.word	0x200001b8

08006fc4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
	...

08006fe8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	6039      	str	r1, [r7, #0]
 8006ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	2212      	movs	r2, #18
 8006ff8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ffa:	4b03      	ldr	r3, [pc, #12]	; (8007008 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr
 8007008:	200000c8 	.word	0x200000c8

0800700c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	6039      	str	r1, [r7, #0]
 8007016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2204      	movs	r2, #4
 800701c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800701e:	4b03      	ldr	r3, [pc, #12]	; (800702c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	200000dc 	.word	0x200000dc

08007030 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	6039      	str	r1, [r7, #0]
 800703a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800703c:	79fb      	ldrb	r3, [r7, #7]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d105      	bne.n	800704e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	4907      	ldr	r1, [pc, #28]	; (8007064 <USBD_FS_ProductStrDescriptor+0x34>)
 8007046:	4808      	ldr	r0, [pc, #32]	; (8007068 <USBD_FS_ProductStrDescriptor+0x38>)
 8007048:	f7ff fe1e 	bl	8006c88 <USBD_GetString>
 800704c:	e004      	b.n	8007058 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	4904      	ldr	r1, [pc, #16]	; (8007064 <USBD_FS_ProductStrDescriptor+0x34>)
 8007052:	4805      	ldr	r0, [pc, #20]	; (8007068 <USBD_FS_ProductStrDescriptor+0x38>)
 8007054:	f7ff fe18 	bl	8006c88 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007058:	4b02      	ldr	r3, [pc, #8]	; (8007064 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20001494 	.word	0x20001494
 8007068:	080078a0 	.word	0x080078a0

0800706c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	4603      	mov	r3, r0
 8007074:	6039      	str	r1, [r7, #0]
 8007076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	4904      	ldr	r1, [pc, #16]	; (800708c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800707c:	4804      	ldr	r0, [pc, #16]	; (8007090 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800707e:	f7ff fe03 	bl	8006c88 <USBD_GetString>
  return USBD_StrDesc;
 8007082:	4b02      	ldr	r3, [pc, #8]	; (800708c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	20001494 	.word	0x20001494
 8007090:	080078b8 	.word	0x080078b8

08007094 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	4603      	mov	r3, r0
 800709c:	6039      	str	r1, [r7, #0]
 800709e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	221a      	movs	r2, #26
 80070a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80070a6:	f000 f843 	bl	8007130 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80070aa:	4b02      	ldr	r3, [pc, #8]	; (80070b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	200000e0 	.word	0x200000e0

080070b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	4603      	mov	r3, r0
 80070c0:	6039      	str	r1, [r7, #0]
 80070c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80070c4:	79fb      	ldrb	r3, [r7, #7]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d105      	bne.n	80070d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	4907      	ldr	r1, [pc, #28]	; (80070ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80070ce:	4808      	ldr	r0, [pc, #32]	; (80070f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070d0:	f7ff fdda 	bl	8006c88 <USBD_GetString>
 80070d4:	e004      	b.n	80070e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	4904      	ldr	r1, [pc, #16]	; (80070ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80070da:	4805      	ldr	r0, [pc, #20]	; (80070f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070dc:	f7ff fdd4 	bl	8006c88 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070e0:	4b02      	ldr	r3, [pc, #8]	; (80070ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20001494 	.word	0x20001494
 80070f0:	080078cc 	.word	0x080078cc

080070f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	6039      	str	r1, [r7, #0]
 80070fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d105      	bne.n	8007112 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	4907      	ldr	r1, [pc, #28]	; (8007128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800710a:	4808      	ldr	r0, [pc, #32]	; (800712c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800710c:	f7ff fdbc 	bl	8006c88 <USBD_GetString>
 8007110:	e004      	b.n	800711c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	4904      	ldr	r1, [pc, #16]	; (8007128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007116:	4805      	ldr	r0, [pc, #20]	; (800712c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007118:	f7ff fdb6 	bl	8006c88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800711c:	4b02      	ldr	r3, [pc, #8]	; (8007128 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20001494 	.word	0x20001494
 800712c:	080078d8 	.word	0x080078d8

08007130 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007136:	4b0f      	ldr	r3, [pc, #60]	; (8007174 <Get_SerialNum+0x44>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800713c:	4b0e      	ldr	r3, [pc, #56]	; (8007178 <Get_SerialNum+0x48>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007142:	4b0e      	ldr	r3, [pc, #56]	; (800717c <Get_SerialNum+0x4c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4413      	add	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d009      	beq.n	800716a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007156:	2208      	movs	r2, #8
 8007158:	4909      	ldr	r1, [pc, #36]	; (8007180 <Get_SerialNum+0x50>)
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 f814 	bl	8007188 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007160:	2204      	movs	r2, #4
 8007162:	4908      	ldr	r1, [pc, #32]	; (8007184 <Get_SerialNum+0x54>)
 8007164:	68b8      	ldr	r0, [r7, #8]
 8007166:	f000 f80f 	bl	8007188 <IntToUnicode>
  }
}
 800716a:	bf00      	nop
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	1fff7a10 	.word	0x1fff7a10
 8007178:	1fff7a14 	.word	0x1fff7a14
 800717c:	1fff7a18 	.word	0x1fff7a18
 8007180:	200000e2 	.word	0x200000e2
 8007184:	200000f2 	.word	0x200000f2

08007188 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	4613      	mov	r3, r2
 8007194:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007196:	2300      	movs	r3, #0
 8007198:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]
 800719e:	e027      	b.n	80071f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	0f1b      	lsrs	r3, r3, #28
 80071a4:	2b09      	cmp	r3, #9
 80071a6:	d80b      	bhi.n	80071c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	0f1b      	lsrs	r3, r3, #28
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
 80071b0:	005b      	lsls	r3, r3, #1
 80071b2:	4619      	mov	r1, r3
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	440b      	add	r3, r1
 80071b8:	3230      	adds	r2, #48	; 0x30
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	701a      	strb	r2, [r3, #0]
 80071be:	e00a      	b.n	80071d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	0f1b      	lsrs	r3, r3, #28
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	4619      	mov	r1, r3
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	440b      	add	r3, r1
 80071d0:	3237      	adds	r2, #55	; 0x37
 80071d2:	b2d2      	uxtb	r2, r2
 80071d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	3301      	adds	r3, #1
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	4413      	add	r3, r2
 80071e6:	2200      	movs	r2, #0
 80071e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	3301      	adds	r3, #1
 80071ee:	75fb      	strb	r3, [r7, #23]
 80071f0:	7dfa      	ldrb	r2, [r7, #23]
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d3d3      	bcc.n	80071a0 <IntToUnicode+0x18>
  }
}
 80071f8:	bf00      	nop
 80071fa:	bf00      	nop
 80071fc:	371c      	adds	r7, #28
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
	...

08007208 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b08a      	sub	sp, #40	; 0x28
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007210:	f107 0314 	add.w	r3, r7, #20
 8007214:	2200      	movs	r2, #0
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	605a      	str	r2, [r3, #4]
 800721a:	609a      	str	r2, [r3, #8]
 800721c:	60da      	str	r2, [r3, #12]
 800721e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007228:	d13a      	bne.n	80072a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800722a:	2300      	movs	r3, #0
 800722c:	613b      	str	r3, [r7, #16]
 800722e:	4b1e      	ldr	r3, [pc, #120]	; (80072a8 <HAL_PCD_MspInit+0xa0>)
 8007230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007232:	4a1d      	ldr	r2, [pc, #116]	; (80072a8 <HAL_PCD_MspInit+0xa0>)
 8007234:	f043 0301 	orr.w	r3, r3, #1
 8007238:	6313      	str	r3, [r2, #48]	; 0x30
 800723a:	4b1b      	ldr	r3, [pc, #108]	; (80072a8 <HAL_PCD_MspInit+0xa0>)
 800723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	613b      	str	r3, [r7, #16]
 8007244:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007246:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800724a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800724c:	2302      	movs	r3, #2
 800724e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007250:	2300      	movs	r3, #0
 8007252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007254:	2303      	movs	r3, #3
 8007256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007258:	230a      	movs	r3, #10
 800725a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800725c:	f107 0314 	add.w	r3, r7, #20
 8007260:	4619      	mov	r1, r3
 8007262:	4812      	ldr	r0, [pc, #72]	; (80072ac <HAL_PCD_MspInit+0xa4>)
 8007264:	f7f9 fd36 	bl	8000cd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007268:	4b0f      	ldr	r3, [pc, #60]	; (80072a8 <HAL_PCD_MspInit+0xa0>)
 800726a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800726c:	4a0e      	ldr	r2, [pc, #56]	; (80072a8 <HAL_PCD_MspInit+0xa0>)
 800726e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007272:	6353      	str	r3, [r2, #52]	; 0x34
 8007274:	2300      	movs	r3, #0
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	4b0b      	ldr	r3, [pc, #44]	; (80072a8 <HAL_PCD_MspInit+0xa0>)
 800727a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727c:	4a0a      	ldr	r2, [pc, #40]	; (80072a8 <HAL_PCD_MspInit+0xa0>)
 800727e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007282:	6453      	str	r3, [r2, #68]	; 0x44
 8007284:	4b08      	ldr	r3, [pc, #32]	; (80072a8 <HAL_PCD_MspInit+0xa0>)
 8007286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800728c:	60fb      	str	r3, [r7, #12]
 800728e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007290:	2200      	movs	r2, #0
 8007292:	2100      	movs	r1, #0
 8007294:	2043      	movs	r0, #67	; 0x43
 8007296:	f7f9 fce6 	bl	8000c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800729a:	2043      	movs	r0, #67	; 0x43
 800729c:	f7f9 fcff 	bl	8000c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80072a0:	bf00      	nop
 80072a2:	3728      	adds	r7, #40	; 0x28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	40023800 	.word	0x40023800
 80072ac:	40020000 	.word	0x40020000

080072b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80072c4:	4619      	mov	r1, r3
 80072c6:	4610      	mov	r0, r2
 80072c8:	f7fe fb7f 	bl	80059ca <USBD_LL_SetupStage>
}
 80072cc:	bf00      	nop
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	460b      	mov	r3, r1
 80072de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80072e6:	78fa      	ldrb	r2, [r7, #3]
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	4613      	mov	r3, r2
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	4413      	add	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	440b      	add	r3, r1
 80072f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	78fb      	ldrb	r3, [r7, #3]
 80072fc:	4619      	mov	r1, r3
 80072fe:	f7fe fbb9 	bl	8005a74 <USBD_LL_DataOutStage>
}
 8007302:	bf00      	nop
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b082      	sub	sp, #8
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	460b      	mov	r3, r1
 8007314:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800731c:	78fa      	ldrb	r2, [r7, #3]
 800731e:	6879      	ldr	r1, [r7, #4]
 8007320:	4613      	mov	r3, r2
 8007322:	00db      	lsls	r3, r3, #3
 8007324:	4413      	add	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	440b      	add	r3, r1
 800732a:	334c      	adds	r3, #76	; 0x4c
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	78fb      	ldrb	r3, [r7, #3]
 8007330:	4619      	mov	r1, r3
 8007332:	f7fe fc52 	bl	8005bda <USBD_LL_DataInStage>
}
 8007336:	bf00      	nop
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800734c:	4618      	mov	r0, r3
 800734e:	f7fe fd86 	bl	8005e5e <USBD_LL_SOF>
}
 8007352:	bf00      	nop
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b084      	sub	sp, #16
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007362:	2301      	movs	r3, #1
 8007364:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d102      	bne.n	8007374 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800736e:	2300      	movs	r3, #0
 8007370:	73fb      	strb	r3, [r7, #15]
 8007372:	e008      	b.n	8007386 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	2b02      	cmp	r3, #2
 800737a:	d102      	bne.n	8007382 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800737c:	2301      	movs	r3, #1
 800737e:	73fb      	strb	r3, [r7, #15]
 8007380:	e001      	b.n	8007386 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007382:	f7f9 f9d1 	bl	8000728 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800738c:	7bfa      	ldrb	r2, [r7, #15]
 800738e:	4611      	mov	r1, r2
 8007390:	4618      	mov	r0, r3
 8007392:	f7fe fd26 	bl	8005de2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800739c:	4618      	mov	r0, r3
 800739e:	f7fe fcce 	bl	8005d3e <USBD_LL_Reset>
}
 80073a2:	bf00      	nop
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
	...

080073ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7fe fd21 	bl	8005e02 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6812      	ldr	r2, [r2, #0]
 80073ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073d2:	f043 0301 	orr.w	r3, r3, #1
 80073d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d005      	beq.n	80073ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80073e0:	4b04      	ldr	r3, [pc, #16]	; (80073f4 <HAL_PCD_SuspendCallback+0x48>)
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	4a03      	ldr	r2, [pc, #12]	; (80073f4 <HAL_PCD_SuspendCallback+0x48>)
 80073e6:	f043 0306 	orr.w	r3, r3, #6
 80073ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80073ec:	bf00      	nop
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	e000ed00 	.word	0xe000ed00

080073f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007406:	4618      	mov	r0, r3
 8007408:	f7fe fd11 	bl	8005e2e <USBD_LL_Resume>
}
 800740c:	bf00      	nop
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007426:	78fa      	ldrb	r2, [r7, #3]
 8007428:	4611      	mov	r1, r2
 800742a:	4618      	mov	r0, r3
 800742c:	f7fe fd69 	bl	8005f02 <USBD_LL_IsoOUTIncomplete>
}
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800744a:	78fa      	ldrb	r2, [r7, #3]
 800744c:	4611      	mov	r1, r2
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe fd25 	bl	8005e9e <USBD_LL_IsoINIncomplete>
}
 8007454:	bf00      	nop
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800746a:	4618      	mov	r0, r3
 800746c:	f7fe fd7b 	bl	8005f66 <USBD_LL_DevConnected>
}
 8007470:	bf00      	nop
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007486:	4618      	mov	r0, r3
 8007488:	f7fe fd78 	bl	8005f7c <USBD_LL_DevDisconnected>
}
 800748c:	bf00      	nop
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d13c      	bne.n	800751e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80074a4:	4a20      	ldr	r2, [pc, #128]	; (8007528 <USBD_LL_Init+0x94>)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a1e      	ldr	r2, [pc, #120]	; (8007528 <USBD_LL_Init+0x94>)
 80074b0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074b4:	4b1c      	ldr	r3, [pc, #112]	; (8007528 <USBD_LL_Init+0x94>)
 80074b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80074ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80074bc:	4b1a      	ldr	r3, [pc, #104]	; (8007528 <USBD_LL_Init+0x94>)
 80074be:	2204      	movs	r2, #4
 80074c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80074c2:	4b19      	ldr	r3, [pc, #100]	; (8007528 <USBD_LL_Init+0x94>)
 80074c4:	2202      	movs	r2, #2
 80074c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074c8:	4b17      	ldr	r3, [pc, #92]	; (8007528 <USBD_LL_Init+0x94>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80074ce:	4b16      	ldr	r3, [pc, #88]	; (8007528 <USBD_LL_Init+0x94>)
 80074d0:	2202      	movs	r2, #2
 80074d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074d4:	4b14      	ldr	r3, [pc, #80]	; (8007528 <USBD_LL_Init+0x94>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80074da:	4b13      	ldr	r3, [pc, #76]	; (8007528 <USBD_LL_Init+0x94>)
 80074dc:	2200      	movs	r2, #0
 80074de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80074e0:	4b11      	ldr	r3, [pc, #68]	; (8007528 <USBD_LL_Init+0x94>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80074e6:	4b10      	ldr	r3, [pc, #64]	; (8007528 <USBD_LL_Init+0x94>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80074ec:	4b0e      	ldr	r3, [pc, #56]	; (8007528 <USBD_LL_Init+0x94>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80074f2:	480d      	ldr	r0, [pc, #52]	; (8007528 <USBD_LL_Init+0x94>)
 80074f4:	f7f9 ff02 	bl	80012fc <HAL_PCD_Init>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80074fe:	f7f9 f913 	bl	8000728 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007502:	2180      	movs	r1, #128	; 0x80
 8007504:	4808      	ldr	r0, [pc, #32]	; (8007528 <USBD_LL_Init+0x94>)
 8007506:	f7fb f95a 	bl	80027be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800750a:	2240      	movs	r2, #64	; 0x40
 800750c:	2100      	movs	r1, #0
 800750e:	4806      	ldr	r0, [pc, #24]	; (8007528 <USBD_LL_Init+0x94>)
 8007510:	f7fb f90e 	bl	8002730 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007514:	2280      	movs	r2, #128	; 0x80
 8007516:	2101      	movs	r1, #1
 8007518:	4803      	ldr	r0, [pc, #12]	; (8007528 <USBD_LL_Init+0x94>)
 800751a:	f7fb f909 	bl	8002730 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	20001694 	.word	0x20001694

0800752c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007542:	4618      	mov	r0, r3
 8007544:	f7f9 fff7 	bl	8001536 <HAL_PCD_Start>
 8007548:	4603      	mov	r3, r0
 800754a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800754c:	7bfb      	ldrb	r3, [r7, #15]
 800754e:	4618      	mov	r0, r3
 8007550:	f000 f942 	bl	80077d8 <USBD_Get_USB_Status>
 8007554:	4603      	mov	r3, r0
 8007556:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007558:	7bbb      	ldrb	r3, [r7, #14]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b084      	sub	sp, #16
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	4608      	mov	r0, r1
 800756c:	4611      	mov	r1, r2
 800756e:	461a      	mov	r2, r3
 8007570:	4603      	mov	r3, r0
 8007572:	70fb      	strb	r3, [r7, #3]
 8007574:	460b      	mov	r3, r1
 8007576:	70bb      	strb	r3, [r7, #2]
 8007578:	4613      	mov	r3, r2
 800757a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800757c:	2300      	movs	r3, #0
 800757e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800758a:	78bb      	ldrb	r3, [r7, #2]
 800758c:	883a      	ldrh	r2, [r7, #0]
 800758e:	78f9      	ldrb	r1, [r7, #3]
 8007590:	f7fa fcc8 	bl	8001f24 <HAL_PCD_EP_Open>
 8007594:	4603      	mov	r3, r0
 8007596:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	4618      	mov	r0, r3
 800759c:	f000 f91c 	bl	80077d8 <USBD_Get_USB_Status>
 80075a0:	4603      	mov	r3, r0
 80075a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b084      	sub	sp, #16
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	460b      	mov	r3, r1
 80075b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075c8:	78fa      	ldrb	r2, [r7, #3]
 80075ca:	4611      	mov	r1, r2
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fa fd11 	bl	8001ff4 <HAL_PCD_EP_Close>
 80075d2:	4603      	mov	r3, r0
 80075d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 f8fd 	bl	80077d8 <USBD_Get_USB_Status>
 80075de:	4603      	mov	r3, r0
 80075e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	460b      	mov	r3, r1
 80075f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007606:	78fa      	ldrb	r2, [r7, #3]
 8007608:	4611      	mov	r1, r2
 800760a:	4618      	mov	r0, r3
 800760c:	f7fa fde9 	bl	80021e2 <HAL_PCD_EP_SetStall>
 8007610:	4603      	mov	r3, r0
 8007612:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007614:	7bfb      	ldrb	r3, [r7, #15]
 8007616:	4618      	mov	r0, r3
 8007618:	f000 f8de 	bl	80077d8 <USBD_Get_USB_Status>
 800761c:	4603      	mov	r3, r0
 800761e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007620:	7bbb      	ldrb	r3, [r7, #14]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	460b      	mov	r3, r1
 8007634:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007644:	78fa      	ldrb	r2, [r7, #3]
 8007646:	4611      	mov	r1, r2
 8007648:	4618      	mov	r0, r3
 800764a:	f7fa fe2e 	bl	80022aa <HAL_PCD_EP_ClrStall>
 800764e:	4603      	mov	r3, r0
 8007650:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007652:	7bfb      	ldrb	r3, [r7, #15]
 8007654:	4618      	mov	r0, r3
 8007656:	f000 f8bf 	bl	80077d8 <USBD_Get_USB_Status>
 800765a:	4603      	mov	r3, r0
 800765c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800765e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800767a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800767c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007680:	2b00      	cmp	r3, #0
 8007682:	da0b      	bge.n	800769c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800768a:	68f9      	ldr	r1, [r7, #12]
 800768c:	4613      	mov	r3, r2
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	4413      	add	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	440b      	add	r3, r1
 8007696:	333e      	adds	r3, #62	; 0x3e
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	e00b      	b.n	80076b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800769c:	78fb      	ldrb	r3, [r7, #3]
 800769e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076a2:	68f9      	ldr	r1, [r7, #12]
 80076a4:	4613      	mov	r3, r2
 80076a6:	00db      	lsls	r3, r3, #3
 80076a8:	4413      	add	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	440b      	add	r3, r1
 80076ae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80076b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	460b      	mov	r3, r1
 80076ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076da:	78fa      	ldrb	r2, [r7, #3]
 80076dc:	4611      	mov	r1, r2
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fa fbfb 	bl	8001eda <HAL_PCD_SetAddress>
 80076e4:	4603      	mov	r3, r0
 80076e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 f874 	bl	80077d8 <USBD_Get_USB_Status>
 80076f0:	4603      	mov	r3, r0
 80076f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b086      	sub	sp, #24
 8007702:	af00      	add	r7, sp, #0
 8007704:	60f8      	str	r0, [r7, #12]
 8007706:	607a      	str	r2, [r7, #4]
 8007708:	603b      	str	r3, [r7, #0]
 800770a:	460b      	mov	r3, r1
 800770c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800771c:	7af9      	ldrb	r1, [r7, #11]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	f7fa fd14 	bl	800214e <HAL_PCD_EP_Transmit>
 8007726:	4603      	mov	r3, r0
 8007728:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	4618      	mov	r0, r3
 800772e:	f000 f853 	bl	80077d8 <USBD_Get_USB_Status>
 8007732:	4603      	mov	r3, r0
 8007734:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007736:	7dbb      	ldrb	r3, [r7, #22]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	607a      	str	r2, [r7, #4]
 800774a:	603b      	str	r3, [r7, #0]
 800774c:	460b      	mov	r3, r1
 800774e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800775e:	7af9      	ldrb	r1, [r7, #11]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	f7fa fc90 	bl	8002088 <HAL_PCD_EP_Receive>
 8007768:	4603      	mov	r3, r0
 800776a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800776c:	7dfb      	ldrb	r3, [r7, #23]
 800776e:	4618      	mov	r0, r3
 8007770:	f000 f832 	bl	80077d8 <USBD_Get_USB_Status>
 8007774:	4603      	mov	r3, r0
 8007776:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007778:	7dbb      	ldrb	r3, [r7, #22]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b082      	sub	sp, #8
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	460b      	mov	r3, r1
 800778c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007794:	78fa      	ldrb	r2, [r7, #3]
 8007796:	4611      	mov	r1, r2
 8007798:	4618      	mov	r0, r3
 800779a:	f7fa fcc0 	bl	800211e <HAL_PCD_EP_GetRxCount>
 800779e:	4603      	mov	r3, r0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80077b0:	4b03      	ldr	r3, [pc, #12]	; (80077c0 <USBD_static_malloc+0x18>)
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	20001ba0 	.word	0x20001ba0

080077c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]

}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077e6:	79fb      	ldrb	r3, [r7, #7]
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d817      	bhi.n	800781c <USBD_Get_USB_Status+0x44>
 80077ec:	a201      	add	r2, pc, #4	; (adr r2, 80077f4 <USBD_Get_USB_Status+0x1c>)
 80077ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f2:	bf00      	nop
 80077f4:	08007805 	.word	0x08007805
 80077f8:	0800780b 	.word	0x0800780b
 80077fc:	08007811 	.word	0x08007811
 8007800:	08007817 	.word	0x08007817
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	73fb      	strb	r3, [r7, #15]
    break;
 8007808:	e00b      	b.n	8007822 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800780a:	2303      	movs	r3, #3
 800780c:	73fb      	strb	r3, [r7, #15]
    break;
 800780e:	e008      	b.n	8007822 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007810:	2301      	movs	r3, #1
 8007812:	73fb      	strb	r3, [r7, #15]
    break;
 8007814:	e005      	b.n	8007822 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007816:	2303      	movs	r3, #3
 8007818:	73fb      	strb	r3, [r7, #15]
    break;
 800781a:	e002      	b.n	8007822 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800781c:	2303      	movs	r3, #3
 800781e:	73fb      	strb	r3, [r7, #15]
    break;
 8007820:	bf00      	nop
  }
  return usb_status;
 8007822:	7bfb      	ldrb	r3, [r7, #15]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <__libc_init_array>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	4d0d      	ldr	r5, [pc, #52]	; (8007868 <__libc_init_array+0x38>)
 8007834:	4c0d      	ldr	r4, [pc, #52]	; (800786c <__libc_init_array+0x3c>)
 8007836:	1b64      	subs	r4, r4, r5
 8007838:	10a4      	asrs	r4, r4, #2
 800783a:	2600      	movs	r6, #0
 800783c:	42a6      	cmp	r6, r4
 800783e:	d109      	bne.n	8007854 <__libc_init_array+0x24>
 8007840:	4d0b      	ldr	r5, [pc, #44]	; (8007870 <__libc_init_array+0x40>)
 8007842:	4c0c      	ldr	r4, [pc, #48]	; (8007874 <__libc_init_array+0x44>)
 8007844:	f000 f820 	bl	8007888 <_init>
 8007848:	1b64      	subs	r4, r4, r5
 800784a:	10a4      	asrs	r4, r4, #2
 800784c:	2600      	movs	r6, #0
 800784e:	42a6      	cmp	r6, r4
 8007850:	d105      	bne.n	800785e <__libc_init_array+0x2e>
 8007852:	bd70      	pop	{r4, r5, r6, pc}
 8007854:	f855 3b04 	ldr.w	r3, [r5], #4
 8007858:	4798      	blx	r3
 800785a:	3601      	adds	r6, #1
 800785c:	e7ee      	b.n	800783c <__libc_init_array+0xc>
 800785e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007862:	4798      	blx	r3
 8007864:	3601      	adds	r6, #1
 8007866:	e7f2      	b.n	800784e <__libc_init_array+0x1e>
 8007868:	08007908 	.word	0x08007908
 800786c:	08007908 	.word	0x08007908
 8007870:	08007908 	.word	0x08007908
 8007874:	0800790c 	.word	0x0800790c

08007878 <memset>:
 8007878:	4402      	add	r2, r0
 800787a:	4603      	mov	r3, r0
 800787c:	4293      	cmp	r3, r2
 800787e:	d100      	bne.n	8007882 <memset+0xa>
 8007880:	4770      	bx	lr
 8007882:	f803 1b01 	strb.w	r1, [r3], #1
 8007886:	e7f9      	b.n	800787c <memset+0x4>

08007888 <_init>:
 8007888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788a:	bf00      	nop
 800788c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788e:	bc08      	pop	{r3}
 8007890:	469e      	mov	lr, r3
 8007892:	4770      	bx	lr

08007894 <_fini>:
 8007894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007896:	bf00      	nop
 8007898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800789a:	bc08      	pop	{r3}
 800789c:	469e      	mov	lr, r3
 800789e:	4770      	bx	lr
