
Firmware_PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e04  080090f8  080090f8  000190f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009efc  08009efc  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  08009efc  08009efc  00019efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f04  08009f04  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f04  08009f04  00019f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f08  08009f08  00019f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08009f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020168  2**0
                  CONTENTS
 10 .bss          000020e0  20000168  20000168  00020168  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002248  20002248  00020168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015dfd  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003433  00000000  00000000  00035f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  000393c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001008  00000000  00000000  0003a510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002242b  00000000  00000000  0003b518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000174e6  00000000  00000000  0005d943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be9ab  00000000  00000000  00074e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001337d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b6c  00000000  00000000  00133824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080090e0 	.word	0x080090e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	080090e0 	.word	0x080090e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <display>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void display(uint8_t num)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	char buf[11];
	sprintf(buf, "%d       ", num);
 800057e:	79fa      	ldrb	r2, [r7, #7]
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	490a      	ldr	r1, [pc, #40]	; (80005b0 <display+0x3c>)
 8000586:	4618      	mov	r0, r3
 8000588:	f008 f93c 	bl	8008804 <siprintf>

	SSD1306_GotoXY (10,10);
 800058c:	210a      	movs	r1, #10
 800058e:	200a      	movs	r0, #10
 8000590:	f000 fae2 	bl	8000b58 <SSD1306_GotoXY>
	SSD1306_Puts (buf, &Font_11x18, 1);
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2201      	movs	r2, #1
 800059a:	4906      	ldr	r1, [pc, #24]	; (80005b4 <display+0x40>)
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fb71 	bl	8000c84 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80005a2:	f000 fa33 	bl	8000a0c <SSD1306_UpdateScreen>
}
 80005a6:	bf00      	nop
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	080090f8 	.word	0x080090f8
 80005b4:	20000000 	.word	0x20000000

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fd7f 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f845 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f907 	bl	80007d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ca:	f000 f8ad 	bl	8000728 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80005ce:	f000 f8d9 	bl	8000784 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80005d2:	f007 fbf1 	bl	8007db8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();
 80005d6:	f000 f955 	bl	8000884 <SSD1306_Init>

  SSD1306_GotoXY (10,10);
 80005da:	210a      	movs	r1, #10
 80005dc:	200a      	movs	r0, #10
 80005de:	f000 fabb 	bl	8000b58 <SSD1306_GotoXY>
  SSD1306_Puts ("Welcome", &Font_11x18, 1);
 80005e2:	2201      	movs	r2, #1
 80005e4:	4917      	ldr	r1, [pc, #92]	; (8000644 <main+0x8c>)
 80005e6:	4818      	ldr	r0, [pc, #96]	; (8000648 <main+0x90>)
 80005e8:	f000 fb4c 	bl	8000c84 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80005ec:	f000 fa0e 	bl	8000a0c <SSD1306_UpdateScreen>

  HAL_Delay(1500);
 80005f0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005f4:	f000 fdd6 	bl	80011a4 <HAL_Delay>

  uint8_t i = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN 3 */

//	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
//	 HAL_Delay(500);

	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2108      	movs	r1, #8
 8000600:	4812      	ldr	r0, [pc, #72]	; (800064c <main+0x94>)
 8000602:	f001 f8a1 	bl	8001748 <HAL_GPIO_WritePin>
	 HAL_Delay(500);
 8000606:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060a:	f000 fdcb 	bl	80011a4 <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2108      	movs	r1, #8
 8000612:	480e      	ldr	r0, [pc, #56]	; (800064c <main+0x94>)
 8000614:	f001 f898 	bl	8001748 <HAL_GPIO_WritePin>
	 display(i++);
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	71fa      	strb	r2, [r7, #7]
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ffa8 	bl	8000574 <display>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	2110      	movs	r1, #16
 8000628:	4808      	ldr	r0, [pc, #32]	; (800064c <main+0x94>)
 800062a:	f001 f88d 	bl	8001748 <HAL_GPIO_WritePin>
	 HAL_Delay(500);
 800062e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000632:	f000 fdb7 	bl	80011a4 <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2110      	movs	r1, #16
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <main+0x94>)
 800063c:	f001 f884 	bl	8001748 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000640:	e7dc      	b.n	80005fc <main+0x44>
 8000642:	bf00      	nop
 8000644:	20000000 	.word	0x20000000
 8000648:	08009104 	.word	0x08009104
 800064c:	40020000 	.word	0x40020000

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f008 f8c8 	bl	80087f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b29      	ldr	r3, [pc, #164]	; (8000720 <SystemClock_Config+0xd0>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a28      	ldr	r2, [pc, #160]	; (8000720 <SystemClock_Config+0xd0>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b26      	ldr	r3, [pc, #152]	; (8000720 <SystemClock_Config+0xd0>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b23      	ldr	r3, [pc, #140]	; (8000724 <SystemClock_Config+0xd4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a22      	ldr	r2, [pc, #136]	; (8000724 <SystemClock_Config+0xd4>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b20      	ldr	r3, [pc, #128]	; (8000724 <SystemClock_Config+0xd4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006ac:	2303      	movs	r3, #3
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b6:	2301      	movs	r3, #1
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	2310      	movs	r3, #16
 80006bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80006c8:	230f      	movs	r3, #15
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006cc:	2390      	movs	r3, #144	; 0x90
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006d4:	2305      	movs	r3, #5
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 f843 	bl	8003768 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006e8:	f000 f8c6 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f003 faa6 	bl	8003c58 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000712:	f000 f8b1 	bl	8000878 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	; 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_I2C1_Init+0x50>)
 800072e:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_I2C1_Init+0x54>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_I2C1_Init+0x50>)
 8000734:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_I2C1_Init+0x58>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_I2C1_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_I2C1_Init+0x50>)
 8000746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_I2C1_Init+0x50>)
 8000766:	f001 f809 	bl	800177c <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 f882 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000184 	.word	0x20000184
 800077c:	40005400 	.word	0x40005400
 8000780:	00061a80 	.word	0x00061a80

08000784 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_USART3_UART_Init+0x4c>)
 800078a:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <MX_USART3_UART_Init+0x50>)
 800078c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_USART3_UART_Init+0x4c>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USART3_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USART3_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USART3_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USART3_UART_Init+0x4c>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USART3_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USART3_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_USART3_UART_Init+0x4c>)
 80007bc:	f003 fc6a 	bl	8004094 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007c6:	f000 f857 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200001d8 	.word	0x200001d8
 80007d4:	40004800 	.word	0x40004800

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_GPIO_Init+0x98>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a1e      	ldr	r2, [pc, #120]	; (8000870 <MX_GPIO_Init+0x98>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_GPIO_Init+0x98>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <MX_GPIO_Init+0x98>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a17      	ldr	r2, [pc, #92]	; (8000870 <MX_GPIO_Init+0x98>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <MX_GPIO_Init+0x98>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_GPIO_Init+0x98>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a10      	ldr	r2, [pc, #64]	; (8000870 <MX_GPIO_Init+0x98>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_GPIO_Init+0x98>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2118      	movs	r1, #24
 8000846:	480b      	ldr	r0, [pc, #44]	; (8000874 <MX_GPIO_Init+0x9c>)
 8000848:	f000 ff7e 	bl	8001748 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800084c:	2318      	movs	r3, #24
 800084e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	4619      	mov	r1, r3
 8000862:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_GPIO_Init+0x9c>)
 8000864:	f000 fdd4 	bl	8001410 <HAL_GPIO_Init>

}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	40020000 	.word	0x40020000

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800088a:	f000 fa21 	bl	8000cd0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800088e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000892:	2201      	movs	r2, #1
 8000894:	2178      	movs	r1, #120	; 0x78
 8000896:	485b      	ldr	r0, [pc, #364]	; (8000a04 <SSD1306_Init+0x180>)
 8000898:	f001 f9b2 	bl	8001c00 <HAL_I2C_IsDeviceReady>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e0a9      	b.n	80009fa <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80008a6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80008aa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008ac:	e002      	b.n	80008b4 <SSD1306_Init+0x30>
		p--;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f9      	bne.n	80008ae <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80008ba:	22ae      	movs	r2, #174	; 0xae
 80008bc:	2100      	movs	r1, #0
 80008be:	2078      	movs	r0, #120	; 0x78
 80008c0:	f000 fa82 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80008c4:	2220      	movs	r2, #32
 80008c6:	2100      	movs	r1, #0
 80008c8:	2078      	movs	r0, #120	; 0x78
 80008ca:	f000 fa7d 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80008ce:	2210      	movs	r2, #16
 80008d0:	2100      	movs	r1, #0
 80008d2:	2078      	movs	r0, #120	; 0x78
 80008d4:	f000 fa78 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80008d8:	22b0      	movs	r2, #176	; 0xb0
 80008da:	2100      	movs	r1, #0
 80008dc:	2078      	movs	r0, #120	; 0x78
 80008de:	f000 fa73 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80008e2:	22c8      	movs	r2, #200	; 0xc8
 80008e4:	2100      	movs	r1, #0
 80008e6:	2078      	movs	r0, #120	; 0x78
 80008e8:	f000 fa6e 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	2078      	movs	r0, #120	; 0x78
 80008f2:	f000 fa69 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80008f6:	2210      	movs	r2, #16
 80008f8:	2100      	movs	r1, #0
 80008fa:	2078      	movs	r0, #120	; 0x78
 80008fc:	f000 fa64 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000900:	2240      	movs	r2, #64	; 0x40
 8000902:	2100      	movs	r1, #0
 8000904:	2078      	movs	r0, #120	; 0x78
 8000906:	f000 fa5f 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800090a:	2281      	movs	r2, #129	; 0x81
 800090c:	2100      	movs	r1, #0
 800090e:	2078      	movs	r0, #120	; 0x78
 8000910:	f000 fa5a 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000914:	22ff      	movs	r2, #255	; 0xff
 8000916:	2100      	movs	r1, #0
 8000918:	2078      	movs	r0, #120	; 0x78
 800091a:	f000 fa55 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800091e:	22a1      	movs	r2, #161	; 0xa1
 8000920:	2100      	movs	r1, #0
 8000922:	2078      	movs	r0, #120	; 0x78
 8000924:	f000 fa50 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000928:	22a6      	movs	r2, #166	; 0xa6
 800092a:	2100      	movs	r1, #0
 800092c:	2078      	movs	r0, #120	; 0x78
 800092e:	f000 fa4b 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000932:	22a8      	movs	r2, #168	; 0xa8
 8000934:	2100      	movs	r1, #0
 8000936:	2078      	movs	r0, #120	; 0x78
 8000938:	f000 fa46 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800093c:	223f      	movs	r2, #63	; 0x3f
 800093e:	2100      	movs	r1, #0
 8000940:	2078      	movs	r0, #120	; 0x78
 8000942:	f000 fa41 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000946:	22a4      	movs	r2, #164	; 0xa4
 8000948:	2100      	movs	r1, #0
 800094a:	2078      	movs	r0, #120	; 0x78
 800094c:	f000 fa3c 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000950:	22d3      	movs	r2, #211	; 0xd3
 8000952:	2100      	movs	r1, #0
 8000954:	2078      	movs	r0, #120	; 0x78
 8000956:	f000 fa37 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	2078      	movs	r0, #120	; 0x78
 8000960:	f000 fa32 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000964:	22d5      	movs	r2, #213	; 0xd5
 8000966:	2100      	movs	r1, #0
 8000968:	2078      	movs	r0, #120	; 0x78
 800096a:	f000 fa2d 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800096e:	22f0      	movs	r2, #240	; 0xf0
 8000970:	2100      	movs	r1, #0
 8000972:	2078      	movs	r0, #120	; 0x78
 8000974:	f000 fa28 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000978:	22d9      	movs	r2, #217	; 0xd9
 800097a:	2100      	movs	r1, #0
 800097c:	2078      	movs	r0, #120	; 0x78
 800097e:	f000 fa23 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000982:	2222      	movs	r2, #34	; 0x22
 8000984:	2100      	movs	r1, #0
 8000986:	2078      	movs	r0, #120	; 0x78
 8000988:	f000 fa1e 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800098c:	22da      	movs	r2, #218	; 0xda
 800098e:	2100      	movs	r1, #0
 8000990:	2078      	movs	r0, #120	; 0x78
 8000992:	f000 fa19 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000996:	2212      	movs	r2, #18
 8000998:	2100      	movs	r1, #0
 800099a:	2078      	movs	r0, #120	; 0x78
 800099c:	f000 fa14 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80009a0:	22db      	movs	r2, #219	; 0xdb
 80009a2:	2100      	movs	r1, #0
 80009a4:	2078      	movs	r0, #120	; 0x78
 80009a6:	f000 fa0f 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80009aa:	2220      	movs	r2, #32
 80009ac:	2100      	movs	r1, #0
 80009ae:	2078      	movs	r0, #120	; 0x78
 80009b0:	f000 fa0a 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80009b4:	228d      	movs	r2, #141	; 0x8d
 80009b6:	2100      	movs	r1, #0
 80009b8:	2078      	movs	r0, #120	; 0x78
 80009ba:	f000 fa05 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80009be:	2214      	movs	r2, #20
 80009c0:	2100      	movs	r1, #0
 80009c2:	2078      	movs	r0, #120	; 0x78
 80009c4:	f000 fa00 	bl	8000dc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80009c8:	22af      	movs	r2, #175	; 0xaf
 80009ca:	2100      	movs	r1, #0
 80009cc:	2078      	movs	r0, #120	; 0x78
 80009ce:	f000 f9fb 	bl	8000dc8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80009d2:	222e      	movs	r2, #46	; 0x2e
 80009d4:	2100      	movs	r1, #0
 80009d6:	2078      	movs	r0, #120	; 0x78
 80009d8:	f000 f9f6 	bl	8000dc8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80009dc:	2000      	movs	r0, #0
 80009de:	f000 f843 	bl	8000a68 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80009e2:	f000 f813 	bl	8000a0c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <SSD1306_Init+0x184>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <SSD1306_Init+0x184>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <SSD1306_Init+0x184>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80009f8:	2301      	movs	r3, #1
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000184 	.word	0x20000184
 8000a08:	2000061c 	.word	0x2000061c

08000a0c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000a12:	2300      	movs	r3, #0
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	e01d      	b.n	8000a54 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	3b50      	subs	r3, #80	; 0x50
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	461a      	mov	r2, r3
 8000a20:	2100      	movs	r1, #0
 8000a22:	2078      	movs	r0, #120	; 0x78
 8000a24:	f000 f9d0 	bl	8000dc8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2078      	movs	r0, #120	; 0x78
 8000a2e:	f000 f9cb 	bl	8000dc8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000a32:	2210      	movs	r2, #16
 8000a34:	2100      	movs	r1, #0
 8000a36:	2078      	movs	r0, #120	; 0x78
 8000a38:	f000 f9c6 	bl	8000dc8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	01db      	lsls	r3, r3, #7
 8000a40:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <SSD1306_UpdateScreen+0x58>)
 8000a42:	441a      	add	r2, r3
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	2140      	movs	r1, #64	; 0x40
 8000a48:	2078      	movs	r0, #120	; 0x78
 8000a4a:	f000 f957 	bl	8000cfc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	3301      	adds	r3, #1
 8000a52:	71fb      	strb	r3, [r7, #7]
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b07      	cmp	r3, #7
 8000a58:	d9de      	bls.n	8000a18 <SSD1306_UpdateScreen+0xc>
	}
}
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	2000021c 	.word	0x2000021c

08000a68 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d101      	bne.n	8000a7c <SSD1306_Fill+0x14>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	e000      	b.n	8000a7e <SSD1306_Fill+0x16>
 8000a7c:	23ff      	movs	r3, #255	; 0xff
 8000a7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a82:	4619      	mov	r1, r3
 8000a84:	4803      	ldr	r0, [pc, #12]	; (8000a94 <SSD1306_Fill+0x2c>)
 8000a86:	f007 feb5 	bl	80087f4 <memset>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2000021c 	.word	0x2000021c

08000a98 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80fb      	strh	r3, [r7, #6]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	80bb      	strh	r3, [r7, #4]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	70fb      	strb	r3, [r7, #3]
	if (
 8000aaa:	88fb      	ldrh	r3, [r7, #6]
 8000aac:	2b7f      	cmp	r3, #127	; 0x7f
 8000aae:	d848      	bhi.n	8000b42 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000ab0:	88bb      	ldrh	r3, [r7, #4]
 8000ab2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ab4:	d845      	bhi.n	8000b42 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000ab6:	4b26      	ldr	r3, [pc, #152]	; (8000b50 <SSD1306_DrawPixel+0xb8>)
 8000ab8:	791b      	ldrb	r3, [r3, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d006      	beq.n	8000acc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000abe:	78fb      	ldrb	r3, [r7, #3]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	bf0c      	ite	eq
 8000ac4:	2301      	moveq	r3, #1
 8000ac6:	2300      	movne	r3, #0
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d11a      	bne.n	8000b08 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ad2:	88fa      	ldrh	r2, [r7, #6]
 8000ad4:	88bb      	ldrh	r3, [r7, #4]
 8000ad6:	08db      	lsrs	r3, r3, #3
 8000ad8:	b298      	uxth	r0, r3
 8000ada:	4603      	mov	r3, r0
 8000adc:	01db      	lsls	r3, r3, #7
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <SSD1306_DrawPixel+0xbc>)
 8000ae2:	5cd3      	ldrb	r3, [r2, r3]
 8000ae4:	b25a      	sxtb	r2, r3
 8000ae6:	88bb      	ldrh	r3, [r7, #4]
 8000ae8:	f003 0307 	and.w	r3, r3, #7
 8000aec:	2101      	movs	r1, #1
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b259      	sxtb	r1, r3
 8000af8:	88fa      	ldrh	r2, [r7, #6]
 8000afa:	4603      	mov	r3, r0
 8000afc:	01db      	lsls	r3, r3, #7
 8000afe:	4413      	add	r3, r2
 8000b00:	b2c9      	uxtb	r1, r1
 8000b02:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <SSD1306_DrawPixel+0xbc>)
 8000b04:	54d1      	strb	r1, [r2, r3]
 8000b06:	e01d      	b.n	8000b44 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b08:	88fa      	ldrh	r2, [r7, #6]
 8000b0a:	88bb      	ldrh	r3, [r7, #4]
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	b298      	uxth	r0, r3
 8000b10:	4603      	mov	r3, r0
 8000b12:	01db      	lsls	r3, r3, #7
 8000b14:	4413      	add	r3, r2
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <SSD1306_DrawPixel+0xbc>)
 8000b18:	5cd3      	ldrb	r3, [r2, r3]
 8000b1a:	b25a      	sxtb	r2, r3
 8000b1c:	88bb      	ldrh	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	2101      	movs	r1, #1
 8000b24:	fa01 f303 	lsl.w	r3, r1, r3
 8000b28:	b25b      	sxtb	r3, r3
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	b25b      	sxtb	r3, r3
 8000b2e:	4013      	ands	r3, r2
 8000b30:	b259      	sxtb	r1, r3
 8000b32:	88fa      	ldrh	r2, [r7, #6]
 8000b34:	4603      	mov	r3, r0
 8000b36:	01db      	lsls	r3, r3, #7
 8000b38:	4413      	add	r3, r2
 8000b3a:	b2c9      	uxtb	r1, r1
 8000b3c:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <SSD1306_DrawPixel+0xbc>)
 8000b3e:	54d1      	strb	r1, [r2, r3]
 8000b40:	e000      	b.n	8000b44 <SSD1306_DrawPixel+0xac>
		return;
 8000b42:	bf00      	nop
	}
}
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	2000061c 	.word	0x2000061c
 8000b54:	2000021c 	.word	0x2000021c

08000b58 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	460a      	mov	r2, r1
 8000b62:	80fb      	strh	r3, [r7, #6]
 8000b64:	4613      	mov	r3, r2
 8000b66:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000b68:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <SSD1306_GotoXY+0x28>)
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000b6e:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <SSD1306_GotoXY+0x28>)
 8000b70:	88bb      	ldrh	r3, [r7, #4]
 8000b72:	8053      	strh	r3, [r2, #2]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	2000061c 	.word	0x2000061c

08000b84 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	71fb      	strb	r3, [r7, #7]
 8000b90:	4613      	mov	r3, r2
 8000b92:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b94:	4b3a      	ldr	r3, [pc, #232]	; (8000c80 <SSD1306_Putc+0xfc>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
	if (
 8000ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ba2:	dc07      	bgt.n	8000bb4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000ba4:	4b36      	ldr	r3, [pc, #216]	; (8000c80 <SSD1306_Putc+0xfc>)
 8000ba6:	885b      	ldrh	r3, [r3, #2]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	785b      	ldrb	r3, [r3, #1]
 8000bae:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000bb0:	2b3f      	cmp	r3, #63	; 0x3f
 8000bb2:	dd01      	ble.n	8000bb8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	e05e      	b.n	8000c76 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	e04b      	b.n	8000c56 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	3b20      	subs	r3, #32
 8000bc6:	6839      	ldr	r1, [r7, #0]
 8000bc8:	7849      	ldrb	r1, [r1, #1]
 8000bca:	fb01 f303 	mul.w	r3, r1, r3
 8000bce:	4619      	mov	r1, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	440b      	add	r3, r1
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	4413      	add	r3, r2
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	e030      	b.n	8000c44 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d010      	beq.n	8000c14 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000bf2:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <SSD1306_Putc+0xfc>)
 8000bf4:	881a      	ldrh	r2, [r3, #0]
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	4413      	add	r3, r2
 8000bfc:	b298      	uxth	r0, r3
 8000bfe:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <SSD1306_Putc+0xfc>)
 8000c00:	885a      	ldrh	r2, [r3, #2]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	4413      	add	r3, r2
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	79ba      	ldrb	r2, [r7, #6]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f7ff ff43 	bl	8000a98 <SSD1306_DrawPixel>
 8000c12:	e014      	b.n	8000c3e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <SSD1306_Putc+0xfc>)
 8000c16:	881a      	ldrh	r2, [r3, #0]
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b298      	uxth	r0, r3
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <SSD1306_Putc+0xfc>)
 8000c22:	885a      	ldrh	r2, [r3, #2]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	4413      	add	r3, r2
 8000c2a:	b299      	uxth	r1, r3
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	bf0c      	ite	eq
 8000c32:	2301      	moveq	r3, #1
 8000c34:	2300      	movne	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	461a      	mov	r2, r3
 8000c3a:	f7ff ff2d 	bl	8000a98 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	3301      	adds	r3, #1
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d3c8      	bcc.n	8000be2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	3301      	adds	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	785b      	ldrb	r3, [r3, #1]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d3ad      	bcc.n	8000bbe <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <SSD1306_Putc+0xfc>)
 8000c64:	881a      	ldrh	r2, [r3, #0]
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <SSD1306_Putc+0xfc>)
 8000c72:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000c74:	79fb      	ldrb	r3, [r7, #7]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000061c 	.word	0x2000061c

08000c84 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000c92:	e012      	b.n	8000cba <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	79fa      	ldrb	r2, [r7, #7]
 8000c9a:	68b9      	ldr	r1, [r7, #8]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff71 	bl	8000b84 <SSD1306_Putc>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d002      	beq.n	8000cb4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	e008      	b.n	8000cc6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1e8      	bne.n	8000c94 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <ssd1306_I2C_Init+0x28>)
 8000cd8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000cda:	e002      	b.n	8000ce2 <ssd1306_I2C_Init+0x12>
		p--;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1f9      	bne.n	8000cdc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	0003d090 	.word	0x0003d090

08000cfc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b0c7      	sub	sp, #284	; 0x11c
 8000d00:	af02      	add	r7, sp, #8
 8000d02:	4604      	mov	r4, r0
 8000d04:	4608      	mov	r0, r1
 8000d06:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000d0a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000d0e:	600a      	str	r2, [r1, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d16:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000d1a:	4622      	mov	r2, r4
 8000d1c:	701a      	strb	r2, [r3, #0]
 8000d1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d22:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000d26:	4602      	mov	r2, r0
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d32:	460a      	mov	r2, r1
 8000d34:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000d36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000d3e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d42:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000d46:	7812      	ldrb	r2, [r2, #0]
 8000d48:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000d50:	e015      	b.n	8000d7e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000d52:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d56:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d5a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000d5e:	6812      	ldr	r2, [r2, #0]
 8000d60:	441a      	add	r2, r3
 8000d62:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d66:	3301      	adds	r3, #1
 8000d68:	7811      	ldrb	r1, [r2, #0]
 8000d6a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d6e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000d72:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000d74:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d78:	3301      	adds	r3, #1
 8000d7a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000d7e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d88:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000d8c:	8812      	ldrh	r2, [r2, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d8df      	bhi.n	8000d52 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000d92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d96:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b299      	uxth	r1, r3
 8000d9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000da2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	f107 020c 	add.w	r2, r7, #12
 8000db0:	200a      	movs	r0, #10
 8000db2:	9000      	str	r0, [sp, #0]
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <ssd1306_I2C_WriteMulti+0xc8>)
 8000db6:	f000 fe25 	bl	8001a04 <HAL_I2C_Master_Transmit>
}
 8000dba:	bf00      	nop
 8000dbc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd90      	pop	{r4, r7, pc}
 8000dc4:	20000184 	.word	0x20000184

08000dc8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af02      	add	r7, sp, #8
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	71bb      	strb	r3, [r7, #6]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000dde:	797b      	ldrb	r3, [r7, #5]
 8000de0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	b299      	uxth	r1, r3
 8000de6:	f107 020c 	add.w	r2, r7, #12
 8000dea:	230a      	movs	r3, #10
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	2302      	movs	r3, #2
 8000df0:	4803      	ldr	r0, [pc, #12]	; (8000e00 <ssd1306_I2C_Write+0x38>)
 8000df2:	f000 fe07 	bl	8001a04 <HAL_I2C_Master_Transmit>
}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000184 	.word	0x20000184

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800

08000e54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a19      	ldr	r2, [pc, #100]	; (8000ed8 <HAL_I2C_MspInit+0x84>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d12b      	bne.n	8000ece <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <HAL_I2C_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a17      	ldr	r2, [pc, #92]	; (8000edc <HAL_I2C_MspInit+0x88>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_I2C_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e92:	23c0      	movs	r3, #192	; 0xc0
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e96:	2312      	movs	r3, #18
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <HAL_I2C_MspInit+0x8c>)
 8000eae:	f000 faaf 	bl	8001410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_I2C_MspInit+0x88>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <HAL_I2C_MspInit+0x88>)
 8000ebc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_I2C_MspInit+0x88>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	; 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40005400 	.word	0x40005400
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020400 	.word	0x40020400

08000ee4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_UART_MspInit+0x84>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d12c      	bne.n	8000f60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f50:	2307      	movs	r3, #7
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <HAL_UART_MspInit+0x8c>)
 8000f5c:	f000 fa58 	bl	8001410 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	; 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40004800 	.word	0x40004800
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020400 	.word	0x40020400

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <NMI_Handler+0x4>

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler+0x4>

08000f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc0:	f000 f8d0 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <OTG_FS_IRQHandler+0x10>)
 8000fce:	f001 fa9e 	bl	800250e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20001b0c 	.word	0x20001b0c

08000fdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe4:	4a14      	ldr	r2, [pc, #80]	; (8001038 <_sbrk+0x5c>)
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <_sbrk+0x60>)
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d102      	bne.n	8000ffe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <_sbrk+0x64>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <_sbrk+0x68>)
 8000ffc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	429a      	cmp	r2, r3
 800100a:	d207      	bcs.n	800101c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800100c:	f007 fbc8 	bl	80087a0 <__errno>
 8001010:	4603      	mov	r3, r0
 8001012:	220c      	movs	r2, #12
 8001014:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	e009      	b.n	8001030 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <_sbrk+0x64>)
 800102c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20020000 	.word	0x20020000
 800103c:	00000400 	.word	0x00000400
 8001040:	20000624 	.word	0x20000624
 8001044:	20002248 	.word	0x20002248

08001048 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <SystemInit+0x20>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <SystemInit+0x20>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800106c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001072:	490e      	ldr	r1, [pc, #56]	; (80010ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001074:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001088:	4c0b      	ldr	r4, [pc, #44]	; (80010b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001096:	f7ff ffd7 	bl	8001048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109a:	f007 fb87 	bl	80087ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109e:	f7ff fa8b 	bl	80005b8 <main>
  bx  lr    
 80010a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 80010b0:	08009f0c 	.word	0x08009f0c
  ldr r2, =_sbss
 80010b4:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80010b8:	20002248 	.word	0x20002248

080010bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC_IRQHandler>
	...

080010c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <HAL_Init+0x40>)
 80010ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <HAL_Init+0x40>)
 80010d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_Init+0x40>)
 80010e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e8:	2003      	movs	r0, #3
 80010ea:	f000 f94f 	bl	800138c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ee:	200f      	movs	r0, #15
 80010f0:	f000 f808 	bl	8001104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f4:	f7ff fe86 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023c00 	.word	0x40023c00

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_InitTick+0x54>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_InitTick+0x58>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	fbb3 f3f1 	udiv	r3, r3, r1
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f967 	bl	80013f6 <HAL_SYSTICK_Config>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e00e      	b.n	8001150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d80a      	bhi.n	800114e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f000 f92f 	bl	80013a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001144:	4a06      	ldr	r2, [pc, #24]	; (8001160 <HAL_InitTick+0x5c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000008 	.word	0x20000008
 800115c:	20000010 	.word	0x20000010
 8001160:	2000000c 	.word	0x2000000c

08001164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x20>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x24>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <HAL_IncTick+0x24>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000010 	.word	0x20000010
 8001188:	20000628 	.word	0x20000628

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000628 	.word	0x20000628

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff ffee 	bl	800118c <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011bc:	d005      	beq.n	80011ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_Delay+0x44>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ca:	bf00      	nop
 80011cc:	f7ff ffde 	bl	800118c <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d8f7      	bhi.n	80011cc <HAL_Delay+0x28>
  {
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000010 	.word	0x20000010

080011ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001208:	4013      	ands	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <__NVIC_GetPriorityGrouping+0x18>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0307 	and.w	r3, r3, #7
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	2b00      	cmp	r3, #0
 8001260:	db0b      	blt.n	800127a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	f003 021f 	and.w	r2, r3, #31
 8001268:	4907      	ldr	r1, [pc, #28]	; (8001288 <__NVIC_EnableIRQ+0x38>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	2001      	movs	r0, #1
 8001272:	fa00 f202 	lsl.w	r2, r0, r2
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000e100 	.word	0xe000e100

0800128c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	db0a      	blt.n	80012b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	490c      	ldr	r1, [pc, #48]	; (80012d8 <__NVIC_SetPriority+0x4c>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	0112      	lsls	r2, r2, #4
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	440b      	add	r3, r1
 80012b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b4:	e00a      	b.n	80012cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4908      	ldr	r1, [pc, #32]	; (80012dc <__NVIC_SetPriority+0x50>)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	3b04      	subs	r3, #4
 80012c4:	0112      	lsls	r2, r2, #4
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	440b      	add	r3, r1
 80012ca:	761a      	strb	r2, [r3, #24]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000e100 	.word	0xe000e100
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f1c3 0307 	rsb	r3, r3, #7
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	bf28      	it	cs
 80012fe:	2304      	movcs	r3, #4
 8001300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3304      	adds	r3, #4
 8001306:	2b06      	cmp	r3, #6
 8001308:	d902      	bls.n	8001310 <NVIC_EncodePriority+0x30>
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3b03      	subs	r3, #3
 800130e:	e000      	b.n	8001312 <NVIC_EncodePriority+0x32>
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	f04f 32ff 	mov.w	r2, #4294967295
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43da      	mvns	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43d9      	mvns	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	4313      	orrs	r3, r2
         );
}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001358:	d301      	bcc.n	800135e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135a:	2301      	movs	r3, #1
 800135c:	e00f      	b.n	800137e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <SysTick_Config+0x40>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001366:	210f      	movs	r1, #15
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f7ff ff8e 	bl	800128c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <SysTick_Config+0x40>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <SysTick_Config+0x40>)
 8001378:	2207      	movs	r2, #7
 800137a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	e000e010 	.word	0xe000e010

0800138c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ff29 	bl	80011ec <__NVIC_SetPriorityGrouping>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b4:	f7ff ff3e 	bl	8001234 <__NVIC_GetPriorityGrouping>
 80013b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff8e 	bl	80012e0 <NVIC_EncodePriority>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff5d 	bl	800128c <__NVIC_SetPriority>
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff31 	bl	8001250 <__NVIC_EnableIRQ>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ffa2 	bl	8001348 <SysTick_Config>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	e16b      	b.n	8001704 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800142c:	2201      	movs	r2, #1
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	429a      	cmp	r2, r3
 8001446:	f040 815a 	bne.w	80016fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d005      	beq.n	8001462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145e:	2b02      	cmp	r3, #2
 8001460:	d130      	bne.n	80014c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001498:	2201      	movs	r2, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 0201 	and.w	r2, r3, #1
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d017      	beq.n	8001500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d123      	bne.n	8001554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	08da      	lsrs	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3208      	adds	r2, #8
 8001514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	08da      	lsrs	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3208      	adds	r2, #8
 800154e:	69b9      	ldr	r1, [r7, #24]
 8001550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	2203      	movs	r2, #3
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0203 	and.w	r2, r3, #3
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80b4 	beq.w	80016fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b60      	ldr	r3, [pc, #384]	; (800171c <HAL_GPIO_Init+0x30c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	4a5f      	ldr	r2, [pc, #380]	; (800171c <HAL_GPIO_Init+0x30c>)
 80015a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44
 80015a6:	4b5d      	ldr	r3, [pc, #372]	; (800171c <HAL_GPIO_Init+0x30c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015b2:	4a5b      	ldr	r2, [pc, #364]	; (8001720 <HAL_GPIO_Init+0x310>)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	3302      	adds	r3, #2
 80015ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	220f      	movs	r2, #15
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a52      	ldr	r2, [pc, #328]	; (8001724 <HAL_GPIO_Init+0x314>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d02b      	beq.n	8001636 <HAL_GPIO_Init+0x226>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a51      	ldr	r2, [pc, #324]	; (8001728 <HAL_GPIO_Init+0x318>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d025      	beq.n	8001632 <HAL_GPIO_Init+0x222>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a50      	ldr	r2, [pc, #320]	; (800172c <HAL_GPIO_Init+0x31c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d01f      	beq.n	800162e <HAL_GPIO_Init+0x21e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4f      	ldr	r2, [pc, #316]	; (8001730 <HAL_GPIO_Init+0x320>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d019      	beq.n	800162a <HAL_GPIO_Init+0x21a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4e      	ldr	r2, [pc, #312]	; (8001734 <HAL_GPIO_Init+0x324>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d013      	beq.n	8001626 <HAL_GPIO_Init+0x216>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4d      	ldr	r2, [pc, #308]	; (8001738 <HAL_GPIO_Init+0x328>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d00d      	beq.n	8001622 <HAL_GPIO_Init+0x212>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4c      	ldr	r2, [pc, #304]	; (800173c <HAL_GPIO_Init+0x32c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d007      	beq.n	800161e <HAL_GPIO_Init+0x20e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4b      	ldr	r2, [pc, #300]	; (8001740 <HAL_GPIO_Init+0x330>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d101      	bne.n	800161a <HAL_GPIO_Init+0x20a>
 8001616:	2307      	movs	r3, #7
 8001618:	e00e      	b.n	8001638 <HAL_GPIO_Init+0x228>
 800161a:	2308      	movs	r3, #8
 800161c:	e00c      	b.n	8001638 <HAL_GPIO_Init+0x228>
 800161e:	2306      	movs	r3, #6
 8001620:	e00a      	b.n	8001638 <HAL_GPIO_Init+0x228>
 8001622:	2305      	movs	r3, #5
 8001624:	e008      	b.n	8001638 <HAL_GPIO_Init+0x228>
 8001626:	2304      	movs	r3, #4
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x228>
 800162a:	2303      	movs	r3, #3
 800162c:	e004      	b.n	8001638 <HAL_GPIO_Init+0x228>
 800162e:	2302      	movs	r3, #2
 8001630:	e002      	b.n	8001638 <HAL_GPIO_Init+0x228>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_GPIO_Init+0x228>
 8001636:	2300      	movs	r3, #0
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	f002 0203 	and.w	r2, r2, #3
 800163e:	0092      	lsls	r2, r2, #2
 8001640:	4093      	lsls	r3, r2
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001648:	4935      	ldr	r1, [pc, #212]	; (8001720 <HAL_GPIO_Init+0x310>)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3302      	adds	r3, #2
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001656:	4b3b      	ldr	r3, [pc, #236]	; (8001744 <HAL_GPIO_Init+0x334>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800167a:	4a32      	ldr	r2, [pc, #200]	; (8001744 <HAL_GPIO_Init+0x334>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001680:	4b30      	ldr	r3, [pc, #192]	; (8001744 <HAL_GPIO_Init+0x334>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a4:	4a27      	ldr	r2, [pc, #156]	; (8001744 <HAL_GPIO_Init+0x334>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016aa:	4b26      	ldr	r3, [pc, #152]	; (8001744 <HAL_GPIO_Init+0x334>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ce:	4a1d      	ldr	r2, [pc, #116]	; (8001744 <HAL_GPIO_Init+0x334>)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HAL_GPIO_Init+0x334>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016f8:	4a12      	ldr	r2, [pc, #72]	; (8001744 <HAL_GPIO_Init+0x334>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3301      	adds	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b0f      	cmp	r3, #15
 8001708:	f67f ae90 	bls.w	800142c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40013800 	.word	0x40013800
 8001724:	40020000 	.word	0x40020000
 8001728:	40020400 	.word	0x40020400
 800172c:	40020800 	.word	0x40020800
 8001730:	40020c00 	.word	0x40020c00
 8001734:	40021000 	.word	0x40021000
 8001738:	40021400 	.word	0x40021400
 800173c:	40021800 	.word	0x40021800
 8001740:	40021c00 	.word	0x40021c00
 8001744:	40013c00 	.word	0x40013c00

08001748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
 8001754:	4613      	mov	r3, r2
 8001756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001758:	787b      	ldrb	r3, [r7, #1]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001764:	e003      	b.n	800176e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001766:	887b      	ldrh	r3, [r7, #2]
 8001768:	041a      	lsls	r2, r3, #16
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	619a      	str	r2, [r3, #24]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e12b      	b.n	80019e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d106      	bne.n	80017a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff fb56 	bl	8000e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2224      	movs	r2, #36	; 0x24
 80017ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0201 	bic.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017e0:	f002 fc30 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 80017e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4a81      	ldr	r2, [pc, #516]	; (80019f0 <HAL_I2C_Init+0x274>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d807      	bhi.n	8001800 <HAL_I2C_Init+0x84>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4a80      	ldr	r2, [pc, #512]	; (80019f4 <HAL_I2C_Init+0x278>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	bf94      	ite	ls
 80017f8:	2301      	movls	r3, #1
 80017fa:	2300      	movhi	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	e006      	b.n	800180e <HAL_I2C_Init+0x92>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4a7d      	ldr	r2, [pc, #500]	; (80019f8 <HAL_I2C_Init+0x27c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	bf94      	ite	ls
 8001808:	2301      	movls	r3, #1
 800180a:	2300      	movhi	r3, #0
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e0e7      	b.n	80019e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4a78      	ldr	r2, [pc, #480]	; (80019fc <HAL_I2C_Init+0x280>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	0c9b      	lsrs	r3, r3, #18
 8001820:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	430a      	orrs	r2, r1
 8001834:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	4a6a      	ldr	r2, [pc, #424]	; (80019f0 <HAL_I2C_Init+0x274>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d802      	bhi.n	8001850 <HAL_I2C_Init+0xd4>
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	3301      	adds	r3, #1
 800184e:	e009      	b.n	8001864 <HAL_I2C_Init+0xe8>
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001856:	fb02 f303 	mul.w	r3, r2, r3
 800185a:	4a69      	ldr	r2, [pc, #420]	; (8001a00 <HAL_I2C_Init+0x284>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	099b      	lsrs	r3, r3, #6
 8001862:	3301      	adds	r3, #1
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	430b      	orrs	r3, r1
 800186a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001876:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	495c      	ldr	r1, [pc, #368]	; (80019f0 <HAL_I2C_Init+0x274>)
 8001880:	428b      	cmp	r3, r1
 8001882:	d819      	bhi.n	80018b8 <HAL_I2C_Init+0x13c>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1e59      	subs	r1, r3, #1
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001892:	1c59      	adds	r1, r3, #1
 8001894:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001898:	400b      	ands	r3, r1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00a      	beq.n	80018b4 <HAL_I2C_Init+0x138>
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1e59      	subs	r1, r3, #1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ac:	3301      	adds	r3, #1
 80018ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b2:	e051      	b.n	8001958 <HAL_I2C_Init+0x1dc>
 80018b4:	2304      	movs	r3, #4
 80018b6:	e04f      	b.n	8001958 <HAL_I2C_Init+0x1dc>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d111      	bne.n	80018e4 <HAL_I2C_Init+0x168>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	1e58      	subs	r0, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6859      	ldr	r1, [r3, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	440b      	add	r3, r1
 80018ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80018d2:	3301      	adds	r3, #1
 80018d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d8:	2b00      	cmp	r3, #0
 80018da:	bf0c      	ite	eq
 80018dc:	2301      	moveq	r3, #1
 80018de:	2300      	movne	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	e012      	b.n	800190a <HAL_I2C_Init+0x18e>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	1e58      	subs	r0, r3, #1
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6859      	ldr	r1, [r3, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	0099      	lsls	r1, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018fa:	3301      	adds	r3, #1
 80018fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001900:	2b00      	cmp	r3, #0
 8001902:	bf0c      	ite	eq
 8001904:	2301      	moveq	r3, #1
 8001906:	2300      	movne	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_I2C_Init+0x196>
 800190e:	2301      	movs	r3, #1
 8001910:	e022      	b.n	8001958 <HAL_I2C_Init+0x1dc>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10e      	bne.n	8001938 <HAL_I2C_Init+0x1bc>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1e58      	subs	r0, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6859      	ldr	r1, [r3, #4]
 8001922:	460b      	mov	r3, r1
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	440b      	add	r3, r1
 8001928:	fbb0 f3f3 	udiv	r3, r0, r3
 800192c:	3301      	adds	r3, #1
 800192e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001936:	e00f      	b.n	8001958 <HAL_I2C_Init+0x1dc>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	1e58      	subs	r0, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6859      	ldr	r1, [r3, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	0099      	lsls	r1, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	fbb0 f3f3 	udiv	r3, r0, r3
 800194e:	3301      	adds	r3, #1
 8001950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001954:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	6809      	ldr	r1, [r1, #0]
 800195c:	4313      	orrs	r3, r2
 800195e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69da      	ldr	r2, [r3, #28]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001986:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6911      	ldr	r1, [r2, #16]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68d2      	ldr	r2, [r2, #12]
 8001992:	4311      	orrs	r1, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	430b      	orrs	r3, r1
 800199a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0201 	orr.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2220      	movs	r2, #32
 80019d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	000186a0 	.word	0x000186a0
 80019f4:	001e847f 	.word	0x001e847f
 80019f8:	003d08ff 	.word	0x003d08ff
 80019fc:	431bde83 	.word	0x431bde83
 8001a00:	10624dd3 	.word	0x10624dd3

08001a04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	460b      	mov	r3, r1
 8001a12:	817b      	strh	r3, [r7, #10]
 8001a14:	4613      	mov	r3, r2
 8001a16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff fbb8 	bl	800118c <HAL_GetTick>
 8001a1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b20      	cmp	r3, #32
 8001a28:	f040 80e0 	bne.w	8001bec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2319      	movs	r3, #25
 8001a32:	2201      	movs	r2, #1
 8001a34:	4970      	ldr	r1, [pc, #448]	; (8001bf8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 fa92 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a42:	2302      	movs	r3, #2
 8001a44:	e0d3      	b.n	8001bee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_I2C_Master_Transmit+0x50>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e0cc      	b.n	8001bee <HAL_I2C_Master_Transmit+0x1ea>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d007      	beq.n	8001a7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f042 0201 	orr.w	r2, r2, #1
 8001a78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2221      	movs	r2, #33	; 0x21
 8001a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2210      	movs	r2, #16
 8001a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	893a      	ldrh	r2, [r7, #8]
 8001aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4a50      	ldr	r2, [pc, #320]	; (8001bfc <HAL_I2C_Master_Transmit+0x1f8>)
 8001aba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001abc:	8979      	ldrh	r1, [r7, #10]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	6a3a      	ldr	r2, [r7, #32]
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 f9ca 	bl	8001e5c <I2C_MasterRequestWrite>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e08d      	b.n	8001bee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ae8:	e066      	b.n	8001bb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	6a39      	ldr	r1, [r7, #32]
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 fb0c 	bl	800210c <I2C_WaitOnTXEFlagUntilTimeout>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00d      	beq.n	8001b16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d107      	bne.n	8001b12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e06b      	b.n	8001bee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	781a      	ldrb	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	3b01      	subs	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d11b      	bne.n	8001b8c <HAL_I2C_Master_Transmit+0x188>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d017      	beq.n	8001b8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	781a      	ldrb	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b84:	3b01      	subs	r3, #1
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	6a39      	ldr	r1, [r7, #32]
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 fafc 	bl	800218e <I2C_WaitOnBTFFlagUntilTimeout>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00d      	beq.n	8001bb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d107      	bne.n	8001bb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e01a      	b.n	8001bee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d194      	bne.n	8001aea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	e000      	b.n	8001bee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001bec:	2302      	movs	r3, #2
  }
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	00100002 	.word	0x00100002
 8001bfc:	ffff0000 	.word	0xffff0000

08001c00 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af02      	add	r7, sp, #8
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff fabc 	bl	800118c <HAL_GetTick>
 8001c14:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b20      	cmp	r3, #32
 8001c24:	f040 8111 	bne.w	8001e4a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	2319      	movs	r3, #25
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4988      	ldr	r1, [pc, #544]	; (8001e54 <HAL_I2C_IsDeviceReady+0x254>)
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 f994 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e104      	b.n	8001e4c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_I2C_IsDeviceReady+0x50>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e0fd      	b.n	8001e4c <HAL_I2C_IsDeviceReady+0x24c>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d007      	beq.n	8001c76 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2224      	movs	r2, #36	; 0x24
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4a70      	ldr	r2, [pc, #448]	; (8001e58 <HAL_I2C_IsDeviceReady+0x258>)
 8001c98:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f952 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00d      	beq.n	8001cde <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd0:	d103      	bne.n	8001cda <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e0b6      	b.n	8001e4c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cde:	897b      	ldrh	r3, [r7, #10]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001cee:	f7ff fa4d 	bl	800118c <HAL_GetTick>
 8001cf2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	bf0c      	ite	eq
 8001d02:	2301      	moveq	r3, #1
 8001d04:	2300      	movne	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d18:	bf0c      	ite	eq
 8001d1a:	2301      	moveq	r3, #1
 8001d1c:	2300      	movne	r3, #0
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d22:	e025      	b.n	8001d70 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d24:	f7ff fa32 	bl	800118c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d302      	bcc.n	8001d3a <HAL_I2C_IsDeviceReady+0x13a>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d103      	bne.n	8001d42 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	22a0      	movs	r2, #160	; 0xa0
 8001d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d66:	bf0c      	ite	eq
 8001d68:	2301      	moveq	r3, #1
 8001d6a:	2300      	movne	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2ba0      	cmp	r3, #160	; 0xa0
 8001d7a:	d005      	beq.n	8001d88 <HAL_I2C_IsDeviceReady+0x188>
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d102      	bne.n	8001d88 <HAL_I2C_IsDeviceReady+0x188>
 8001d82:	7dbb      	ldrb	r3, [r7, #22]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0cd      	beq.n	8001d24 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d129      	bne.n	8001df2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2319      	movs	r3, #25
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4921      	ldr	r1, [pc, #132]	; (8001e54 <HAL_I2C_IsDeviceReady+0x254>)
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f8c6 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e036      	b.n	8001e4c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2220      	movs	r2, #32
 8001de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e02c      	b.n	8001e4c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e00:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e0a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	2319      	movs	r3, #25
 8001e12:	2201      	movs	r2, #1
 8001e14:	490f      	ldr	r1, [pc, #60]	; (8001e54 <HAL_I2C_IsDeviceReady+0x254>)
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 f8a2 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e012      	b.n	8001e4c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	f4ff af32 	bcc.w	8001c9a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001e4a:	2302      	movs	r3, #2
  }
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	00100002 	.word	0x00100002
 8001e58:	ffff0000 	.word	0xffff0000

08001e5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d006      	beq.n	8001e86 <I2C_MasterRequestWrite+0x2a>
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d003      	beq.n	8001e86 <I2C_MasterRequestWrite+0x2a>
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e84:	d108      	bne.n	8001e98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	e00b      	b.n	8001eb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	2b12      	cmp	r3, #18
 8001e9e:	d107      	bne.n	8001eb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f84f 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00d      	beq.n	8001ee4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed6:	d103      	bne.n	8001ee0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ede:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e035      	b.n	8001f50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001eec:	d108      	bne.n	8001f00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eee:	897b      	ldrh	r3, [r7, #10]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001efc:	611a      	str	r2, [r3, #16]
 8001efe:	e01b      	b.n	8001f38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f00:	897b      	ldrh	r3, [r7, #10]
 8001f02:	11db      	asrs	r3, r3, #7
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f003 0306 	and.w	r3, r3, #6
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f063 030f 	orn	r3, r3, #15
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	490e      	ldr	r1, [pc, #56]	; (8001f58 <I2C_MasterRequestWrite+0xfc>)
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 f875 	bl	800200e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e010      	b.n	8001f50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f2e:	897b      	ldrh	r3, [r7, #10]
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	4907      	ldr	r1, [pc, #28]	; (8001f5c <I2C_MasterRequestWrite+0x100>)
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 f865 	bl	800200e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	00010008 	.word	0x00010008
 8001f5c:	00010002 	.word	0x00010002

08001f60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f70:	e025      	b.n	8001fbe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f78:	d021      	beq.n	8001fbe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f7a:	f7ff f907 	bl	800118c <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d302      	bcc.n	8001f90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d116      	bne.n	8001fbe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f043 0220 	orr.w	r2, r3, #32
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e023      	b.n	8002006 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	0c1b      	lsrs	r3, r3, #16
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d10d      	bne.n	8001fe4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	bf0c      	ite	eq
 8001fda:	2301      	moveq	r3, #1
 8001fdc:	2300      	movne	r3, #0
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	e00c      	b.n	8001ffe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	43da      	mvns	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	bf0c      	ite	eq
 8001ff6:	2301      	moveq	r3, #1
 8001ff8:	2300      	movne	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	429a      	cmp	r2, r3
 8002002:	d0b6      	beq.n	8001f72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800201c:	e051      	b.n	80020c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800202c:	d123      	bne.n	8002076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800203c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002046:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f043 0204 	orr.w	r2, r3, #4
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e046      	b.n	8002104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d021      	beq.n	80020c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800207e:	f7ff f885 	bl	800118c <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	429a      	cmp	r2, r3
 800208c:	d302      	bcc.n	8002094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d116      	bne.n	80020c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f043 0220 	orr.w	r2, r3, #32
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e020      	b.n	8002104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	0c1b      	lsrs	r3, r3, #16
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d10c      	bne.n	80020e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	4013      	ands	r3, r2
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	bf14      	ite	ne
 80020de:	2301      	movne	r3, #1
 80020e0:	2300      	moveq	r3, #0
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	e00b      	b.n	80020fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	43da      	mvns	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	4013      	ands	r3, r2
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf14      	ite	ne
 80020f8:	2301      	movne	r3, #1
 80020fa:	2300      	moveq	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d18d      	bne.n	800201e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002118:	e02d      	b.n	8002176 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f878 	bl	8002210 <I2C_IsAcknowledgeFailed>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e02d      	b.n	8002186 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002130:	d021      	beq.n	8002176 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002132:	f7ff f82b 	bl	800118c <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	429a      	cmp	r2, r3
 8002140:	d302      	bcc.n	8002148 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d116      	bne.n	8002176 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f043 0220 	orr.w	r2, r3, #32
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e007      	b.n	8002186 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002180:	2b80      	cmp	r3, #128	; 0x80
 8002182:	d1ca      	bne.n	800211a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800219a:	e02d      	b.n	80021f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f837 	bl	8002210 <I2C_IsAcknowledgeFailed>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e02d      	b.n	8002208 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b2:	d021      	beq.n	80021f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b4:	f7fe ffea 	bl	800118c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d302      	bcc.n	80021ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d116      	bne.n	80021f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f043 0220 	orr.w	r2, r3, #32
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e007      	b.n	8002208 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b04      	cmp	r3, #4
 8002204:	d1ca      	bne.n	800219c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002226:	d11b      	bne.n	8002260 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002230:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f043 0204 	orr.w	r2, r3, #4
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800226e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002270:	b08f      	sub	sp, #60	; 0x3c
 8002272:	af0a      	add	r7, sp, #40	; 0x28
 8002274:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e10f      	b.n	80024a0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f005 ff6c 	bl	8008178 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2203      	movs	r2, #3
 80022a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 fabf 	bl	8004842 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	687e      	ldr	r6, [r7, #4]
 80022cc:	466d      	mov	r5, sp
 80022ce:	f106 0410 	add.w	r4, r6, #16
 80022d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022de:	e885 0003 	stmia.w	r5, {r0, r1}
 80022e2:	1d33      	adds	r3, r6, #4
 80022e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022e6:	6838      	ldr	r0, [r7, #0]
 80022e8:	f002 f996 	bl	8004618 <USB_CoreInit>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2202      	movs	r2, #2
 80022f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0d0      	b.n	80024a0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f002 faad 	bl	8004864 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230a:	2300      	movs	r3, #0
 800230c:	73fb      	strb	r3, [r7, #15]
 800230e:	e04a      	b.n	80023a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	333d      	adds	r3, #61	; 0x3d
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	333c      	adds	r3, #60	; 0x3c
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	b298      	uxth	r0, r3
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4413      	add	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	3344      	adds	r3, #68	; 0x44
 800234c:	4602      	mov	r2, r0
 800234e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	3340      	adds	r3, #64	; 0x40
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002364:	7bfa      	ldrb	r2, [r7, #15]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	3348      	adds	r3, #72	; 0x48
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	334c      	adds	r3, #76	; 0x4c
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	3354      	adds	r3, #84	; 0x54
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	3301      	adds	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d3af      	bcc.n	8002310 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	e044      	b.n	8002440 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	3301      	adds	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	429a      	cmp	r2, r3
 8002448:	d3b5      	bcc.n	80023b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	687e      	ldr	r6, [r7, #4]
 8002452:	466d      	mov	r5, sp
 8002454:	f106 0410 	add.w	r4, r6, #16
 8002458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800245a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800245c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800245e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002460:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002464:	e885 0003 	stmia.w	r5, {r0, r1}
 8002468:	1d33      	adds	r3, r6, #4
 800246a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800246c:	6838      	ldr	r0, [r7, #0]
 800246e:	f002 fa45 	bl	80048fc <USB_DevInit>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e00d      	b.n	80024a0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f003 fb94 	bl	8005bc6 <USB_DevDisconnect>

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_PCD_Start+0x1c>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e020      	b.n	8002506 <HAL_PCD_Start+0x5e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d109      	bne.n	80024e8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d005      	beq.n	80024e8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f002 f997 	bl	8004820 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 fb44 	bl	8005b84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800250e:	b590      	push	{r4, r7, lr}
 8002510:	b08d      	sub	sp, #52	; 0x34
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f003 fc02 	bl	8005d2e <USB_GetMode>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	f040 848a 	bne.w	8002e46 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f003 fb66 	bl	8005c08 <USB_ReadInterrupts>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 8480 	beq.w	8002e44 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f003 fb53 	bl	8005c08 <USB_ReadInterrupts>
 8002562:	4603      	mov	r3, r0
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b02      	cmp	r3, #2
 800256a:	d107      	bne.n	800257c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f002 0202 	and.w	r2, r2, #2
 800257a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f003 fb41 	bl	8005c08 <USB_ReadInterrupts>
 8002586:	4603      	mov	r3, r0
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b10      	cmp	r3, #16
 800258e:	d161      	bne.n	8002654 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0210 	bic.w	r2, r2, #16
 800259e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	f003 020f 	and.w	r2, r3, #15
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	4413      	add	r3, r2
 80025bc:	3304      	adds	r3, #4
 80025be:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	0c5b      	lsrs	r3, r3, #17
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d124      	bne.n	8002616 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d035      	beq.n	8002644 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	6a38      	ldr	r0, [r7, #32]
 80025ec:	f003 f978 	bl	80058e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025fc:	441a      	add	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	6a1a      	ldr	r2, [r3, #32]
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800260e:	441a      	add	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	621a      	str	r2, [r3, #32]
 8002614:	e016      	b.n	8002644 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	0c5b      	lsrs	r3, r3, #17
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	2b06      	cmp	r3, #6
 8002620:	d110      	bne.n	8002644 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002628:	2208      	movs	r2, #8
 800262a:	4619      	mov	r1, r3
 800262c:	6a38      	ldr	r0, [r7, #32]
 800262e:	f003 f957 	bl	80058e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	6a1a      	ldr	r2, [r3, #32]
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800263e:	441a      	add	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699a      	ldr	r2, [r3, #24]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0210 	orr.w	r2, r2, #16
 8002652:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f003 fad5 	bl	8005c08 <USB_ReadInterrupts>
 800265e:	4603      	mov	r3, r0
 8002660:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002664:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002668:	f040 80a7 	bne.w	80027ba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f003 fada 	bl	8005c2e <USB_ReadDevAllOutEpInterrupt>
 800267a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800267c:	e099      	b.n	80027b2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800267e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 808e 	beq.w	80027a6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f003 fafe 	bl	8005c96 <USB_ReadDevOutEPInterrupt>
 800269a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00c      	beq.n	80026c0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b2:	461a      	mov	r2, r3
 80026b4:	2301      	movs	r3, #1
 80026b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fec2 	bl	8003444 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00c      	beq.n	80026e4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d6:	461a      	mov	r2, r3
 80026d8:	2308      	movs	r3, #8
 80026da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 ff98 	bl	8003614 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d008      	beq.n	8002700 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026fa:	461a      	mov	r2, r3
 80026fc:	2310      	movs	r3, #16
 80026fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d030      	beq.n	800276c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	2b80      	cmp	r3, #128	; 0x80
 8002714:	d109      	bne.n	800272a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002724:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002728:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800272a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	4413      	add	r3, r2
 800273c:	3304      	adds	r3, #4
 800273e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	78db      	ldrb	r3, [r3, #3]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d108      	bne.n	800275a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2200      	movs	r2, #0
 800274c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	b2db      	uxtb	r3, r3
 8002752:	4619      	mov	r1, r3
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f005 fe15 	bl	8008384 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	4413      	add	r3, r2
 8002762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002766:	461a      	mov	r2, r3
 8002768:	2302      	movs	r3, #2
 800276a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	4413      	add	r3, r2
 800277e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002782:	461a      	mov	r2, r3
 8002784:	2320      	movs	r3, #32
 8002786:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	4413      	add	r3, r2
 800279a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800279e:	461a      	mov	r2, r3
 80027a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027a4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	3301      	adds	r3, #1
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ae:	085b      	lsrs	r3, r3, #1
 80027b0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f47f af62 	bne.w	800267e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 fa22 	bl	8005c08 <USB_ReadInterrupts>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027ce:	f040 80db 	bne.w	8002988 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f003 fa43 	bl	8005c62 <USB_ReadDevAllInEpInterrupt>
 80027dc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80027e2:	e0cd      	b.n	8002980 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 80c2 	beq.w	8002974 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f003 fa69 	bl	8005cd2 <USB_ReadDevInEPInterrupt>
 8002800:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d057      	beq.n	80028bc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	2201      	movs	r2, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	43db      	mvns	r3, r3
 8002826:	69f9      	ldr	r1, [r7, #28]
 8002828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800282c:	4013      	ands	r3, r2
 800282e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	4413      	add	r3, r2
 8002838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800283c:	461a      	mov	r2, r3
 800283e:	2301      	movs	r3, #1
 8002840:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d132      	bne.n	80028b0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	334c      	adds	r3, #76	; 0x4c
 800285a:	6819      	ldr	r1, [r3, #0]
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4403      	add	r3, r0
 800286a:	3348      	adds	r3, #72	; 0x48
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4419      	add	r1, r3
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4403      	add	r3, r0
 800287e:	334c      	adds	r3, #76	; 0x4c
 8002880:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	2b00      	cmp	r3, #0
 8002886:	d113      	bne.n	80028b0 <HAL_PCD_IRQHandler+0x3a2>
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	3354      	adds	r3, #84	; 0x54
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d108      	bne.n	80028b0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028a8:	461a      	mov	r2, r3
 80028aa:	2101      	movs	r1, #1
 80028ac:	f003 fa70 	bl	8005d90 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	4619      	mov	r1, r3
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f005 fcdf 	bl	800827a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d008      	beq.n	80028d8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028d2:	461a      	mov	r2, r3
 80028d4:	2308      	movs	r3, #8
 80028d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d008      	beq.n	80028f4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ee:	461a      	mov	r2, r3
 80028f0:	2310      	movs	r3, #16
 80028f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	4413      	add	r3, r2
 8002906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800290a:	461a      	mov	r2, r3
 800290c:	2340      	movs	r3, #64	; 0x40
 800290e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d023      	beq.n	8002962 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800291a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800291c:	6a38      	ldr	r0, [r7, #32]
 800291e:	f002 f951 	bl	8004bc4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	3338      	adds	r3, #56	; 0x38
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	3304      	adds	r3, #4
 8002934:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	78db      	ldrb	r3, [r3, #3]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d108      	bne.n	8002950 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2200      	movs	r2, #0
 8002942:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	b2db      	uxtb	r3, r3
 8002948:	4619      	mov	r1, r3
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f005 fd2c 	bl	80083a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	4413      	add	r3, r2
 8002958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800295c:	461a      	mov	r2, r3
 800295e:	2302      	movs	r3, #2
 8002960:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800296c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fcdb 	bl	800332a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	3301      	adds	r3, #1
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	085b      	lsrs	r3, r3, #1
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	2b00      	cmp	r3, #0
 8002984:	f47f af2e 	bne.w	80027e4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f003 f93b 	bl	8005c08 <USB_ReadInterrupts>
 8002992:	4603      	mov	r3, r0
 8002994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800299c:	d122      	bne.n	80029e4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ac:	f023 0301 	bic.w	r3, r3, #1
 80029b0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d108      	bne.n	80029ce <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029c4:	2100      	movs	r1, #0
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fec2 	bl	8003750 <HAL_PCDEx_LPM_Callback>
 80029cc:	e002      	b.n	80029d4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f005 fcca 	bl	8008368 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80029e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f003 f90d 	bl	8005c08 <USB_ReadInterrupts>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029f8:	d112      	bne.n	8002a20 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d102      	bne.n	8002a10 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f005 fc86 	bl	800831c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a1e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f003 f8ef 	bl	8005c08 <USB_ReadInterrupts>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a34:	f040 80b7 	bne.w	8002ba6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2110      	movs	r1, #16
 8002a52:	4618      	mov	r0, r3
 8002a54:	f002 f8b6 	bl	8004bc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a58:	2300      	movs	r3, #0
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a5c:	e046      	b.n	8002aec <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a70:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a82:	0151      	lsls	r1, r2, #5
 8002a84:	69fa      	ldr	r2, [r7, #28]
 8002a86:	440a      	add	r2, r1
 8002a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002aa4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ab6:	0151      	lsls	r1, r2, #5
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	440a      	add	r2, r1
 8002abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ac0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ac4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ad6:	0151      	lsls	r1, r2, #5
 8002ad8:	69fa      	ldr	r2, [r7, #28]
 8002ada:	440a      	add	r2, r1
 8002adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ae0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ae4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae8:	3301      	adds	r3, #1
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d3b3      	bcc.n	8002a5e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b04:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b08:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d016      	beq.n	8002b40 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b22:	f043 030b 	orr.w	r3, r3, #11
 8002b26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b38:	f043 030b 	orr.w	r3, r3, #11
 8002b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3e:	e015      	b.n	8002b6c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b52:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b56:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b66:	f043 030b 	orr.w	r3, r3, #11
 8002b6a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b7e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b90:	461a      	mov	r2, r3
 8002b92:	f003 f8fd 	bl	8005d90 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 f82c 	bl	8005c08 <USB_ReadInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bba:	d124      	bne.n	8002c06 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 f8c2 	bl	8005d4a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f002 f877 	bl	8004cbe <USB_GetDevSpeed>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681c      	ldr	r4, [r3, #0]
 8002bdc:	f001 fa26 	bl	800402c <HAL_RCC_GetHCLKFreq>
 8002be0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	4620      	mov	r0, r4
 8002bec:	f001 fd76 	bl	80046dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f005 fb6a 	bl	80082ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695a      	ldr	r2, [r3, #20]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f002 fffc 	bl	8005c08 <USB_ReadInterrupts>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d10a      	bne.n	8002c30 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f005 fb47 	bl	80082ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f002 0208 	and.w	r2, r2, #8
 8002c2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f002 ffe7 	bl	8005c08 <USB_ReadInterrupts>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c40:	2b80      	cmp	r3, #128	; 0x80
 8002c42:	d122      	bne.n	8002c8a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c50:	2301      	movs	r3, #1
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
 8002c54:	e014      	b.n	8002c80 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d105      	bne.n	8002c7a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	4619      	mov	r1, r3
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fb27 	bl	80032c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d3e5      	bcc.n	8002c56 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f002 ffba 	bl	8005c08 <USB_ReadInterrupts>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c9e:	d13b      	bne.n	8002d18 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca4:	e02b      	b.n	8002cfe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cba:	4613      	mov	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	3340      	adds	r3, #64	; 0x40
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d115      	bne.n	8002cf8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ccc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	da12      	bge.n	8002cf8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	333f      	adds	r3, #63	; 0x3f
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fae8 	bl	80032c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d3ce      	bcc.n	8002ca6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f002 ff73 	bl	8005c08 <USB_ReadInterrupts>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d2c:	d155      	bne.n	8002dda <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d2e:	2301      	movs	r3, #1
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
 8002d32:	e045      	b.n	8002dc0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d12e      	bne.n	8002dba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	da2b      	bge.n	8002dba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d6e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d121      	bne.n	8002dba <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002db6:	6053      	str	r3, [r2, #4]
            break;
 8002db8:	e007      	b.n	8002dca <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d3b4      	bcc.n	8002d34 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f002 ff12 	bl	8005c08 <USB_ReadInterrupts>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dee:	d10a      	bne.n	8002e06 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f005 faeb 	bl	80083cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f002 fefc 	bl	8005c08 <USB_ReadInterrupts>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d115      	bne.n	8002e46 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f005 fadb 	bl	80083e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	e000      	b.n	8002e46 <HAL_PCD_IRQHandler+0x938>
      return;
 8002e44:	bf00      	nop
    }
  }
}
 8002e46:	3734      	adds	r7, #52	; 0x34
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd90      	pop	{r4, r7, pc}

08002e4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_PCD_SetAddress+0x1a>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e013      	b.n	8002e8e <HAL_PCD_SetAddress+0x42>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f002 fe5a 	bl	8005b38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	4608      	mov	r0, r1
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	70fb      	strb	r3, [r7, #3]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	803b      	strh	r3, [r7, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	da0f      	bge.n	8002edc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	f003 020f 	and.w	r2, r3, #15
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	3338      	adds	r3, #56	; 0x38
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	4413      	add	r3, r2
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	705a      	strb	r2, [r3, #1]
 8002eda:	e00f      	b.n	8002efc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	f003 020f 	and.w	r2, r3, #15
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f08:	883a      	ldrh	r2, [r7, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	78ba      	ldrb	r2, [r7, #2]
 8002f12:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	785b      	ldrb	r3, [r3, #1]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d004      	beq.n	8002f26 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f26:	78bb      	ldrb	r3, [r7, #2]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d102      	bne.n	8002f32 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_PCD_EP_Open+0xaa>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e00e      	b.n	8002f5e <HAL_PCD_EP_Open+0xc8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68f9      	ldr	r1, [r7, #12]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f001 feda 	bl	8004d08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002f5c:	7afb      	ldrb	r3, [r7, #11]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	da0f      	bge.n	8002f9a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	f003 020f 	and.w	r2, r3, #15
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	3338      	adds	r3, #56	; 0x38
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3304      	adds	r3, #4
 8002f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2201      	movs	r2, #1
 8002f96:	705a      	strb	r2, [r3, #1]
 8002f98:	e00f      	b.n	8002fba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f9a:	78fb      	ldrb	r3, [r7, #3]
 8002f9c:	f003 020f 	and.w	r2, r3, #15
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002fba:	78fb      	ldrb	r3, [r7, #3]
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_PCD_EP_Close+0x6e>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e00e      	b.n	8002ff2 <HAL_PCD_EP_Close+0x8c>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68f9      	ldr	r1, [r7, #12]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f001 ff18 	bl	8004e18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b086      	sub	sp, #24
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
 8003006:	460b      	mov	r3, r1
 8003008:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800300a:	7afb      	ldrb	r3, [r7, #11]
 800300c:	f003 020f 	and.w	r2, r3, #15
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	3304      	adds	r3, #4
 8003022:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2200      	movs	r2, #0
 8003034:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2200      	movs	r2, #0
 800303a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800303c:	7afb      	ldrb	r3, [r7, #11]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	b2da      	uxtb	r2, r3
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d102      	bne.n	8003056 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003056:	7afb      	ldrb	r3, [r7, #11]
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	2b00      	cmp	r3, #0
 800305e:	d109      	bne.n	8003074 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	6979      	ldr	r1, [r7, #20]
 800306e:	f002 f9f7 	bl	8005460 <USB_EP0StartXfer>
 8003072:	e008      	b.n	8003086 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	461a      	mov	r2, r3
 8003080:	6979      	ldr	r1, [r7, #20]
 8003082:	f001 ffa5 	bl	8004fd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	f003 020f 	and.w	r2, r3, #15
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80030b2:	681b      	ldr	r3, [r3, #0]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	607a      	str	r2, [r7, #4]
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	460b      	mov	r3, r1
 80030ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d0:	7afb      	ldrb	r3, [r7, #11]
 80030d2:	f003 020f 	and.w	r2, r3, #15
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	3338      	adds	r3, #56	; 0x38
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	3304      	adds	r3, #4
 80030e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2200      	movs	r2, #0
 80030f8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2201      	movs	r2, #1
 80030fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003100:	7afb      	ldrb	r3, [r7, #11]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	b2da      	uxtb	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d102      	bne.n	800311a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800311a:	7afb      	ldrb	r3, [r7, #11]
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	2b00      	cmp	r3, #0
 8003122:	d109      	bne.n	8003138 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	461a      	mov	r2, r3
 8003130:	6979      	ldr	r1, [r7, #20]
 8003132:	f002 f995 	bl	8005460 <USB_EP0StartXfer>
 8003136:	e008      	b.n	800314a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	461a      	mov	r2, r3
 8003144:	6979      	ldr	r1, [r7, #20]
 8003146:	f001 ff43 	bl	8004fd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	f003 020f 	and.w	r2, r3, #15
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	429a      	cmp	r2, r3
 800316c:	d901      	bls.n	8003172 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e050      	b.n	8003214 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003172:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003176:	2b00      	cmp	r3, #0
 8003178:	da0f      	bge.n	800319a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800317a:	78fb      	ldrb	r3, [r7, #3]
 800317c:	f003 020f 	and.w	r2, r3, #15
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	3338      	adds	r3, #56	; 0x38
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	3304      	adds	r3, #4
 8003190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	705a      	strb	r2, [r3, #1]
 8003198:	e00d      	b.n	80031b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	4613      	mov	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	4413      	add	r3, r2
 80031ac:	3304      	adds	r3, #4
 80031ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_PCD_EP_SetStall+0x82>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e01e      	b.n	8003214 <HAL_PCD_EP_SetStall+0xc0>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68f9      	ldr	r1, [r7, #12]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f002 fbd3 	bl	8005990 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10a      	bne.n	800320a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	b2d9      	uxtb	r1, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003204:	461a      	mov	r2, r3
 8003206:	f002 fdc3 	bl	8005d90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 020f 	and.w	r2, r3, #15
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	429a      	cmp	r2, r3
 8003234:	d901      	bls.n	800323a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e042      	b.n	80032c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800323a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323e:	2b00      	cmp	r3, #0
 8003240:	da0f      	bge.n	8003262 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	f003 020f 	and.w	r2, r3, #15
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	3338      	adds	r3, #56	; 0x38
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	3304      	adds	r3, #4
 8003258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	705a      	strb	r2, [r3, #1]
 8003260:	e00f      	b.n	8003282 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	f003 020f 	and.w	r2, r3, #15
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	4413      	add	r3, r2
 8003278:	3304      	adds	r3, #4
 800327a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	b2da      	uxtb	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_PCD_EP_ClrStall+0x86>
 800329e:	2302      	movs	r3, #2
 80032a0:	e00e      	b.n	80032c0 <HAL_PCD_EP_ClrStall+0xa4>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68f9      	ldr	r1, [r7, #12]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f002 fbdb 	bl	8005a6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80032d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	da0c      	bge.n	80032f6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	f003 020f 	and.w	r2, r3, #15
 80032e2:	4613      	mov	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	3338      	adds	r3, #56	; 0x38
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	3304      	adds	r3, #4
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	e00c      	b.n	8003310 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	f003 020f 	and.w	r2, r3, #15
 80032fc:	4613      	mov	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4413      	add	r3, r2
 800330c:	3304      	adds	r3, #4
 800330e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68f9      	ldr	r1, [r7, #12]
 8003316:	4618      	mov	r0, r3
 8003318:	f002 f9fa 	bl	8005710 <USB_EPStopXfer>
 800331c:	4603      	mov	r3, r0
 800331e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003320:	7afb      	ldrb	r3, [r7, #11]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b08a      	sub	sp, #40	; 0x28
 800332e:	af02      	add	r7, sp, #8
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	3338      	adds	r3, #56	; 0x38
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	4413      	add	r3, r2
 800334e:	3304      	adds	r3, #4
 8003350:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a1a      	ldr	r2, [r3, #32]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	429a      	cmp	r2, r3
 800335c:	d901      	bls.n	8003362 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e06c      	b.n	800343c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	429a      	cmp	r2, r3
 8003376:	d902      	bls.n	800337e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	3303      	adds	r3, #3
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003386:	e02b      	b.n	80033e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	69fa      	ldr	r2, [r7, #28]
 800339a:	429a      	cmp	r2, r3
 800339c:	d902      	bls.n	80033a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	3303      	adds	r3, #3
 80033a8:	089b      	lsrs	r3, r3, #2
 80033aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6919      	ldr	r1, [r3, #16]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	4603      	mov	r3, r0
 80033c2:	6978      	ldr	r0, [r7, #20]
 80033c4:	f002 fa4e 	bl	8005864 <USB_WritePacket>

    ep->xfer_buff  += len;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	441a      	add	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a1a      	ldr	r2, [r3, #32]
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	441a      	add	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d809      	bhi.n	800340a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a1a      	ldr	r2, [r3, #32]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033fe:	429a      	cmp	r2, r3
 8003400:	d203      	bcs.n	800340a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1be      	bne.n	8003388 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	429a      	cmp	r2, r3
 8003414:	d811      	bhi.n	800343a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	2201      	movs	r2, #1
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	43db      	mvns	r3, r3
 8003430:	6939      	ldr	r1, [r7, #16]
 8003432:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003436:	4013      	ands	r3, r2
 8003438:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3720      	adds	r7, #32
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	333c      	adds	r3, #60	; 0x3c
 800345c:	3304      	adds	r3, #4
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	4413      	add	r3, r2
 800346a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d17b      	bne.n	8003572 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d015      	beq.n	80034b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	4a61      	ldr	r2, [pc, #388]	; (800360c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	f240 80b9 	bls.w	8003600 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80b3 	beq.w	8003600 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a6:	461a      	mov	r2, r3
 80034a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ac:	6093      	str	r3, [r2, #8]
 80034ae:	e0a7      	b.n	8003600 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c6:	461a      	mov	r2, r3
 80034c8:	2320      	movs	r3, #32
 80034ca:	6093      	str	r3, [r2, #8]
 80034cc:	e098      	b.n	8003600 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f040 8093 	bne.w	8003600 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	4a4b      	ldr	r2, [pc, #300]	; (800360c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d90f      	bls.n	8003502 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f8:	461a      	mov	r2, r3
 80034fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034fe:	6093      	str	r3, [r2, #8]
 8003500:	e07e      	b.n	8003600 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	4413      	add	r3, r2
 8003514:	3304      	adds	r3, #4
 8003516:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	69da      	ldr	r2, [r3, #28]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	0159      	lsls	r1, r3, #5
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	440b      	add	r3, r1
 8003524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800352e:	1ad2      	subs	r2, r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d114      	bne.n	8003564 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d109      	bne.n	8003556 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800354c:	461a      	mov	r2, r3
 800354e:	2101      	movs	r1, #1
 8003550:	f002 fc1e 	bl	8005d90 <USB_EP0_OutStart>
 8003554:	e006      	b.n	8003564 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	441a      	add	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	4619      	mov	r1, r3
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f004 fe6a 	bl	8008244 <HAL_PCD_DataOutStageCallback>
 8003570:	e046      	b.n	8003600 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	4a26      	ldr	r2, [pc, #152]	; (8003610 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d124      	bne.n	80035c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003590:	461a      	mov	r2, r3
 8003592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003596:	6093      	str	r3, [r2, #8]
 8003598:	e032      	b.n	8003600 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b0:	461a      	mov	r2, r3
 80035b2:	2320      	movs	r3, #32
 80035b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	4619      	mov	r1, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f004 fe41 	bl	8008244 <HAL_PCD_DataOutStageCallback>
 80035c2:	e01d      	b.n	8003600 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d114      	bne.n	80035f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d108      	bne.n	80035f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035ec:	461a      	mov	r2, r3
 80035ee:	2100      	movs	r1, #0
 80035f0:	f002 fbce 	bl	8005d90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	4619      	mov	r1, r3
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f004 fe22 	bl	8008244 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	4f54300a 	.word	0x4f54300a
 8003610:	4f54310a 	.word	0x4f54310a

08003614 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	333c      	adds	r3, #60	; 0x3c
 800362c:	3304      	adds	r3, #4
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4a15      	ldr	r2, [pc, #84]	; (800369c <PCD_EP_OutSetupPacket_int+0x88>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d90e      	bls.n	8003668 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003650:	2b00      	cmp	r3, #0
 8003652:	d009      	beq.n	8003668 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003660:	461a      	mov	r2, r3
 8003662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003666:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f004 fdd9 	bl	8008220 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4a0a      	ldr	r2, [pc, #40]	; (800369c <PCD_EP_OutSetupPacket_int+0x88>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d90c      	bls.n	8003690 <PCD_EP_OutSetupPacket_int+0x7c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d108      	bne.n	8003690 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003688:	461a      	mov	r2, r3
 800368a:	2101      	movs	r1, #1
 800368c:	f002 fb80 	bl	8005d90 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	4f54300a 	.word	0x4f54300a

080036a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	70fb      	strb	r3, [r7, #3]
 80036ac:	4613      	mov	r3, r2
 80036ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d107      	bne.n	80036ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036be:	883b      	ldrh	r3, [r7, #0]
 80036c0:	0419      	lsls	r1, r3, #16
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28
 80036cc:	e028      	b.n	8003720 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	4413      	add	r3, r2
 80036da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036dc:	2300      	movs	r3, #0
 80036de:	73fb      	strb	r3, [r7, #15]
 80036e0:	e00d      	b.n	80036fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	3340      	adds	r3, #64	; 0x40
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	0c1b      	lsrs	r3, r3, #16
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	4413      	add	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	3301      	adds	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
 80036fe:	7bfa      	ldrb	r2, [r7, #15]
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	3b01      	subs	r3, #1
 8003704:	429a      	cmp	r2, r3
 8003706:	d3ec      	bcc.n	80036e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003708:	883b      	ldrh	r3, [r7, #0]
 800370a:	0418      	lsls	r0, r3, #16
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6819      	ldr	r1, [r3, #0]
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	3b01      	subs	r3, #1
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	4302      	orrs	r2, r0
 8003718:	3340      	adds	r3, #64	; 0x40
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	460b      	mov	r3, r1
 8003738:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	887a      	ldrh	r2, [r7, #2]
 8003740:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e267      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d075      	beq.n	8003872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003786:	4b88      	ldr	r3, [pc, #544]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b04      	cmp	r3, #4
 8003790:	d00c      	beq.n	80037ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003792:	4b85      	ldr	r3, [pc, #532]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800379a:	2b08      	cmp	r3, #8
 800379c:	d112      	bne.n	80037c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800379e:	4b82      	ldr	r3, [pc, #520]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037aa:	d10b      	bne.n	80037c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ac:	4b7e      	ldr	r3, [pc, #504]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d05b      	beq.n	8003870 <HAL_RCC_OscConfig+0x108>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d157      	bne.n	8003870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e242      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037cc:	d106      	bne.n	80037dc <HAL_RCC_OscConfig+0x74>
 80037ce:	4b76      	ldr	r3, [pc, #472]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a75      	ldr	r2, [pc, #468]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e01d      	b.n	8003818 <HAL_RCC_OscConfig+0xb0>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x98>
 80037e6:	4b70      	ldr	r3, [pc, #448]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a6f      	ldr	r2, [pc, #444]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	4b6d      	ldr	r3, [pc, #436]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a6c      	ldr	r2, [pc, #432]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0xb0>
 8003800:	4b69      	ldr	r3, [pc, #420]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a68      	ldr	r2, [pc, #416]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b66      	ldr	r3, [pc, #408]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a65      	ldr	r2, [pc, #404]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d013      	beq.n	8003848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fd fcb4 	bl	800118c <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003828:	f7fd fcb0 	bl	800118c <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	; 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e207      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	4b5b      	ldr	r3, [pc, #364]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0xc0>
 8003846:	e014      	b.n	8003872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fd fca0 	bl	800118c <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003850:	f7fd fc9c 	bl	800118c <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	; 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e1f3      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003862:	4b51      	ldr	r3, [pc, #324]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0xe8>
 800386e:	e000      	b.n	8003872 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d063      	beq.n	8003946 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800387e:	4b4a      	ldr	r3, [pc, #296]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00b      	beq.n	80038a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800388a:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003892:	2b08      	cmp	r3, #8
 8003894:	d11c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003896:	4b44      	ldr	r3, [pc, #272]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d116      	bne.n	80038d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a2:	4b41      	ldr	r3, [pc, #260]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d005      	beq.n	80038ba <HAL_RCC_OscConfig+0x152>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d001      	beq.n	80038ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e1c7      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ba:	4b3b      	ldr	r3, [pc, #236]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4937      	ldr	r1, [pc, #220]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ce:	e03a      	b.n	8003946 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d020      	beq.n	800391a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d8:	4b34      	ldr	r3, [pc, #208]	; (80039ac <HAL_RCC_OscConfig+0x244>)
 80038da:	2201      	movs	r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038de:	f7fd fc55 	bl	800118c <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e6:	f7fd fc51 	bl	800118c <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e1a8      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f8:	4b2b      	ldr	r3, [pc, #172]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003904:	4b28      	ldr	r3, [pc, #160]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4925      	ldr	r1, [pc, #148]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003914:	4313      	orrs	r3, r2
 8003916:	600b      	str	r3, [r1, #0]
 8003918:	e015      	b.n	8003946 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800391a:	4b24      	ldr	r3, [pc, #144]	; (80039ac <HAL_RCC_OscConfig+0x244>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fd fc34 	bl	800118c <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003928:	f7fd fc30 	bl	800118c <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e187      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393a:	4b1b      	ldr	r3, [pc, #108]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d036      	beq.n	80039c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d016      	beq.n	8003988 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800395a:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <HAL_RCC_OscConfig+0x248>)
 800395c:	2201      	movs	r2, #1
 800395e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003960:	f7fd fc14 	bl	800118c <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003968:	f7fd fc10 	bl	800118c <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e167      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397a:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 800397c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x200>
 8003986:	e01b      	b.n	80039c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003988:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_RCC_OscConfig+0x248>)
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398e:	f7fd fbfd 	bl	800118c <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003994:	e00e      	b.n	80039b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003996:	f7fd fbf9 	bl	800118c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d907      	bls.n	80039b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e150      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
 80039a8:	40023800 	.word	0x40023800
 80039ac:	42470000 	.word	0x42470000
 80039b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b4:	4b88      	ldr	r3, [pc, #544]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1ea      	bne.n	8003996 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 8097 	beq.w	8003afc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ce:	2300      	movs	r3, #0
 80039d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d2:	4b81      	ldr	r3, [pc, #516]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10f      	bne.n	80039fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039de:	2300      	movs	r3, #0
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	4b7d      	ldr	r3, [pc, #500]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	4a7c      	ldr	r2, [pc, #496]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ec:	6413      	str	r3, [r2, #64]	; 0x40
 80039ee:	4b7a      	ldr	r3, [pc, #488]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f6:	60bb      	str	r3, [r7, #8]
 80039f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039fa:	2301      	movs	r3, #1
 80039fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fe:	4b77      	ldr	r3, [pc, #476]	; (8003bdc <HAL_RCC_OscConfig+0x474>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d118      	bne.n	8003a3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0a:	4b74      	ldr	r3, [pc, #464]	; (8003bdc <HAL_RCC_OscConfig+0x474>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a73      	ldr	r2, [pc, #460]	; (8003bdc <HAL_RCC_OscConfig+0x474>)
 8003a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a16:	f7fd fbb9 	bl	800118c <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1e:	f7fd fbb5 	bl	800118c <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e10c      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a30:	4b6a      	ldr	r3, [pc, #424]	; (8003bdc <HAL_RCC_OscConfig+0x474>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d106      	bne.n	8003a52 <HAL_RCC_OscConfig+0x2ea>
 8003a44:	4b64      	ldr	r3, [pc, #400]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	4a63      	ldr	r2, [pc, #396]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a50:	e01c      	b.n	8003a8c <HAL_RCC_OscConfig+0x324>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b05      	cmp	r3, #5
 8003a58:	d10c      	bne.n	8003a74 <HAL_RCC_OscConfig+0x30c>
 8003a5a:	4b5f      	ldr	r3, [pc, #380]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5e:	4a5e      	ldr	r2, [pc, #376]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a60:	f043 0304 	orr.w	r3, r3, #4
 8003a64:	6713      	str	r3, [r2, #112]	; 0x70
 8003a66:	4b5c      	ldr	r3, [pc, #368]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6a:	4a5b      	ldr	r2, [pc, #364]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	6713      	str	r3, [r2, #112]	; 0x70
 8003a72:	e00b      	b.n	8003a8c <HAL_RCC_OscConfig+0x324>
 8003a74:	4b58      	ldr	r3, [pc, #352]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a78:	4a57      	ldr	r2, [pc, #348]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a7a:	f023 0301 	bic.w	r3, r3, #1
 8003a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a80:	4b55      	ldr	r3, [pc, #340]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a84:	4a54      	ldr	r2, [pc, #336]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a86:	f023 0304 	bic.w	r3, r3, #4
 8003a8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d015      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a94:	f7fd fb7a 	bl	800118c <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a9c:	f7fd fb76 	bl	800118c <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e0cb      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab2:	4b49      	ldr	r3, [pc, #292]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0ee      	beq.n	8003a9c <HAL_RCC_OscConfig+0x334>
 8003abe:	e014      	b.n	8003aea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac0:	f7fd fb64 	bl	800118c <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac8:	f7fd fb60 	bl	800118c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e0b5      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ade:	4b3e      	ldr	r3, [pc, #248]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1ee      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aea:	7dfb      	ldrb	r3, [r7, #23]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d105      	bne.n	8003afc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af0:	4b39      	ldr	r3, [pc, #228]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	4a38      	ldr	r2, [pc, #224]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003afa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80a1 	beq.w	8003c48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b06:	4b34      	ldr	r3, [pc, #208]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d05c      	beq.n	8003bcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d141      	bne.n	8003b9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1a:	4b31      	ldr	r3, [pc, #196]	; (8003be0 <HAL_RCC_OscConfig+0x478>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b20:	f7fd fb34 	bl	800118c <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fd fb30 	bl	800118c <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e087      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3a:	4b27      	ldr	r3, [pc, #156]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69da      	ldr	r2, [r3, #28]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	019b      	lsls	r3, r3, #6
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	085b      	lsrs	r3, r3, #1
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	041b      	lsls	r3, r3, #16
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	061b      	lsls	r3, r3, #24
 8003b6a:	491b      	ldr	r1, [pc, #108]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b70:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <HAL_RCC_OscConfig+0x478>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b76:	f7fd fb09 	bl	800118c <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b7e:	f7fd fb05 	bl	800118c <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e05c      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b90:	4b11      	ldr	r3, [pc, #68]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x416>
 8003b9c:	e054      	b.n	8003c48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9e:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <HAL_RCC_OscConfig+0x478>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fd faf2 	bl	800118c <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fd faee 	bl	800118c <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e045      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bbe:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x444>
 8003bca:	e03d      	b.n	8003c48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d107      	bne.n	8003be4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e038      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	40007000 	.word	0x40007000
 8003be0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003be4:	4b1b      	ldr	r3, [pc, #108]	; (8003c54 <HAL_RCC_OscConfig+0x4ec>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d028      	beq.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d121      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d11a      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c14:	4013      	ands	r3, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d111      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2a:	085b      	lsrs	r3, r3, #1
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d107      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800

08003c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0cc      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c6c:	4b68      	ldr	r3, [pc, #416]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d90c      	bls.n	8003c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	4b65      	ldr	r3, [pc, #404]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	4b63      	ldr	r3, [pc, #396]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0b8      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d020      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cac:	4b59      	ldr	r3, [pc, #356]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	4a58      	ldr	r2, [pc, #352]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc4:	4b53      	ldr	r3, [pc, #332]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	4a52      	ldr	r2, [pc, #328]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd0:	4b50      	ldr	r3, [pc, #320]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	494d      	ldr	r1, [pc, #308]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d044      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	4b47      	ldr	r3, [pc, #284]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d119      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e07f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d003      	beq.n	8003d16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d16:	4b3f      	ldr	r3, [pc, #252]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e06f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d26:	4b3b      	ldr	r3, [pc, #236]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e067      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d36:	4b37      	ldr	r3, [pc, #220]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f023 0203 	bic.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4934      	ldr	r1, [pc, #208]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d48:	f7fd fa20 	bl	800118c <HAL_GetTick>
 8003d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d50:	f7fd fa1c 	bl	800118c <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e04f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d66:	4b2b      	ldr	r3, [pc, #172]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 020c 	and.w	r2, r3, #12
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d1eb      	bne.n	8003d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d78:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d20c      	bcs.n	8003da0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8e:	4b20      	ldr	r3, [pc, #128]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e032      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dac:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4916      	ldr	r1, [pc, #88]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	490e      	ldr	r1, [pc, #56]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dde:	f000 f821 	bl	8003e24 <HAL_RCC_GetSysClockFreq>
 8003de2:	4602      	mov	r2, r0
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	091b      	lsrs	r3, r3, #4
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	490a      	ldr	r1, [pc, #40]	; (8003e18 <HAL_RCC_ClockConfig+0x1c0>)
 8003df0:	5ccb      	ldrb	r3, [r1, r3]
 8003df2:	fa22 f303 	lsr.w	r3, r2, r3
 8003df6:	4a09      	ldr	r2, [pc, #36]	; (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fd f980 	bl	8001104 <HAL_InitTick>

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023c00 	.word	0x40023c00
 8003e14:	40023800 	.word	0x40023800
 8003e18:	08009eb0 	.word	0x08009eb0
 8003e1c:	20000008 	.word	0x20000008
 8003e20:	2000000c 	.word	0x2000000c

08003e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e28:	b094      	sub	sp, #80	; 0x50
 8003e2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e30:	2300      	movs	r3, #0
 8003e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e34:	2300      	movs	r3, #0
 8003e36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e3c:	4b79      	ldr	r3, [pc, #484]	; (8004024 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 030c 	and.w	r3, r3, #12
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d00d      	beq.n	8003e64 <HAL_RCC_GetSysClockFreq+0x40>
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	f200 80e1 	bhi.w	8004010 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0x34>
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d003      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e56:	e0db      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e58:	4b73      	ldr	r3, [pc, #460]	; (8004028 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e5c:	e0db      	b.n	8004016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e5e:	4b72      	ldr	r3, [pc, #456]	; (8004028 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e62:	e0d8      	b.n	8004016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e64:	4b6f      	ldr	r3, [pc, #444]	; (8004024 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e6e:	4b6d      	ldr	r3, [pc, #436]	; (8004024 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d063      	beq.n	8003f42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7a:	4b6a      	ldr	r3, [pc, #424]	; (8004024 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	099b      	lsrs	r3, r3, #6
 8003e80:	2200      	movs	r2, #0
 8003e82:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e8e:	2300      	movs	r3, #0
 8003e90:	637b      	str	r3, [r7, #52]	; 0x34
 8003e92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e96:	4622      	mov	r2, r4
 8003e98:	462b      	mov	r3, r5
 8003e9a:	f04f 0000 	mov.w	r0, #0
 8003e9e:	f04f 0100 	mov.w	r1, #0
 8003ea2:	0159      	lsls	r1, r3, #5
 8003ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ea8:	0150      	lsls	r0, r2, #5
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4621      	mov	r1, r4
 8003eb0:	1a51      	subs	r1, r2, r1
 8003eb2:	6139      	str	r1, [r7, #16]
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ec8:	4659      	mov	r1, fp
 8003eca:	018b      	lsls	r3, r1, #6
 8003ecc:	4651      	mov	r1, sl
 8003ece:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ed2:	4651      	mov	r1, sl
 8003ed4:	018a      	lsls	r2, r1, #6
 8003ed6:	4651      	mov	r1, sl
 8003ed8:	ebb2 0801 	subs.w	r8, r2, r1
 8003edc:	4659      	mov	r1, fp
 8003ede:	eb63 0901 	sbc.w	r9, r3, r1
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ef6:	4690      	mov	r8, r2
 8003ef8:	4699      	mov	r9, r3
 8003efa:	4623      	mov	r3, r4
 8003efc:	eb18 0303 	adds.w	r3, r8, r3
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	462b      	mov	r3, r5
 8003f04:	eb49 0303 	adc.w	r3, r9, r3
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f16:	4629      	mov	r1, r5
 8003f18:	028b      	lsls	r3, r1, #10
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f20:	4621      	mov	r1, r4
 8003f22:	028a      	lsls	r2, r1, #10
 8003f24:	4610      	mov	r0, r2
 8003f26:	4619      	mov	r1, r3
 8003f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f34:	f7fc f99c 	bl	8000270 <__aeabi_uldivmod>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f40:	e058      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f42:	4b38      	ldr	r3, [pc, #224]	; (8004024 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	099b      	lsrs	r3, r3, #6
 8003f48:	2200      	movs	r2, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f52:	623b      	str	r3, [r7, #32]
 8003f54:	2300      	movs	r3, #0
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
 8003f58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f5c:	4642      	mov	r2, r8
 8003f5e:	464b      	mov	r3, r9
 8003f60:	f04f 0000 	mov.w	r0, #0
 8003f64:	f04f 0100 	mov.w	r1, #0
 8003f68:	0159      	lsls	r1, r3, #5
 8003f6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f6e:	0150      	lsls	r0, r2, #5
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4641      	mov	r1, r8
 8003f76:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f94:	ebb2 040a 	subs.w	r4, r2, sl
 8003f98:	eb63 050b 	sbc.w	r5, r3, fp
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	00eb      	lsls	r3, r5, #3
 8003fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003faa:	00e2      	lsls	r2, r4, #3
 8003fac:	4614      	mov	r4, r2
 8003fae:	461d      	mov	r5, r3
 8003fb0:	4643      	mov	r3, r8
 8003fb2:	18e3      	adds	r3, r4, r3
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	464b      	mov	r3, r9
 8003fb8:	eb45 0303 	adc.w	r3, r5, r3
 8003fbc:	607b      	str	r3, [r7, #4]
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fca:	4629      	mov	r1, r5
 8003fcc:	028b      	lsls	r3, r1, #10
 8003fce:	4621      	mov	r1, r4
 8003fd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	028a      	lsls	r2, r1, #10
 8003fd8:	4610      	mov	r0, r2
 8003fda:	4619      	mov	r1, r3
 8003fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fde:	2200      	movs	r2, #0
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	61fa      	str	r2, [r7, #28]
 8003fe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fe8:	f7fc f942 	bl	8000270 <__aeabi_uldivmod>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	0c1b      	lsrs	r3, r3, #16
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	3301      	adds	r3, #1
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004004:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004008:	fbb2 f3f3 	udiv	r3, r2, r3
 800400c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800400e:	e002      	b.n	8004016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <HAL_RCC_GetSysClockFreq+0x204>)
 8004012:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004018:	4618      	mov	r0, r3
 800401a:	3750      	adds	r7, #80	; 0x50
 800401c:	46bd      	mov	sp, r7
 800401e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004022:	bf00      	nop
 8004024:	40023800 	.word	0x40023800
 8004028:	00f42400 	.word	0x00f42400

0800402c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004030:	4b03      	ldr	r3, [pc, #12]	; (8004040 <HAL_RCC_GetHCLKFreq+0x14>)
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000008 	.word	0x20000008

08004044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004048:	f7ff fff0 	bl	800402c <HAL_RCC_GetHCLKFreq>
 800404c:	4602      	mov	r2, r0
 800404e:	4b05      	ldr	r3, [pc, #20]	; (8004064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	0a9b      	lsrs	r3, r3, #10
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	4903      	ldr	r1, [pc, #12]	; (8004068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800405a:	5ccb      	ldrb	r3, [r1, r3]
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004060:	4618      	mov	r0, r3
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40023800 	.word	0x40023800
 8004068:	08009ec0 	.word	0x08009ec0

0800406c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004070:	f7ff ffdc 	bl	800402c <HAL_RCC_GetHCLKFreq>
 8004074:	4602      	mov	r2, r0
 8004076:	4b05      	ldr	r3, [pc, #20]	; (800408c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	0b5b      	lsrs	r3, r3, #13
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	4903      	ldr	r1, [pc, #12]	; (8004090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004082:	5ccb      	ldrb	r3, [r1, r3]
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004088:	4618      	mov	r0, r3
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40023800 	.word	0x40023800
 8004090:	08009ec0 	.word	0x08009ec0

08004094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e03f      	b.n	8004126 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fc ff12 	bl	8000ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2224      	movs	r2, #36	; 0x24
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f829 	bl	8004130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695a      	ldr	r2, [r3, #20]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800410c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004134:	b0c0      	sub	sp, #256	; 0x100
 8004136:	af00      	add	r7, sp, #0
 8004138:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414c:	68d9      	ldr	r1, [r3, #12]
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	ea40 0301 	orr.w	r3, r0, r1
 8004158:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800415a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	431a      	orrs	r2, r3
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	431a      	orrs	r2, r3
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004188:	f021 010c 	bic.w	r1, r1, #12
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004196:	430b      	orrs	r3, r1
 8004198:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800419a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041aa:	6999      	ldr	r1, [r3, #24]
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	ea40 0301 	orr.w	r3, r0, r1
 80041b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4b8f      	ldr	r3, [pc, #572]	; (80043fc <UART_SetConfig+0x2cc>)
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d005      	beq.n	80041d0 <UART_SetConfig+0xa0>
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	4b8d      	ldr	r3, [pc, #564]	; (8004400 <UART_SetConfig+0x2d0>)
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d104      	bne.n	80041da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041d0:	f7ff ff4c 	bl	800406c <HAL_RCC_GetPCLK2Freq>
 80041d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041d8:	e003      	b.n	80041e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041da:	f7ff ff33 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 80041de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ec:	f040 810c 	bne.w	8004408 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041f4:	2200      	movs	r2, #0
 80041f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004202:	4622      	mov	r2, r4
 8004204:	462b      	mov	r3, r5
 8004206:	1891      	adds	r1, r2, r2
 8004208:	65b9      	str	r1, [r7, #88]	; 0x58
 800420a:	415b      	adcs	r3, r3
 800420c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800420e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004212:	4621      	mov	r1, r4
 8004214:	eb12 0801 	adds.w	r8, r2, r1
 8004218:	4629      	mov	r1, r5
 800421a:	eb43 0901 	adc.w	r9, r3, r1
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800422a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800422e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004232:	4690      	mov	r8, r2
 8004234:	4699      	mov	r9, r3
 8004236:	4623      	mov	r3, r4
 8004238:	eb18 0303 	adds.w	r3, r8, r3
 800423c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004240:	462b      	mov	r3, r5
 8004242:	eb49 0303 	adc.w	r3, r9, r3
 8004246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800424a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004256:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800425a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800425e:	460b      	mov	r3, r1
 8004260:	18db      	adds	r3, r3, r3
 8004262:	653b      	str	r3, [r7, #80]	; 0x50
 8004264:	4613      	mov	r3, r2
 8004266:	eb42 0303 	adc.w	r3, r2, r3
 800426a:	657b      	str	r3, [r7, #84]	; 0x54
 800426c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004270:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004274:	f7fb fffc 	bl	8000270 <__aeabi_uldivmod>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4b61      	ldr	r3, [pc, #388]	; (8004404 <UART_SetConfig+0x2d4>)
 800427e:	fba3 2302 	umull	r2, r3, r3, r2
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	011c      	lsls	r4, r3, #4
 8004286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800428a:	2200      	movs	r2, #0
 800428c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004290:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004294:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004298:	4642      	mov	r2, r8
 800429a:	464b      	mov	r3, r9
 800429c:	1891      	adds	r1, r2, r2
 800429e:	64b9      	str	r1, [r7, #72]	; 0x48
 80042a0:	415b      	adcs	r3, r3
 80042a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042a8:	4641      	mov	r1, r8
 80042aa:	eb12 0a01 	adds.w	sl, r2, r1
 80042ae:	4649      	mov	r1, r9
 80042b0:	eb43 0b01 	adc.w	fp, r3, r1
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042c8:	4692      	mov	sl, r2
 80042ca:	469b      	mov	fp, r3
 80042cc:	4643      	mov	r3, r8
 80042ce:	eb1a 0303 	adds.w	r3, sl, r3
 80042d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042d6:	464b      	mov	r3, r9
 80042d8:	eb4b 0303 	adc.w	r3, fp, r3
 80042dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042f4:	460b      	mov	r3, r1
 80042f6:	18db      	adds	r3, r3, r3
 80042f8:	643b      	str	r3, [r7, #64]	; 0x40
 80042fa:	4613      	mov	r3, r2
 80042fc:	eb42 0303 	adc.w	r3, r2, r3
 8004300:	647b      	str	r3, [r7, #68]	; 0x44
 8004302:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004306:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800430a:	f7fb ffb1 	bl	8000270 <__aeabi_uldivmod>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4611      	mov	r1, r2
 8004314:	4b3b      	ldr	r3, [pc, #236]	; (8004404 <UART_SetConfig+0x2d4>)
 8004316:	fba3 2301 	umull	r2, r3, r3, r1
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	2264      	movs	r2, #100	; 0x64
 800431e:	fb02 f303 	mul.w	r3, r2, r3
 8004322:	1acb      	subs	r3, r1, r3
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800432a:	4b36      	ldr	r3, [pc, #216]	; (8004404 <UART_SetConfig+0x2d4>)
 800432c:	fba3 2302 	umull	r2, r3, r3, r2
 8004330:	095b      	lsrs	r3, r3, #5
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004338:	441c      	add	r4, r3
 800433a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800433e:	2200      	movs	r2, #0
 8004340:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004344:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004348:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800434c:	4642      	mov	r2, r8
 800434e:	464b      	mov	r3, r9
 8004350:	1891      	adds	r1, r2, r2
 8004352:	63b9      	str	r1, [r7, #56]	; 0x38
 8004354:	415b      	adcs	r3, r3
 8004356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004358:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800435c:	4641      	mov	r1, r8
 800435e:	1851      	adds	r1, r2, r1
 8004360:	6339      	str	r1, [r7, #48]	; 0x30
 8004362:	4649      	mov	r1, r9
 8004364:	414b      	adcs	r3, r1
 8004366:	637b      	str	r3, [r7, #52]	; 0x34
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004374:	4659      	mov	r1, fp
 8004376:	00cb      	lsls	r3, r1, #3
 8004378:	4651      	mov	r1, sl
 800437a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800437e:	4651      	mov	r1, sl
 8004380:	00ca      	lsls	r2, r1, #3
 8004382:	4610      	mov	r0, r2
 8004384:	4619      	mov	r1, r3
 8004386:	4603      	mov	r3, r0
 8004388:	4642      	mov	r2, r8
 800438a:	189b      	adds	r3, r3, r2
 800438c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004390:	464b      	mov	r3, r9
 8004392:	460a      	mov	r2, r1
 8004394:	eb42 0303 	adc.w	r3, r2, r3
 8004398:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800439c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043b0:	460b      	mov	r3, r1
 80043b2:	18db      	adds	r3, r3, r3
 80043b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043b6:	4613      	mov	r3, r2
 80043b8:	eb42 0303 	adc.w	r3, r2, r3
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043c6:	f7fb ff53 	bl	8000270 <__aeabi_uldivmod>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <UART_SetConfig+0x2d4>)
 80043d0:	fba3 1302 	umull	r1, r3, r3, r2
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	2164      	movs	r1, #100	; 0x64
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	3332      	adds	r3, #50	; 0x32
 80043e2:	4a08      	ldr	r2, [pc, #32]	; (8004404 <UART_SetConfig+0x2d4>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	f003 0207 	and.w	r2, r3, #7
 80043ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4422      	add	r2, r4
 80043f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043f8:	e105      	b.n	8004606 <UART_SetConfig+0x4d6>
 80043fa:	bf00      	nop
 80043fc:	40011000 	.word	0x40011000
 8004400:	40011400 	.word	0x40011400
 8004404:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800440c:	2200      	movs	r2, #0
 800440e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004412:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004416:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800441a:	4642      	mov	r2, r8
 800441c:	464b      	mov	r3, r9
 800441e:	1891      	adds	r1, r2, r2
 8004420:	6239      	str	r1, [r7, #32]
 8004422:	415b      	adcs	r3, r3
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
 8004426:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800442a:	4641      	mov	r1, r8
 800442c:	1854      	adds	r4, r2, r1
 800442e:	4649      	mov	r1, r9
 8004430:	eb43 0501 	adc.w	r5, r3, r1
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	00eb      	lsls	r3, r5, #3
 800443e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004442:	00e2      	lsls	r2, r4, #3
 8004444:	4614      	mov	r4, r2
 8004446:	461d      	mov	r5, r3
 8004448:	4643      	mov	r3, r8
 800444a:	18e3      	adds	r3, r4, r3
 800444c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004450:	464b      	mov	r3, r9
 8004452:	eb45 0303 	adc.w	r3, r5, r3
 8004456:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800445a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004466:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004476:	4629      	mov	r1, r5
 8004478:	008b      	lsls	r3, r1, #2
 800447a:	4621      	mov	r1, r4
 800447c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004480:	4621      	mov	r1, r4
 8004482:	008a      	lsls	r2, r1, #2
 8004484:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004488:	f7fb fef2 	bl	8000270 <__aeabi_uldivmod>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4b60      	ldr	r3, [pc, #384]	; (8004614 <UART_SetConfig+0x4e4>)
 8004492:	fba3 2302 	umull	r2, r3, r3, r2
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	011c      	lsls	r4, r3, #4
 800449a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800449e:	2200      	movs	r2, #0
 80044a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044ac:	4642      	mov	r2, r8
 80044ae:	464b      	mov	r3, r9
 80044b0:	1891      	adds	r1, r2, r2
 80044b2:	61b9      	str	r1, [r7, #24]
 80044b4:	415b      	adcs	r3, r3
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044bc:	4641      	mov	r1, r8
 80044be:	1851      	adds	r1, r2, r1
 80044c0:	6139      	str	r1, [r7, #16]
 80044c2:	4649      	mov	r1, r9
 80044c4:	414b      	adcs	r3, r1
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044d4:	4659      	mov	r1, fp
 80044d6:	00cb      	lsls	r3, r1, #3
 80044d8:	4651      	mov	r1, sl
 80044da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044de:	4651      	mov	r1, sl
 80044e0:	00ca      	lsls	r2, r1, #3
 80044e2:	4610      	mov	r0, r2
 80044e4:	4619      	mov	r1, r3
 80044e6:	4603      	mov	r3, r0
 80044e8:	4642      	mov	r2, r8
 80044ea:	189b      	adds	r3, r3, r2
 80044ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044f0:	464b      	mov	r3, r9
 80044f2:	460a      	mov	r2, r1
 80044f4:	eb42 0303 	adc.w	r3, r2, r3
 80044f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	67bb      	str	r3, [r7, #120]	; 0x78
 8004506:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004514:	4649      	mov	r1, r9
 8004516:	008b      	lsls	r3, r1, #2
 8004518:	4641      	mov	r1, r8
 800451a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800451e:	4641      	mov	r1, r8
 8004520:	008a      	lsls	r2, r1, #2
 8004522:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004526:	f7fb fea3 	bl	8000270 <__aeabi_uldivmod>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4b39      	ldr	r3, [pc, #228]	; (8004614 <UART_SetConfig+0x4e4>)
 8004530:	fba3 1302 	umull	r1, r3, r3, r2
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	2164      	movs	r1, #100	; 0x64
 8004538:	fb01 f303 	mul.w	r3, r1, r3
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	3332      	adds	r3, #50	; 0x32
 8004542:	4a34      	ldr	r2, [pc, #208]	; (8004614 <UART_SetConfig+0x4e4>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	095b      	lsrs	r3, r3, #5
 800454a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800454e:	441c      	add	r4, r3
 8004550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004554:	2200      	movs	r2, #0
 8004556:	673b      	str	r3, [r7, #112]	; 0x70
 8004558:	677a      	str	r2, [r7, #116]	; 0x74
 800455a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800455e:	4642      	mov	r2, r8
 8004560:	464b      	mov	r3, r9
 8004562:	1891      	adds	r1, r2, r2
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	415b      	adcs	r3, r3
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800456e:	4641      	mov	r1, r8
 8004570:	1851      	adds	r1, r2, r1
 8004572:	6039      	str	r1, [r7, #0]
 8004574:	4649      	mov	r1, r9
 8004576:	414b      	adcs	r3, r1
 8004578:	607b      	str	r3, [r7, #4]
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004586:	4659      	mov	r1, fp
 8004588:	00cb      	lsls	r3, r1, #3
 800458a:	4651      	mov	r1, sl
 800458c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004590:	4651      	mov	r1, sl
 8004592:	00ca      	lsls	r2, r1, #3
 8004594:	4610      	mov	r0, r2
 8004596:	4619      	mov	r1, r3
 8004598:	4603      	mov	r3, r0
 800459a:	4642      	mov	r2, r8
 800459c:	189b      	adds	r3, r3, r2
 800459e:	66bb      	str	r3, [r7, #104]	; 0x68
 80045a0:	464b      	mov	r3, r9
 80045a2:	460a      	mov	r2, r1
 80045a4:	eb42 0303 	adc.w	r3, r2, r3
 80045a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	663b      	str	r3, [r7, #96]	; 0x60
 80045b4:	667a      	str	r2, [r7, #100]	; 0x64
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045c2:	4649      	mov	r1, r9
 80045c4:	008b      	lsls	r3, r1, #2
 80045c6:	4641      	mov	r1, r8
 80045c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045cc:	4641      	mov	r1, r8
 80045ce:	008a      	lsls	r2, r1, #2
 80045d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045d4:	f7fb fe4c 	bl	8000270 <__aeabi_uldivmod>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4b0d      	ldr	r3, [pc, #52]	; (8004614 <UART_SetConfig+0x4e4>)
 80045de:	fba3 1302 	umull	r1, r3, r3, r2
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	2164      	movs	r1, #100	; 0x64
 80045e6:	fb01 f303 	mul.w	r3, r1, r3
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	3332      	adds	r3, #50	; 0x32
 80045f0:	4a08      	ldr	r2, [pc, #32]	; (8004614 <UART_SetConfig+0x4e4>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	f003 020f 	and.w	r2, r3, #15
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4422      	add	r2, r4
 8004604:	609a      	str	r2, [r3, #8]
}
 8004606:	bf00      	nop
 8004608:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800460c:	46bd      	mov	sp, r7
 800460e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004612:	bf00      	nop
 8004614:	51eb851f 	.word	0x51eb851f

08004618 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004618:	b084      	sub	sp, #16
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	f107 001c 	add.w	r0, r7, #28
 8004626:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462c:	2b01      	cmp	r3, #1
 800462e:	d122      	bne.n	8004676 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800465a:	2b01      	cmp	r3, #1
 800465c:	d105      	bne.n	800466a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f001 fbee 	bl	8005e4c <USB_CoreReset>
 8004670:	4603      	mov	r3, r0
 8004672:	73fb      	strb	r3, [r7, #15]
 8004674:	e01a      	b.n	80046ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f001 fbe2 	bl	8005e4c <USB_CoreReset>
 8004688:	4603      	mov	r3, r0
 800468a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800468c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	639a      	str	r2, [r3, #56]	; 0x38
 800469e:	e005      	b.n	80046ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d10b      	bne.n	80046ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f043 0206 	orr.w	r2, r3, #6
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f043 0220 	orr.w	r2, r3, #32
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046d6:	b004      	add	sp, #16
 80046d8:	4770      	bx	lr
	...

080046dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	4613      	mov	r3, r2
 80046e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d165      	bne.n	80047bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4a41      	ldr	r2, [pc, #260]	; (80047f8 <USB_SetTurnaroundTime+0x11c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d906      	bls.n	8004706 <USB_SetTurnaroundTime+0x2a>
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4a40      	ldr	r2, [pc, #256]	; (80047fc <USB_SetTurnaroundTime+0x120>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d202      	bcs.n	8004706 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004700:	230f      	movs	r3, #15
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	e062      	b.n	80047cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	4a3c      	ldr	r2, [pc, #240]	; (80047fc <USB_SetTurnaroundTime+0x120>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d306      	bcc.n	800471c <USB_SetTurnaroundTime+0x40>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	4a3b      	ldr	r2, [pc, #236]	; (8004800 <USB_SetTurnaroundTime+0x124>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d202      	bcs.n	800471c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004716:	230e      	movs	r3, #14
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	e057      	b.n	80047cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4a38      	ldr	r2, [pc, #224]	; (8004800 <USB_SetTurnaroundTime+0x124>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d306      	bcc.n	8004732 <USB_SetTurnaroundTime+0x56>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4a37      	ldr	r2, [pc, #220]	; (8004804 <USB_SetTurnaroundTime+0x128>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d202      	bcs.n	8004732 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800472c:	230d      	movs	r3, #13
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	e04c      	b.n	80047cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	4a33      	ldr	r2, [pc, #204]	; (8004804 <USB_SetTurnaroundTime+0x128>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d306      	bcc.n	8004748 <USB_SetTurnaroundTime+0x6c>
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4a32      	ldr	r2, [pc, #200]	; (8004808 <USB_SetTurnaroundTime+0x12c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d802      	bhi.n	8004748 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004742:	230c      	movs	r3, #12
 8004744:	617b      	str	r3, [r7, #20]
 8004746:	e041      	b.n	80047cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4a2f      	ldr	r2, [pc, #188]	; (8004808 <USB_SetTurnaroundTime+0x12c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d906      	bls.n	800475e <USB_SetTurnaroundTime+0x82>
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4a2e      	ldr	r2, [pc, #184]	; (800480c <USB_SetTurnaroundTime+0x130>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d802      	bhi.n	800475e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004758:	230b      	movs	r3, #11
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	e036      	b.n	80047cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4a2a      	ldr	r2, [pc, #168]	; (800480c <USB_SetTurnaroundTime+0x130>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d906      	bls.n	8004774 <USB_SetTurnaroundTime+0x98>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4a29      	ldr	r2, [pc, #164]	; (8004810 <USB_SetTurnaroundTime+0x134>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d802      	bhi.n	8004774 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800476e:	230a      	movs	r3, #10
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	e02b      	b.n	80047cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4a26      	ldr	r2, [pc, #152]	; (8004810 <USB_SetTurnaroundTime+0x134>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d906      	bls.n	800478a <USB_SetTurnaroundTime+0xae>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4a25      	ldr	r2, [pc, #148]	; (8004814 <USB_SetTurnaroundTime+0x138>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d202      	bcs.n	800478a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004784:	2309      	movs	r3, #9
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	e020      	b.n	80047cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4a21      	ldr	r2, [pc, #132]	; (8004814 <USB_SetTurnaroundTime+0x138>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d306      	bcc.n	80047a0 <USB_SetTurnaroundTime+0xc4>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4a20      	ldr	r2, [pc, #128]	; (8004818 <USB_SetTurnaroundTime+0x13c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d802      	bhi.n	80047a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800479a:	2308      	movs	r3, #8
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	e015      	b.n	80047cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4a1d      	ldr	r2, [pc, #116]	; (8004818 <USB_SetTurnaroundTime+0x13c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d906      	bls.n	80047b6 <USB_SetTurnaroundTime+0xda>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4a1c      	ldr	r2, [pc, #112]	; (800481c <USB_SetTurnaroundTime+0x140>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d202      	bcs.n	80047b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80047b0:	2307      	movs	r3, #7
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	e00a      	b.n	80047cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80047b6:	2306      	movs	r3, #6
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	e007      	b.n	80047cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80047bc:	79fb      	ldrb	r3, [r7, #7]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d102      	bne.n	80047c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80047c2:	2309      	movs	r3, #9
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	e001      	b.n	80047cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80047c8:	2309      	movs	r3, #9
 80047ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	029b      	lsls	r3, r3, #10
 80047e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80047e4:	431a      	orrs	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	00d8acbf 	.word	0x00d8acbf
 80047fc:	00e4e1c0 	.word	0x00e4e1c0
 8004800:	00f42400 	.word	0x00f42400
 8004804:	01067380 	.word	0x01067380
 8004808:	011a499f 	.word	0x011a499f
 800480c:	01312cff 	.word	0x01312cff
 8004810:	014ca43f 	.word	0x014ca43f
 8004814:	016e3600 	.word	0x016e3600
 8004818:	01a6ab1f 	.word	0x01a6ab1f
 800481c:	01e84800 	.word	0x01e84800

08004820 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f043 0201 	orr.w	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f023 0201 	bic.w	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d115      	bne.n	80048b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004892:	2001      	movs	r0, #1
 8004894:	f7fc fc86 	bl	80011a4 <HAL_Delay>
      ms++;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3301      	adds	r3, #1
 800489c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f001 fa45 	bl	8005d2e <USB_GetMode>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d01e      	beq.n	80048e8 <USB_SetCurrentMode+0x84>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b31      	cmp	r3, #49	; 0x31
 80048ae:	d9f0      	bls.n	8004892 <USB_SetCurrentMode+0x2e>
 80048b0:	e01a      	b.n	80048e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048b2:	78fb      	ldrb	r3, [r7, #3]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d115      	bne.n	80048e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048c4:	2001      	movs	r0, #1
 80048c6:	f7fc fc6d 	bl	80011a4 <HAL_Delay>
      ms++;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3301      	adds	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f001 fa2c 	bl	8005d2e <USB_GetMode>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <USB_SetCurrentMode+0x84>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b31      	cmp	r3, #49	; 0x31
 80048e0:	d9f0      	bls.n	80048c4 <USB_SetCurrentMode+0x60>
 80048e2:	e001      	b.n	80048e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e005      	b.n	80048f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b32      	cmp	r3, #50	; 0x32
 80048ec:	d101      	bne.n	80048f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048fc:	b084      	sub	sp, #16
 80048fe:	b580      	push	{r7, lr}
 8004900:	b086      	sub	sp, #24
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800490a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004916:	2300      	movs	r3, #0
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	e009      	b.n	8004930 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	3340      	adds	r3, #64	; 0x40
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	2200      	movs	r2, #0
 8004928:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	3301      	adds	r3, #1
 800492e:	613b      	str	r3, [r7, #16]
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b0e      	cmp	r3, #14
 8004934:	d9f2      	bls.n	800491c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004938:	2b00      	cmp	r3, #0
 800493a:	d11c      	bne.n	8004976 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800494a:	f043 0302 	orr.w	r3, r3, #2
 800494e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	639a      	str	r2, [r3, #56]	; 0x38
 8004974:	e00b      	b.n	800498e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004994:	461a      	mov	r2, r3
 8004996:	2300      	movs	r3, #0
 8004998:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a0:	4619      	mov	r1, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a8:	461a      	mov	r2, r3
 80049aa:	680b      	ldr	r3, [r1, #0]
 80049ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d10c      	bne.n	80049ce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d104      	bne.n	80049c4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049ba:	2100      	movs	r1, #0
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f965 	bl	8004c8c <USB_SetDevSpeed>
 80049c2:	e008      	b.n	80049d6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049c4:	2101      	movs	r1, #1
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f960 	bl	8004c8c <USB_SetDevSpeed>
 80049cc:	e003      	b.n	80049d6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049ce:	2103      	movs	r1, #3
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f95b 	bl	8004c8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049d6:	2110      	movs	r1, #16
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f8f3 	bl	8004bc4 <USB_FlushTxFifo>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f91f 	bl	8004c2c <USB_FlushRxFifo>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fe:	461a      	mov	r2, r3
 8004a00:	2300      	movs	r3, #0
 8004a02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a16:	461a      	mov	r2, r3
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	e043      	b.n	8004aaa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a38:	d118      	bne.n	8004a6c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	e013      	b.n	8004a7e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a62:	461a      	mov	r2, r3
 8004a64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e008      	b.n	8004a7e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a78:	461a      	mov	r2, r3
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004aa2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d3b7      	bcc.n	8004a22 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	e043      	b.n	8004b40 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ace:	d118      	bne.n	8004b02 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10a      	bne.n	8004aec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e013      	b.n	8004b14 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af8:	461a      	mov	r2, r3
 8004afa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	e008      	b.n	8004b14 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0e:	461a      	mov	r2, r3
 8004b10:	2300      	movs	r3, #0
 8004b12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b20:	461a      	mov	r2, r3
 8004b22:	2300      	movs	r3, #0
 8004b24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b32:	461a      	mov	r2, r3
 8004b34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d3b7      	bcc.n	8004ab8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d105      	bne.n	8004b7c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	f043 0210 	orr.w	r2, r3, #16
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699a      	ldr	r2, [r3, #24]
 8004b80:	4b0f      	ldr	r3, [pc, #60]	; (8004bc0 <USB_DevInit+0x2c4>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	f043 0208 	orr.w	r2, r3, #8
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d107      	bne.n	8004bb0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ba8:	f043 0304 	orr.w	r3, r3, #4
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bbc:	b004      	add	sp, #16
 8004bbe:	4770      	bx	lr
 8004bc0:	803c3800 	.word	0x803c3800

08004bc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4a13      	ldr	r2, [pc, #76]	; (8004c28 <USB_FlushTxFifo+0x64>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d901      	bls.n	8004be4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e01b      	b.n	8004c1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	daf2      	bge.n	8004bd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	019b      	lsls	r3, r3, #6
 8004bf4:	f043 0220 	orr.w	r2, r3, #32
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4a08      	ldr	r2, [pc, #32]	; (8004c28 <USB_FlushTxFifo+0x64>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e006      	b.n	8004c1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d0f0      	beq.n	8004bfc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	00030d40 	.word	0x00030d40

08004c2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a11      	ldr	r2, [pc, #68]	; (8004c88 <USB_FlushRxFifo+0x5c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e018      	b.n	8004c7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	daf2      	bge.n	8004c38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2210      	movs	r2, #16
 8004c5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a08      	ldr	r2, [pc, #32]	; (8004c88 <USB_FlushRxFifo+0x5c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e006      	b.n	8004c7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b10      	cmp	r3, #16
 8004c78:	d0f0      	beq.n	8004c5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	00030d40 	.word	0x00030d40

08004c8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	68f9      	ldr	r1, [r7, #12]
 8004ca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cac:	4313      	orrs	r3, r2
 8004cae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b087      	sub	sp, #28
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 0306 	and.w	r3, r3, #6
 8004cd6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d102      	bne.n	8004ce4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	75fb      	strb	r3, [r7, #23]
 8004ce2:	e00a      	b.n	8004cfa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d002      	beq.n	8004cf0 <USB_GetDevSpeed+0x32>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b06      	cmp	r3, #6
 8004cee:	d102      	bne.n	8004cf6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	75fb      	strb	r3, [r7, #23]
 8004cf4:	e001      	b.n	8004cfa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004cf6:	230f      	movs	r3, #15
 8004cf8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d13a      	bne.n	8004d9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2a:	69da      	ldr	r2, [r3, #28]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	f003 030f 	and.w	r3, r3, #15
 8004d34:	2101      	movs	r1, #1
 8004d36:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	68f9      	ldr	r1, [r7, #12]
 8004d3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d42:	4313      	orrs	r3, r2
 8004d44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d155      	bne.n	8004e08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	791b      	ldrb	r3, [r3, #4]
 8004d76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	059b      	lsls	r3, r3, #22
 8004d7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d80:	4313      	orrs	r3, r2
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	0151      	lsls	r1, r2, #5
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	440a      	add	r2, r1
 8004d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	e036      	b.n	8004e08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da0:	69da      	ldr	r2, [r3, #28]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	2101      	movs	r1, #1
 8004dac:	fa01 f303 	lsl.w	r3, r1, r3
 8004db0:	041b      	lsls	r3, r3, #16
 8004db2:	68f9      	ldr	r1, [r7, #12]
 8004db4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004db8:	4313      	orrs	r3, r2
 8004dba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d11a      	bne.n	8004e08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	791b      	ldrb	r3, [r3, #4]
 8004dec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dee:	430b      	orrs	r3, r1
 8004df0:	4313      	orrs	r3, r2
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	0151      	lsls	r1, r2, #5
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	440a      	add	r2, r1
 8004dfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	785b      	ldrb	r3, [r3, #1]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d161      	bne.n	8004ef8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e4a:	d11f      	bne.n	8004e8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	0151      	lsls	r1, r2, #5
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	440a      	add	r2, r1
 8004e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	0151      	lsls	r1, r2, #5
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	440a      	add	r2, r1
 8004e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	68f9      	ldr	r1, [r7, #12]
 8004ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eac:	4013      	ands	r3, r2
 8004eae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	68f9      	ldr	r1, [r7, #12]
 8004ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	0159      	lsls	r1, r3, #5
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	440b      	add	r3, r1
 8004eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4b35      	ldr	r3, [pc, #212]	; (8004fc8 <USB_DeactivateEndpoint+0x1b0>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	600b      	str	r3, [r1, #0]
 8004ef6:	e060      	b.n	8004fba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f0e:	d11f      	bne.n	8004f50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	0151      	lsls	r1, r2, #5
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	440a      	add	r2, r1
 8004f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	0151      	lsls	r1, r2, #5
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	440a      	add	r2, r1
 8004f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	2101      	movs	r1, #1
 8004f62:	fa01 f303 	lsl.w	r3, r1, r3
 8004f66:	041b      	lsls	r3, r3, #16
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	68f9      	ldr	r1, [r7, #12]
 8004f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f70:	4013      	ands	r3, r2
 8004f72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7a:	69da      	ldr	r2, [r3, #28]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	f003 030f 	and.w	r3, r3, #15
 8004f84:	2101      	movs	r1, #1
 8004f86:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8a:	041b      	lsls	r3, r3, #16
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	68f9      	ldr	r1, [r7, #12]
 8004f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f94:	4013      	ands	r3, r2
 8004f96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	0159      	lsls	r1, r3, #5
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	440b      	add	r3, r1
 8004fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <USB_DeactivateEndpoint+0x1b4>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	ec337800 	.word	0xec337800
 8004fcc:	eff37800 	.word	0xeff37800

08004fd0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08a      	sub	sp, #40	; 0x28
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	785b      	ldrb	r3, [r3, #1]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	f040 815c 	bne.w	80052aa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d132      	bne.n	8005060 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	0151      	lsls	r1, r2, #5
 800500c:	69fa      	ldr	r2, [r7, #28]
 800500e:	440a      	add	r2, r1
 8005010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005014:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005018:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800501c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	0151      	lsls	r1, r2, #5
 8005030:	69fa      	ldr	r2, [r7, #28]
 8005032:	440a      	add	r2, r1
 8005034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005038:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800503c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	0151      	lsls	r1, r2, #5
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	440a      	add	r2, r1
 8005054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005058:	0cdb      	lsrs	r3, r3, #19
 800505a:	04db      	lsls	r3, r3, #19
 800505c:	6113      	str	r3, [r2, #16]
 800505e:	e074      	b.n	800514a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	0151      	lsls	r1, r2, #5
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	440a      	add	r2, r1
 8005076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507a:	0cdb      	lsrs	r3, r3, #19
 800507c:	04db      	lsls	r3, r3, #19
 800507e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	0151      	lsls	r1, r2, #5
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	440a      	add	r2, r1
 8005096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800509a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800509e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	6999      	ldr	r1, [r3, #24]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	440b      	add	r3, r1
 80050bc:	1e59      	subs	r1, r3, #1
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80050c6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050c8:	4b9d      	ldr	r3, [pc, #628]	; (8005340 <USB_EPStartXfer+0x370>)
 80050ca:	400b      	ands	r3, r1
 80050cc:	69b9      	ldr	r1, [r7, #24]
 80050ce:	0148      	lsls	r0, r1, #5
 80050d0:	69f9      	ldr	r1, [r7, #28]
 80050d2:	4401      	add	r1, r0
 80050d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050d8:	4313      	orrs	r3, r2
 80050da:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e8:	691a      	ldr	r2, [r3, #16]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050f2:	69b9      	ldr	r1, [r7, #24]
 80050f4:	0148      	lsls	r0, r1, #5
 80050f6:	69f9      	ldr	r1, [r7, #28]
 80050f8:	4401      	add	r1, r0
 80050fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050fe:	4313      	orrs	r3, r2
 8005100:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	791b      	ldrb	r3, [r3, #4]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d11f      	bne.n	800514a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005124:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005128:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	0151      	lsls	r1, r2, #5
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	440a      	add	r2, r1
 8005140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005144:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005148:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d14b      	bne.n	80051e8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d009      	beq.n	800516c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005164:	461a      	mov	r2, r3
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	791b      	ldrb	r3, [r3, #4]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d128      	bne.n	80051c6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005180:	2b00      	cmp	r3, #0
 8005182:	d110      	bne.n	80051a6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	0151      	lsls	r1, r2, #5
 8005196:	69fa      	ldr	r2, [r7, #28]
 8005198:	440a      	add	r2, r1
 800519a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	e00f      	b.n	80051c6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	0151      	lsls	r1, r2, #5
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	440a      	add	r2, r1
 80051bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	0151      	lsls	r1, r2, #5
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	440a      	add	r2, r1
 80051dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	e133      	b.n	8005450 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005202:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005206:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	791b      	ldrb	r3, [r3, #4]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d015      	beq.n	800523c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 811b 	beq.w	8005450 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	2101      	movs	r1, #1
 800522c:	fa01 f303 	lsl.w	r3, r1, r3
 8005230:	69f9      	ldr	r1, [r7, #28]
 8005232:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005236:	4313      	orrs	r3, r2
 8005238:	634b      	str	r3, [r1, #52]	; 0x34
 800523a:	e109      	b.n	8005450 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005248:	2b00      	cmp	r3, #0
 800524a:	d110      	bne.n	800526e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	0151      	lsls	r1, r2, #5
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	440a      	add	r2, r1
 8005262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005266:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	e00f      	b.n	800528e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	0151      	lsls	r1, r2, #5
 8005280:	69fa      	ldr	r2, [r7, #28]
 8005282:	440a      	add	r2, r1
 8005284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800528c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	6919      	ldr	r1, [r3, #16]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	781a      	ldrb	r2, [r3, #0]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	b298      	uxth	r0, r3
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	4603      	mov	r3, r0
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 fade 	bl	8005864 <USB_WritePacket>
 80052a8:	e0d2      	b.n	8005450 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c4:	0cdb      	lsrs	r3, r3, #19
 80052c6:	04db      	lsls	r3, r3, #19
 80052c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	0151      	lsls	r1, r2, #5
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	440a      	add	r2, r1
 80052e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d126      	bne.n	8005344 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005302:	691a      	ldr	r2, [r3, #16]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800530c:	69b9      	ldr	r1, [r7, #24]
 800530e:	0148      	lsls	r0, r1, #5
 8005310:	69f9      	ldr	r1, [r7, #28]
 8005312:	4401      	add	r1, r0
 8005314:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005318:	4313      	orrs	r3, r2
 800531a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	0151      	lsls	r1, r2, #5
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	440a      	add	r2, r1
 8005332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800533a:	6113      	str	r3, [r2, #16]
 800533c:	e03a      	b.n	80053b4 <USB_EPStartXfer+0x3e4>
 800533e:	bf00      	nop
 8005340:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	699a      	ldr	r2, [r3, #24]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	4413      	add	r3, r2
 800534e:	1e5a      	subs	r2, r3, #1
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	fbb2 f3f3 	udiv	r3, r2, r3
 8005358:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	8afa      	ldrh	r2, [r7, #22]
 8005360:	fb03 f202 	mul.w	r2, r3, r2
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	8afb      	ldrh	r3, [r7, #22]
 8005378:	04d9      	lsls	r1, r3, #19
 800537a:	4b38      	ldr	r3, [pc, #224]	; (800545c <USB_EPStartXfer+0x48c>)
 800537c:	400b      	ands	r3, r1
 800537e:	69b9      	ldr	r1, [r7, #24]
 8005380:	0148      	lsls	r0, r1, #5
 8005382:	69f9      	ldr	r1, [r7, #28]
 8005384:	4401      	add	r1, r0
 8005386:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800538a:	4313      	orrs	r3, r2
 800538c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053a4:	69b9      	ldr	r1, [r7, #24]
 80053a6:	0148      	lsls	r0, r1, #5
 80053a8:	69f9      	ldr	r1, [r7, #28]
 80053aa:	4401      	add	r1, r0
 80053ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053b0:	4313      	orrs	r3, r2
 80053b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053b4:	79fb      	ldrb	r3, [r7, #7]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d10d      	bne.n	80053d6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d009      	beq.n	80053d6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	6919      	ldr	r1, [r3, #16]
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d2:	460a      	mov	r2, r1
 80053d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	791b      	ldrb	r3, [r3, #4]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d128      	bne.n	8005430 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d110      	bne.n	8005410 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	0151      	lsls	r1, r2, #5
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	440a      	add	r2, r1
 8005404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005408:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	e00f      	b.n	8005430 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	0151      	lsls	r1, r2, #5
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	440a      	add	r2, r1
 8005426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800542a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800542e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	0151      	lsls	r1, r2, #5
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	440a      	add	r2, r1
 8005446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800544e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3720      	adds	r7, #32
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	1ff80000 	.word	0x1ff80000

08005460 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	4613      	mov	r3, r2
 800546c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	785b      	ldrb	r3, [r3, #1]
 800547c:	2b01      	cmp	r3, #1
 800547e:	f040 80ce 	bne.w	800561e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d132      	bne.n	80054f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	0151      	lsls	r1, r2, #5
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	440a      	add	r2, r1
 80054a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	0151      	lsls	r1, r2, #5
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	440a      	add	r2, r1
 80054c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	0151      	lsls	r1, r2, #5
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	440a      	add	r2, r1
 80054e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e8:	0cdb      	lsrs	r3, r3, #19
 80054ea:	04db      	lsls	r3, r3, #19
 80054ec:	6113      	str	r3, [r2, #16]
 80054ee:	e04e      	b.n	800558e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	0151      	lsls	r1, r2, #5
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	440a      	add	r2, r1
 8005506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800550a:	0cdb      	lsrs	r3, r3, #19
 800550c:	04db      	lsls	r3, r3, #19
 800550e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	0151      	lsls	r1, r2, #5
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	440a      	add	r2, r1
 8005526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800552e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005532:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	699a      	ldr	r2, [r3, #24]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	429a      	cmp	r2, r3
 800553e:	d903      	bls.n	8005548 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	0151      	lsls	r1, r2, #5
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	440a      	add	r2, r1
 800555e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005562:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005566:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800557e:	6939      	ldr	r1, [r7, #16]
 8005580:	0148      	lsls	r0, r1, #5
 8005582:	6979      	ldr	r1, [r7, #20]
 8005584:	4401      	add	r1, r0
 8005586:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800558a:	4313      	orrs	r3, r2
 800558c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d11e      	bne.n	80055d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d009      	beq.n	80055b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	461a      	mov	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	e097      	b.n	8005702 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	0151      	lsls	r1, r2, #5
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	440a      	add	r2, r1
 80055e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 8083 	beq.w	8005702 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	2101      	movs	r1, #1
 800560e:	fa01 f303 	lsl.w	r3, r1, r3
 8005612:	6979      	ldr	r1, [r7, #20]
 8005614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005618:	4313      	orrs	r3, r2
 800561a:	634b      	str	r3, [r1, #52]	; 0x34
 800561c:	e071      	b.n	8005702 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	0151      	lsls	r1, r2, #5
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	440a      	add	r2, r1
 8005634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005638:	0cdb      	lsrs	r3, r3, #19
 800563a:	04db      	lsls	r3, r3, #19
 800563c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	0151      	lsls	r1, r2, #5
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	440a      	add	r2, r1
 8005654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005658:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800565c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005660:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	0151      	lsls	r1, r2, #5
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	440a      	add	r2, r1
 8005690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005694:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005698:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a6:	691a      	ldr	r2, [r3, #16]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056b0:	6939      	ldr	r1, [r7, #16]
 80056b2:	0148      	lsls	r0, r1, #5
 80056b4:	6979      	ldr	r1, [r7, #20]
 80056b6:	4401      	add	r1, r0
 80056b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056bc:	4313      	orrs	r3, r2
 80056be:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d10d      	bne.n	80056e2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	6919      	ldr	r1, [r3, #16]
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056de:	460a      	mov	r2, r1
 80056e0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	0151      	lsls	r1, r2, #5
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	440a      	add	r2, r1
 80056f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005700:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	371c      	adds	r7, #28
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	785b      	ldrb	r3, [r3, #1]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d14a      	bne.n	80057c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005746:	f040 8086 	bne.w	8005856 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	7812      	ldrb	r2, [r2, #0]
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	440a      	add	r2, r1
 8005764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005768:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800576c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	7812      	ldrb	r2, [r2, #0]
 8005782:	0151      	lsls	r1, r2, #5
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	440a      	add	r2, r1
 8005788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800578c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005790:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	3301      	adds	r3, #1
 8005796:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f242 7210 	movw	r2, #10000	; 0x2710
 800579e:	4293      	cmp	r3, r2
 80057a0:	d902      	bls.n	80057a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	75fb      	strb	r3, [r7, #23]
          break;
 80057a6:	e056      	b.n	8005856 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057c0:	d0e7      	beq.n	8005792 <USB_EPStopXfer+0x82>
 80057c2:	e048      	b.n	8005856 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057dc:	d13b      	bne.n	8005856 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	7812      	ldrb	r2, [r2, #0]
 80057f2:	0151      	lsls	r1, r2, #5
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	440a      	add	r2, r1
 80057f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005800:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	7812      	ldrb	r2, [r2, #0]
 8005816:	0151      	lsls	r1, r2, #5
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	440a      	add	r2, r1
 800581c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005820:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005824:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3301      	adds	r3, #1
 800582a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005832:	4293      	cmp	r3, r2
 8005834:	d902      	bls.n	800583c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	75fb      	strb	r3, [r7, #23]
          break;
 800583a:	e00c      	b.n	8005856 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005854:	d0e7      	beq.n	8005826 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005856:	7dfb      	ldrb	r3, [r7, #23]
}
 8005858:	4618      	mov	r0, r3
 800585a:	371c      	adds	r7, #28
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005864:	b480      	push	{r7}
 8005866:	b089      	sub	sp, #36	; 0x24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	4611      	mov	r1, r2
 8005870:	461a      	mov	r2, r3
 8005872:	460b      	mov	r3, r1
 8005874:	71fb      	strb	r3, [r7, #7]
 8005876:	4613      	mov	r3, r2
 8005878:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005882:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005886:	2b00      	cmp	r3, #0
 8005888:	d123      	bne.n	80058d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800588a:	88bb      	ldrh	r3, [r7, #4]
 800588c:	3303      	adds	r3, #3
 800588e:	089b      	lsrs	r3, r3, #2
 8005890:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005892:	2300      	movs	r3, #0
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	e018      	b.n	80058ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005898:	79fb      	ldrb	r3, [r7, #7]
 800589a:	031a      	lsls	r2, r3, #12
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a4:	461a      	mov	r2, r3
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	3301      	adds	r3, #1
 80058b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	3301      	adds	r3, #1
 80058b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	3301      	adds	r3, #1
 80058bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	3301      	adds	r3, #1
 80058c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	3301      	adds	r3, #1
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d3e2      	bcc.n	8005898 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3724      	adds	r7, #36	; 0x24
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b08b      	sub	sp, #44	; 0x2c
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	4613      	mov	r3, r2
 80058ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	089b      	lsrs	r3, r3, #2
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	f003 0303 	and.w	r3, r3, #3
 8005904:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005906:	2300      	movs	r3, #0
 8005908:	623b      	str	r3, [r7, #32]
 800590a:	e014      	b.n	8005936 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	601a      	str	r2, [r3, #0]
    pDest++;
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	3301      	adds	r3, #1
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	3301      	adds	r3, #1
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	3301      	adds	r3, #1
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	3301      	adds	r3, #1
 800592e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	3301      	adds	r3, #1
 8005934:	623b      	str	r3, [r7, #32]
 8005936:	6a3a      	ldr	r2, [r7, #32]
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	429a      	cmp	r2, r3
 800593c:	d3e6      	bcc.n	800590c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800593e:	8bfb      	ldrh	r3, [r7, #30]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01e      	beq.n	8005982 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800594e:	461a      	mov	r2, r3
 8005950:	f107 0310 	add.w	r3, r7, #16
 8005954:	6812      	ldr	r2, [r2, #0]
 8005956:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	fa22 f303 	lsr.w	r3, r2, r3
 8005964:	b2da      	uxtb	r2, r3
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	701a      	strb	r2, [r3, #0]
      i++;
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	3301      	adds	r3, #1
 800596e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	3301      	adds	r3, #1
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005976:	8bfb      	ldrh	r3, [r7, #30]
 8005978:	3b01      	subs	r3, #1
 800597a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800597c:	8bfb      	ldrh	r3, [r7, #30]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1ea      	bne.n	8005958 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005984:	4618      	mov	r0, r3
 8005986:	372c      	adds	r7, #44	; 0x2c
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	785b      	ldrb	r3, [r3, #1]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d12c      	bne.n	8005a06 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	db12      	blt.n	80059e4 <USB_EPSetStall+0x54>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00f      	beq.n	80059e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	0151      	lsls	r1, r2, #5
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	440a      	add	r2, r1
 80059da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	0151      	lsls	r1, r2, #5
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	440a      	add	r2, r1
 80059fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a02:	6013      	str	r3, [r2, #0]
 8005a04:	e02b      	b.n	8005a5e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	db12      	blt.n	8005a3e <USB_EPSetStall+0xae>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00f      	beq.n	8005a3e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	0151      	lsls	r1, r2, #5
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	440a      	add	r2, r1
 8005a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a3c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	0151      	lsls	r1, r2, #5
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	440a      	add	r2, r1
 8005a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	785b      	ldrb	r3, [r3, #1]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d128      	bne.n	8005ada <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	0151      	lsls	r1, r2, #5
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	440a      	add	r2, r1
 8005a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005aa6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	791b      	ldrb	r3, [r3, #4]
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d003      	beq.n	8005ab8 <USB_EPClearStall+0x4c>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	791b      	ldrb	r3, [r3, #4]
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d138      	bne.n	8005b2a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	0151      	lsls	r1, r2, #5
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	440a      	add	r2, r1
 8005ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad6:	6013      	str	r3, [r2, #0]
 8005ad8:	e027      	b.n	8005b2a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	0151      	lsls	r1, r2, #5
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	440a      	add	r2, r1
 8005af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005af8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	791b      	ldrb	r3, [r3, #4]
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	d003      	beq.n	8005b0a <USB_EPClearStall+0x9e>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	791b      	ldrb	r3, [r3, #4]
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d10f      	bne.n	8005b2a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	0151      	lsls	r1, r2, #5
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	440a      	add	r2, r1
 8005b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b28:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	460b      	mov	r3, r1
 8005b42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b5a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	78fb      	ldrb	r3, [r7, #3]
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005b6c:	68f9      	ldr	r1, [r7, #12]
 8005b6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b72:	4313      	orrs	r3, r2
 8005b74:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b9e:	f023 0303 	bic.w	r3, r3, #3
 8005ba2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bb2:	f023 0302 	bic.w	r3, r3, #2
 8005bb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b085      	sub	sp, #20
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005be0:	f023 0303 	bic.w	r3, r3, #3
 8005be4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bf4:	f043 0302 	orr.w	r3, r3, #2
 8005bf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c20:	68fb      	ldr	r3, [r7, #12]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b085      	sub	sp, #20
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	0c1b      	lsrs	r3, r3, #16
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b085      	sub	sp, #20
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	4013      	ands	r3, r2
 8005c84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	b29b      	uxth	r3, r3
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b085      	sub	sp, #20
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ca6:	78fb      	ldrb	r3, [r7, #3]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b087      	sub	sp, #28
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005cf6:	78fb      	ldrb	r3, [r7, #3]
 8005cf8:	f003 030f 	and.w	r3, r3, #15
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005d02:	01db      	lsls	r3, r3, #7
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d20:	68bb      	ldr	r3, [r7, #8]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b085      	sub	sp, #20
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d64:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d68:	f023 0307 	bic.w	r3, r3, #7
 8005d6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	333c      	adds	r3, #60	; 0x3c
 8005da6:	3304      	adds	r3, #4
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	4a26      	ldr	r2, [pc, #152]	; (8005e48 <USB_EP0_OutStart+0xb8>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d90a      	bls.n	8005dca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dc4:	d101      	bne.n	8005dca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e037      	b.n	8005e3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005de8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df8:	f043 0318 	orr.w	r3, r3, #24
 8005dfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e0c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005e10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e12:	7afb      	ldrb	r3, [r7, #11]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d10f      	bne.n	8005e38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1e:	461a      	mov	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e32:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005e36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	4f54300a 	.word	0x4f54300a

08005e4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4a13      	ldr	r2, [pc, #76]	; (8005eb0 <USB_CoreReset+0x64>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d901      	bls.n	8005e6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e01b      	b.n	8005ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	daf2      	bge.n	8005e58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f043 0201 	orr.w	r2, r3, #1
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3301      	adds	r3, #1
 8005e86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4a09      	ldr	r2, [pc, #36]	; (8005eb0 <USB_CoreReset+0x64>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d901      	bls.n	8005e94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e006      	b.n	8005ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d0f0      	beq.n	8005e82 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	00030d40 	.word	0x00030d40

08005eb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ec0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ec4:	f002 fc28 	bl	8008718 <USBD_static_malloc>
 8005ec8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d109      	bne.n	8005ee4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	32b0      	adds	r2, #176	; 0xb0
 8005eda:	2100      	movs	r1, #0
 8005edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	e0d4      	b.n	800608e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005ee4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005ee8:	2100      	movs	r1, #0
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f002 fc82 	bl	80087f4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	32b0      	adds	r2, #176	; 0xb0
 8005efa:	68f9      	ldr	r1, [r7, #12]
 8005efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	32b0      	adds	r2, #176	; 0xb0
 8005f0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	7c1b      	ldrb	r3, [r3, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d138      	bne.n	8005f8e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f1c:	4b5e      	ldr	r3, [pc, #376]	; (8006098 <USBD_CDC_Init+0x1e4>)
 8005f1e:	7819      	ldrb	r1, [r3, #0]
 8005f20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f24:	2202      	movs	r2, #2
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f002 fad3 	bl	80084d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f2c:	4b5a      	ldr	r3, [pc, #360]	; (8006098 <USBD_CDC_Init+0x1e4>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	f003 020f 	and.w	r2, r3, #15
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	4613      	mov	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	440b      	add	r3, r1
 8005f40:	3324      	adds	r3, #36	; 0x24
 8005f42:	2201      	movs	r2, #1
 8005f44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f46:	4b55      	ldr	r3, [pc, #340]	; (800609c <USBD_CDC_Init+0x1e8>)
 8005f48:	7819      	ldrb	r1, [r3, #0]
 8005f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f4e:	2202      	movs	r2, #2
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f002 fabe 	bl	80084d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f56:	4b51      	ldr	r3, [pc, #324]	; (800609c <USBD_CDC_Init+0x1e8>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	f003 020f 	and.w	r2, r3, #15
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f6e:	2201      	movs	r2, #1
 8005f70:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005f72:	4b4b      	ldr	r3, [pc, #300]	; (80060a0 <USBD_CDC_Init+0x1ec>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	f003 020f 	and.w	r2, r3, #15
 8005f7a:	6879      	ldr	r1, [r7, #4]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	440b      	add	r3, r1
 8005f86:	3326      	adds	r3, #38	; 0x26
 8005f88:	2210      	movs	r2, #16
 8005f8a:	801a      	strh	r2, [r3, #0]
 8005f8c:	e035      	b.n	8005ffa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f8e:	4b42      	ldr	r3, [pc, #264]	; (8006098 <USBD_CDC_Init+0x1e4>)
 8005f90:	7819      	ldrb	r1, [r3, #0]
 8005f92:	2340      	movs	r3, #64	; 0x40
 8005f94:	2202      	movs	r2, #2
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f002 fa9b 	bl	80084d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f9c:	4b3e      	ldr	r3, [pc, #248]	; (8006098 <USBD_CDC_Init+0x1e4>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	f003 020f 	and.w	r2, r3, #15
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	440b      	add	r3, r1
 8005fb0:	3324      	adds	r3, #36	; 0x24
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005fb6:	4b39      	ldr	r3, [pc, #228]	; (800609c <USBD_CDC_Init+0x1e8>)
 8005fb8:	7819      	ldrb	r1, [r3, #0]
 8005fba:	2340      	movs	r3, #64	; 0x40
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f002 fa87 	bl	80084d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005fc4:	4b35      	ldr	r3, [pc, #212]	; (800609c <USBD_CDC_Init+0x1e8>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	f003 020f 	and.w	r2, r3, #15
 8005fcc:	6879      	ldr	r1, [r7, #4]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005fdc:	2201      	movs	r2, #1
 8005fde:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005fe0:	4b2f      	ldr	r3, [pc, #188]	; (80060a0 <USBD_CDC_Init+0x1ec>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	f003 020f 	and.w	r2, r3, #15
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	3326      	adds	r3, #38	; 0x26
 8005ff6:	2210      	movs	r2, #16
 8005ff8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ffa:	4b29      	ldr	r3, [pc, #164]	; (80060a0 <USBD_CDC_Init+0x1ec>)
 8005ffc:	7819      	ldrb	r1, [r3, #0]
 8005ffe:	2308      	movs	r3, #8
 8006000:	2203      	movs	r2, #3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f002 fa65 	bl	80084d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006008:	4b25      	ldr	r3, [pc, #148]	; (80060a0 <USBD_CDC_Init+0x1ec>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	f003 020f 	and.w	r2, r3, #15
 8006010:	6879      	ldr	r1, [r7, #4]
 8006012:	4613      	mov	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	440b      	add	r3, r1
 800601c:	3324      	adds	r3, #36	; 0x24
 800601e:	2201      	movs	r2, #1
 8006020:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	33b0      	adds	r3, #176	; 0xb0
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006058:	2302      	movs	r3, #2
 800605a:	e018      	b.n	800608e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	7c1b      	ldrb	r3, [r3, #16]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10a      	bne.n	800607a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006064:	4b0d      	ldr	r3, [pc, #52]	; (800609c <USBD_CDC_Init+0x1e8>)
 8006066:	7819      	ldrb	r1, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800606e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f002 fb1c 	bl	80086b0 <USBD_LL_PrepareReceive>
 8006078:	e008      	b.n	800608c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800607a:	4b08      	ldr	r3, [pc, #32]	; (800609c <USBD_CDC_Init+0x1e8>)
 800607c:	7819      	ldrb	r1, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006084:	2340      	movs	r3, #64	; 0x40
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f002 fb12 	bl	80086b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	2000009b 	.word	0x2000009b
 800609c:	2000009c 	.word	0x2000009c
 80060a0:	2000009d 	.word	0x2000009d

080060a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80060b0:	4b3a      	ldr	r3, [pc, #232]	; (800619c <USBD_CDC_DeInit+0xf8>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f002 fa31 	bl	800851e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80060bc:	4b37      	ldr	r3, [pc, #220]	; (800619c <USBD_CDC_DeInit+0xf8>)
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	f003 020f 	and.w	r2, r3, #15
 80060c4:	6879      	ldr	r1, [r7, #4]
 80060c6:	4613      	mov	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	440b      	add	r3, r1
 80060d0:	3324      	adds	r3, #36	; 0x24
 80060d2:	2200      	movs	r2, #0
 80060d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80060d6:	4b32      	ldr	r3, [pc, #200]	; (80061a0 <USBD_CDC_DeInit+0xfc>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f002 fa1e 	bl	800851e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80060e2:	4b2f      	ldr	r3, [pc, #188]	; (80061a0 <USBD_CDC_DeInit+0xfc>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	f003 020f 	and.w	r2, r3, #15
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	4613      	mov	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	440b      	add	r3, r1
 80060f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060fa:	2200      	movs	r2, #0
 80060fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80060fe:	4b29      	ldr	r3, [pc, #164]	; (80061a4 <USBD_CDC_DeInit+0x100>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f002 fa0a 	bl	800851e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800610a:	4b26      	ldr	r3, [pc, #152]	; (80061a4 <USBD_CDC_DeInit+0x100>)
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	f003 020f 	and.w	r2, r3, #15
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	440b      	add	r3, r1
 800611e:	3324      	adds	r3, #36	; 0x24
 8006120:	2200      	movs	r2, #0
 8006122:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006124:	4b1f      	ldr	r3, [pc, #124]	; (80061a4 <USBD_CDC_DeInit+0x100>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	f003 020f 	and.w	r2, r3, #15
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	440b      	add	r3, r1
 8006138:	3326      	adds	r3, #38	; 0x26
 800613a:	2200      	movs	r2, #0
 800613c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	32b0      	adds	r2, #176	; 0xb0
 8006148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d01f      	beq.n	8006190 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	33b0      	adds	r3, #176	; 0xb0
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	32b0      	adds	r2, #176	; 0xb0
 800616e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006172:	4618      	mov	r0, r3
 8006174:	f002 fade 	bl	8008734 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	32b0      	adds	r2, #176	; 0xb0
 8006182:	2100      	movs	r1, #0
 8006184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	2000009b 	.word	0x2000009b
 80061a0:	2000009c 	.word	0x2000009c
 80061a4:	2000009d 	.word	0x2000009d

080061a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	32b0      	adds	r2, #176	; 0xb0
 80061bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e0bf      	b.n	8006358 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d050      	beq.n	8006286 <USBD_CDC_Setup+0xde>
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	f040 80af 	bne.w	8006348 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	88db      	ldrh	r3, [r3, #6]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d03a      	beq.n	8006268 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	b25b      	sxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	da1b      	bge.n	8006234 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	33b0      	adds	r3, #176	; 0xb0
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006212:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	88d2      	ldrh	r2, [r2, #6]
 8006218:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	88db      	ldrh	r3, [r3, #6]
 800621e:	2b07      	cmp	r3, #7
 8006220:	bf28      	it	cs
 8006222:	2307      	movcs	r3, #7
 8006224:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	89fa      	ldrh	r2, [r7, #14]
 800622a:	4619      	mov	r1, r3
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f001 fd43 	bl	8007cb8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006232:	e090      	b.n	8006356 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	785a      	ldrb	r2, [r3, #1]
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	88db      	ldrh	r3, [r3, #6]
 8006242:	2b3f      	cmp	r3, #63	; 0x3f
 8006244:	d803      	bhi.n	800624e <USBD_CDC_Setup+0xa6>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	88db      	ldrh	r3, [r3, #6]
 800624a:	b2da      	uxtb	r2, r3
 800624c:	e000      	b.n	8006250 <USBD_CDC_Setup+0xa8>
 800624e:	2240      	movs	r2, #64	; 0x40
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006256:	6939      	ldr	r1, [r7, #16]
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800625e:	461a      	mov	r2, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f001 fd55 	bl	8007d10 <USBD_CtlPrepareRx>
      break;
 8006266:	e076      	b.n	8006356 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	33b0      	adds	r3, #176	; 0xb0
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	7850      	ldrb	r0, [r2, #1]
 800627e:	2200      	movs	r2, #0
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	4798      	blx	r3
      break;
 8006284:	e067      	b.n	8006356 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	785b      	ldrb	r3, [r3, #1]
 800628a:	2b0b      	cmp	r3, #11
 800628c:	d851      	bhi.n	8006332 <USBD_CDC_Setup+0x18a>
 800628e:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <USBD_CDC_Setup+0xec>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	080062c5 	.word	0x080062c5
 8006298:	08006341 	.word	0x08006341
 800629c:	08006333 	.word	0x08006333
 80062a0:	08006333 	.word	0x08006333
 80062a4:	08006333 	.word	0x08006333
 80062a8:	08006333 	.word	0x08006333
 80062ac:	08006333 	.word	0x08006333
 80062b0:	08006333 	.word	0x08006333
 80062b4:	08006333 	.word	0x08006333
 80062b8:	08006333 	.word	0x08006333
 80062bc:	080062ef 	.word	0x080062ef
 80062c0:	08006319 	.word	0x08006319
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d107      	bne.n	80062e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062d0:	f107 030a 	add.w	r3, r7, #10
 80062d4:	2202      	movs	r2, #2
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f001 fced 	bl	8007cb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062de:	e032      	b.n	8006346 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f001 fc77 	bl	8007bd6 <USBD_CtlError>
            ret = USBD_FAIL;
 80062e8:	2303      	movs	r3, #3
 80062ea:	75fb      	strb	r3, [r7, #23]
          break;
 80062ec:	e02b      	b.n	8006346 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d107      	bne.n	800630a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80062fa:	f107 030d 	add.w	r3, r7, #13
 80062fe:	2201      	movs	r2, #1
 8006300:	4619      	mov	r1, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 fcd8 	bl	8007cb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006308:	e01d      	b.n	8006346 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 fc62 	bl	8007bd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006312:	2303      	movs	r3, #3
 8006314:	75fb      	strb	r3, [r7, #23]
          break;
 8006316:	e016      	b.n	8006346 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b03      	cmp	r3, #3
 8006322:	d00f      	beq.n	8006344 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f001 fc55 	bl	8007bd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800632c:	2303      	movs	r3, #3
 800632e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006330:	e008      	b.n	8006344 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 fc4e 	bl	8007bd6 <USBD_CtlError>
          ret = USBD_FAIL;
 800633a:	2303      	movs	r3, #3
 800633c:	75fb      	strb	r3, [r7, #23]
          break;
 800633e:	e002      	b.n	8006346 <USBD_CDC_Setup+0x19e>
          break;
 8006340:	bf00      	nop
 8006342:	e008      	b.n	8006356 <USBD_CDC_Setup+0x1ae>
          break;
 8006344:	bf00      	nop
      }
      break;
 8006346:	e006      	b.n	8006356 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f001 fc43 	bl	8007bd6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006350:	2303      	movs	r3, #3
 8006352:	75fb      	strb	r3, [r7, #23]
      break;
 8006354:	bf00      	nop
  }

  return (uint8_t)ret;
 8006356:	7dfb      	ldrb	r3, [r7, #23]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006372:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	32b0      	adds	r2, #176	; 0xb0
 800637e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006386:	2303      	movs	r3, #3
 8006388:	e065      	b.n	8006456 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	32b0      	adds	r2, #176	; 0xb0
 8006394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006398:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800639a:	78fb      	ldrb	r3, [r7, #3]
 800639c:	f003 020f 	and.w	r2, r3, #15
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	440b      	add	r3, r1
 80063ac:	3318      	adds	r3, #24
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d02f      	beq.n	8006414 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	f003 020f 	and.w	r2, r3, #15
 80063ba:	6879      	ldr	r1, [r7, #4]
 80063bc:	4613      	mov	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	440b      	add	r3, r1
 80063c6:	3318      	adds	r3, #24
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	78fb      	ldrb	r3, [r7, #3]
 80063cc:	f003 010f 	and.w	r1, r3, #15
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	460b      	mov	r3, r1
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	440b      	add	r3, r1
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4403      	add	r3, r0
 80063dc:	3348      	adds	r3, #72	; 0x48
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80063e4:	fb01 f303 	mul.w	r3, r1, r3
 80063e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d112      	bne.n	8006414 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80063ee:	78fb      	ldrb	r3, [r7, #3]
 80063f0:	f003 020f 	and.w	r2, r3, #15
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	440b      	add	r3, r1
 8006400:	3318      	adds	r3, #24
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006406:	78f9      	ldrb	r1, [r7, #3]
 8006408:	2300      	movs	r3, #0
 800640a:	2200      	movs	r2, #0
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f002 f92e 	bl	800866e <USBD_LL_Transmit>
 8006412:	e01f      	b.n	8006454 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2200      	movs	r2, #0
 8006418:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	33b0      	adds	r3, #176	; 0xb0
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d010      	beq.n	8006454 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	33b0      	adds	r3, #176	; 0xb0
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006450:	78fa      	ldrb	r2, [r7, #3]
 8006452:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	32b0      	adds	r2, #176	; 0xb0
 8006474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006478:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	32b0      	adds	r2, #176	; 0xb0
 8006484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800648c:	2303      	movs	r3, #3
 800648e:	e01a      	b.n	80064c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f002 f92c 	bl	80086f2 <USBD_LL_GetRxDataSize>
 800649a:	4602      	mov	r2, r0
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	33b0      	adds	r3, #176	; 0xb0
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80064c0:	4611      	mov	r1, r2
 80064c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b084      	sub	sp, #16
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	32b0      	adds	r2, #176	; 0xb0
 80064e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d101      	bne.n	80064f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e025      	b.n	800653c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	33b0      	adds	r3, #176	; 0xb0
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d01a      	beq.n	800653a <USBD_CDC_EP0_RxReady+0x6c>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800650a:	2bff      	cmp	r3, #255	; 0xff
 800650c:	d015      	beq.n	800653a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	33b0      	adds	r3, #176	; 0xb0
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006526:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800652e:	b292      	uxth	r2, r2
 8006530:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	22ff      	movs	r2, #255	; 0xff
 8006536:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800654c:	2182      	movs	r1, #130	; 0x82
 800654e:	4818      	ldr	r0, [pc, #96]	; (80065b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006550:	f000 fd09 	bl	8006f66 <USBD_GetEpDesc>
 8006554:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006556:	2101      	movs	r1, #1
 8006558:	4815      	ldr	r0, [pc, #84]	; (80065b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800655a:	f000 fd04 	bl	8006f66 <USBD_GetEpDesc>
 800655e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006560:	2181      	movs	r1, #129	; 0x81
 8006562:	4813      	ldr	r0, [pc, #76]	; (80065b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006564:	f000 fcff 	bl	8006f66 <USBD_GetEpDesc>
 8006568:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	2210      	movs	r2, #16
 8006574:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d006      	beq.n	800658a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	2200      	movs	r2, #0
 8006580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006584:	711a      	strb	r2, [r3, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d006      	beq.n	800659e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006598:	711a      	strb	r2, [r3, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2243      	movs	r2, #67	; 0x43
 80065a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065a4:	4b02      	ldr	r3, [pc, #8]	; (80065b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20000058 	.word	0x20000058

080065b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80065bc:	2182      	movs	r1, #130	; 0x82
 80065be:	4818      	ldr	r0, [pc, #96]	; (8006620 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065c0:	f000 fcd1 	bl	8006f66 <USBD_GetEpDesc>
 80065c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065c6:	2101      	movs	r1, #1
 80065c8:	4815      	ldr	r0, [pc, #84]	; (8006620 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065ca:	f000 fccc 	bl	8006f66 <USBD_GetEpDesc>
 80065ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065d0:	2181      	movs	r1, #129	; 0x81
 80065d2:	4813      	ldr	r0, [pc, #76]	; (8006620 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065d4:	f000 fcc7 	bl	8006f66 <USBD_GetEpDesc>
 80065d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2210      	movs	r2, #16
 80065e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d006      	beq.n	80065fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	2200      	movs	r2, #0
 80065f0:	711a      	strb	r2, [r3, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f042 0202 	orr.w	r2, r2, #2
 80065f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d006      	beq.n	800660e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	711a      	strb	r2, [r3, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f042 0202 	orr.w	r2, r2, #2
 800660c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2243      	movs	r2, #67	; 0x43
 8006612:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006614:	4b02      	ldr	r3, [pc, #8]	; (8006620 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006616:	4618      	mov	r0, r3
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20000058 	.word	0x20000058

08006624 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800662c:	2182      	movs	r1, #130	; 0x82
 800662e:	4818      	ldr	r0, [pc, #96]	; (8006690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006630:	f000 fc99 	bl	8006f66 <USBD_GetEpDesc>
 8006634:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006636:	2101      	movs	r1, #1
 8006638:	4815      	ldr	r0, [pc, #84]	; (8006690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800663a:	f000 fc94 	bl	8006f66 <USBD_GetEpDesc>
 800663e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006640:	2181      	movs	r1, #129	; 0x81
 8006642:	4813      	ldr	r0, [pc, #76]	; (8006690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006644:	f000 fc8f 	bl	8006f66 <USBD_GetEpDesc>
 8006648:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	2210      	movs	r2, #16
 8006654:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d006      	beq.n	800666a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	2200      	movs	r2, #0
 8006660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006664:	711a      	strb	r2, [r3, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d006      	beq.n	800667e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006678:	711a      	strb	r2, [r3, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2243      	movs	r2, #67	; 0x43
 8006682:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006684:	4b02      	ldr	r3, [pc, #8]	; (8006690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000058 	.word	0x20000058

08006694 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	220a      	movs	r2, #10
 80066a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80066a2:	4b03      	ldr	r3, [pc, #12]	; (80066b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	20000014 	.word	0x20000014

080066b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e009      	b.n	80066dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	33b0      	adds	r3, #176	; 0xb0
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	32b0      	adds	r2, #176	; 0xb0
 80066fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006702:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800670a:	2303      	movs	r3, #3
 800670c:	e008      	b.n	8006720 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	371c      	adds	r7, #28
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	32b0      	adds	r2, #176	; 0xb0
 8006740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006744:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800674c:	2303      	movs	r3, #3
 800674e:	e004      	b.n	800675a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
	...

08006768 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	32b0      	adds	r2, #176	; 0xb0
 800677a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	32b0      	adds	r2, #176	; 0xb0
 800678a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006792:	2303      	movs	r3, #3
 8006794:	e018      	b.n	80067c8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	7c1b      	ldrb	r3, [r3, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10a      	bne.n	80067b4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800679e:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <USBD_CDC_ReceivePacket+0x68>)
 80067a0:	7819      	ldrb	r1, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 ff7f 	bl	80086b0 <USBD_LL_PrepareReceive>
 80067b2:	e008      	b.n	80067c6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067b4:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <USBD_CDC_ReceivePacket+0x68>)
 80067b6:	7819      	ldrb	r1, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067be:	2340      	movs	r3, #64	; 0x40
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 ff75 	bl	80086b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	2000009c 	.word	0x2000009c

080067d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	4613      	mov	r3, r2
 80067e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e01f      	b.n	800682c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	79fa      	ldrb	r2, [r7, #7]
 800681e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f001 fdef 	bl	8008404 <USBD_LL_Init>
 8006826:	4603      	mov	r3, r0
 8006828:	75fb      	strb	r3, [r7, #23]

  return ret;
 800682a:	7dfb      	ldrb	r3, [r7, #23]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006848:	2303      	movs	r3, #3
 800684a:	e025      	b.n	8006898 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	32ae      	adds	r2, #174	; 0xae
 800685e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00f      	beq.n	8006888 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	32ae      	adds	r2, #174	; 0xae
 8006872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	f107 020e 	add.w	r2, r7, #14
 800687c:	4610      	mov	r0, r2
 800687e:	4798      	blx	r3
 8006880:	4602      	mov	r2, r0
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 fdf7 	bl	800849c <USBD_LL_Start>
 80068ae:	4603      	mov	r3, r0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	460b      	mov	r3, r1
 80068d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d009      	beq.n	80068fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	78fa      	ldrb	r2, [r7, #3]
 80068f2:	4611      	mov	r1, r2
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	4798      	blx	r3
 80068f8:	4603      	mov	r3, r0
 80068fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	460b      	mov	r3, r1
 8006910:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	78fa      	ldrb	r2, [r7, #3]
 8006920:	4611      	mov	r1, r2
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	4798      	blx	r3
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800692c:	2303      	movs	r3, #3
 800692e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006930:	7bfb      	ldrb	r3, [r7, #15]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	4618      	mov	r0, r3
 800694e:	f001 f908 	bl	8007b62 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006960:	461a      	mov	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800696e:	f003 031f 	and.w	r3, r3, #31
 8006972:	2b02      	cmp	r3, #2
 8006974:	d01a      	beq.n	80069ac <USBD_LL_SetupStage+0x72>
 8006976:	2b02      	cmp	r3, #2
 8006978:	d822      	bhi.n	80069c0 <USBD_LL_SetupStage+0x86>
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <USBD_LL_SetupStage+0x4a>
 800697e:	2b01      	cmp	r3, #1
 8006980:	d00a      	beq.n	8006998 <USBD_LL_SetupStage+0x5e>
 8006982:	e01d      	b.n	80069c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fb5f 	bl	8007050 <USBD_StdDevReq>
 8006992:	4603      	mov	r3, r0
 8006994:	73fb      	strb	r3, [r7, #15]
      break;
 8006996:	e020      	b.n	80069da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fbc7 	bl	8007134 <USBD_StdItfReq>
 80069a6:	4603      	mov	r3, r0
 80069a8:	73fb      	strb	r3, [r7, #15]
      break;
 80069aa:	e016      	b.n	80069da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fc29 	bl	800720c <USBD_StdEPReq>
 80069ba:	4603      	mov	r3, r0
 80069bc:	73fb      	strb	r3, [r7, #15]
      break;
 80069be:	e00c      	b.n	80069da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f001 fdc4 	bl	800855c <USBD_LL_StallEP>
 80069d4:	4603      	mov	r3, r0
 80069d6:	73fb      	strb	r3, [r7, #15]
      break;
 80069d8:	bf00      	nop
  }

  return ret;
 80069da:	7bfb      	ldrb	r3, [r7, #15]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	460b      	mov	r3, r1
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80069f6:	7afb      	ldrb	r3, [r7, #11]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d16e      	bne.n	8006ada <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	f040 8098 	bne.w	8006b40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d913      	bls.n	8006a44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	1ad2      	subs	r2, r2, r3
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	4293      	cmp	r3, r2
 8006a34:	bf28      	it	cs
 8006a36:	4613      	movcs	r3, r2
 8006a38:	461a      	mov	r2, r3
 8006a3a:	6879      	ldr	r1, [r7, #4]
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f001 f984 	bl	8007d4a <USBD_CtlContinueRx>
 8006a42:	e07d      	b.n	8006b40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a4a:	f003 031f 	and.w	r3, r3, #31
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d014      	beq.n	8006a7c <USBD_LL_DataOutStage+0x98>
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d81d      	bhi.n	8006a92 <USBD_LL_DataOutStage+0xae>
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <USBD_LL_DataOutStage+0x7c>
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d003      	beq.n	8006a66 <USBD_LL_DataOutStage+0x82>
 8006a5e:	e018      	b.n	8006a92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	75bb      	strb	r3, [r7, #22]
            break;
 8006a64:	e018      	b.n	8006a98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	4619      	mov	r1, r3
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 fa5e 	bl	8006f32 <USBD_CoreFindIF>
 8006a76:	4603      	mov	r3, r0
 8006a78:	75bb      	strb	r3, [r7, #22]
            break;
 8006a7a:	e00d      	b.n	8006a98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	4619      	mov	r1, r3
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 fa60 	bl	8006f4c <USBD_CoreFindEP>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	75bb      	strb	r3, [r7, #22]
            break;
 8006a90:	e002      	b.n	8006a98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	75bb      	strb	r3, [r7, #22]
            break;
 8006a96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006a98:	7dbb      	ldrb	r3, [r7, #22]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d119      	bne.n	8006ad2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d113      	bne.n	8006ad2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006aaa:	7dba      	ldrb	r2, [r7, #22]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	32ae      	adds	r2, #174	; 0xae
 8006ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00b      	beq.n	8006ad2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006aba:	7dba      	ldrb	r2, [r7, #22]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006ac2:	7dba      	ldrb	r2, [r7, #22]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	32ae      	adds	r2, #174	; 0xae
 8006ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f001 f94a 	bl	8007d6c <USBD_CtlSendStatus>
 8006ad8:	e032      	b.n	8006b40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006ada:	7afb      	ldrb	r3, [r7, #11]
 8006adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 fa31 	bl	8006f4c <USBD_CoreFindEP>
 8006aea:	4603      	mov	r3, r0
 8006aec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006aee:	7dbb      	ldrb	r3, [r7, #22]
 8006af0:	2bff      	cmp	r3, #255	; 0xff
 8006af2:	d025      	beq.n	8006b40 <USBD_LL_DataOutStage+0x15c>
 8006af4:	7dbb      	ldrb	r3, [r7, #22]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d122      	bne.n	8006b40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d117      	bne.n	8006b36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006b06:	7dba      	ldrb	r2, [r7, #22]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	32ae      	adds	r2, #174	; 0xae
 8006b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00f      	beq.n	8006b36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006b16:	7dba      	ldrb	r2, [r7, #22]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006b1e:	7dba      	ldrb	r2, [r7, #22]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	32ae      	adds	r2, #174	; 0xae
 8006b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	7afa      	ldrb	r2, [r7, #11]
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	4798      	blx	r3
 8006b32:	4603      	mov	r3, r0
 8006b34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006b36:	7dfb      	ldrb	r3, [r7, #23]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006b3c:	7dfb      	ldrb	r3, [r7, #23]
 8006b3e:	e000      	b.n	8006b42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3718      	adds	r7, #24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b086      	sub	sp, #24
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	460b      	mov	r3, r1
 8006b54:	607a      	str	r2, [r7, #4]
 8006b56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006b58:	7afb      	ldrb	r3, [r7, #11]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d16f      	bne.n	8006c3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	3314      	adds	r3, #20
 8006b62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d15a      	bne.n	8006c24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d914      	bls.n	8006ba4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	689a      	ldr	r2, [r3, #8]
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	1ad2      	subs	r2, r2, r3
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f001 f8ac 	bl	8007cee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b96:	2300      	movs	r3, #0
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f001 fd87 	bl	80086b0 <USBD_LL_PrepareReceive>
 8006ba2:	e03f      	b.n	8006c24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	68da      	ldr	r2, [r3, #12]
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d11c      	bne.n	8006bea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d316      	bcc.n	8006bea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d20f      	bcs.n	8006bea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2100      	movs	r1, #0
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f001 f88d 	bl	8007cee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bdc:	2300      	movs	r3, #0
 8006bde:	2200      	movs	r2, #0
 8006be0:	2100      	movs	r1, #0
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f001 fd64 	bl	80086b0 <USBD_LL_PrepareReceive>
 8006be8:	e01c      	b.n	8006c24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d10f      	bne.n	8006c16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d009      	beq.n	8006c16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c16:	2180      	movs	r1, #128	; 0x80
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f001 fc9f 	bl	800855c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f001 f8b7 	bl	8007d92 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d03a      	beq.n	8006ca4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f7ff fe42 	bl	80068b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006c3c:	e032      	b.n	8006ca4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006c3e:	7afb      	ldrb	r3, [r7, #11]
 8006c40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	4619      	mov	r1, r3
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 f97f 	bl	8006f4c <USBD_CoreFindEP>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
 8006c54:	2bff      	cmp	r3, #255	; 0xff
 8006c56:	d025      	beq.n	8006ca4 <USBD_LL_DataInStage+0x15a>
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d122      	bne.n	8006ca4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d11c      	bne.n	8006ca4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006c6a:	7dfa      	ldrb	r2, [r7, #23]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	32ae      	adds	r2, #174	; 0xae
 8006c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d014      	beq.n	8006ca4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006c7a:	7dfa      	ldrb	r2, [r7, #23]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006c82:	7dfa      	ldrb	r2, [r7, #23]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	32ae      	adds	r2, #174	; 0xae
 8006c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	7afa      	ldrb	r2, [r7, #11]
 8006c90:	4611      	mov	r1, r2
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	4798      	blx	r3
 8006c96:	4603      	mov	r3, r0
 8006c98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006c9a:	7dbb      	ldrb	r3, [r7, #22]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006ca0:	7dbb      	ldrb	r3, [r7, #22]
 8006ca2:	e000      	b.n	8006ca6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d014      	beq.n	8006d14 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00e      	beq.n	8006d14 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	6852      	ldr	r2, [r2, #4]
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	4611      	mov	r1, r2
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	4798      	blx	r3
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006d10:	2303      	movs	r3, #3
 8006d12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d14:	2340      	movs	r3, #64	; 0x40
 8006d16:	2200      	movs	r2, #0
 8006d18:	2100      	movs	r1, #0
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 fbd9 	bl	80084d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2240      	movs	r2, #64	; 0x40
 8006d2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d30:	2340      	movs	r3, #64	; 0x40
 8006d32:	2200      	movs	r2, #0
 8006d34:	2180      	movs	r1, #128	; 0x80
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f001 fbcb 	bl	80084d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2240      	movs	r2, #64	; 0x40
 8006d46:	621a      	str	r2, [r3, #32]

  return ret;
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b083      	sub	sp, #12
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	78fa      	ldrb	r2, [r7, #3]
 8006d62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2204      	movs	r2, #4
 8006d8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b04      	cmp	r3, #4
 8006db0:	d106      	bne.n	8006dc0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	d110      	bne.n	8006e04 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00b      	beq.n	8006e04 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df2:	69db      	ldr	r3, [r3, #28]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d005      	beq.n	8006e04 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b082      	sub	sp, #8
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	460b      	mov	r3, r1
 8006e18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	32ae      	adds	r2, #174	; 0xae
 8006e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e01c      	b.n	8006e6a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b03      	cmp	r3, #3
 8006e3a:	d115      	bne.n	8006e68 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	32ae      	adds	r2, #174	; 0xae
 8006e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00b      	beq.n	8006e68 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	32ae      	adds	r2, #174	; 0xae
 8006e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	78fa      	ldrb	r2, [r7, #3]
 8006e62:	4611      	mov	r1, r2
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	32ae      	adds	r2, #174	; 0xae
 8006e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e01c      	b.n	8006ece <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b03      	cmp	r3, #3
 8006e9e:	d115      	bne.n	8006ecc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	32ae      	adds	r2, #174	; 0xae
 8006eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00b      	beq.n	8006ecc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	32ae      	adds	r2, #174	; 0xae
 8006ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	78fa      	ldrb	r2, [r7, #3]
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00e      	beq.n	8006f28 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	6852      	ldr	r2, [r2, #4]
 8006f16:	b2d2      	uxtb	r2, r2
 8006f18:	4611      	mov	r1, r2
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	4798      	blx	r3
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006f24:	2303      	movs	r3, #3
 8006f26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f3e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f58:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b086      	sub	sp, #24
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	460b      	mov	r3, r1
 8006f70:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	885b      	ldrh	r3, [r3, #2]
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d920      	bls.n	8006fd0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006f96:	e013      	b.n	8006fc0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006f98:	f107 030a 	add.w	r3, r7, #10
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6978      	ldr	r0, [r7, #20]
 8006fa0:	f000 f81b 	bl	8006fda <USBD_GetNextDesc>
 8006fa4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	785b      	ldrb	r3, [r3, #1]
 8006faa:	2b05      	cmp	r3, #5
 8006fac:	d108      	bne.n	8006fc0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	789b      	ldrb	r3, [r3, #2]
 8006fb6:	78fa      	ldrb	r2, [r7, #3]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d008      	beq.n	8006fce <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	885b      	ldrh	r3, [r3, #2]
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	897b      	ldrh	r3, [r7, #10]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d8e5      	bhi.n	8006f98 <USBD_GetEpDesc+0x32>
 8006fcc:	e000      	b.n	8006fd0 <USBD_GetEpDesc+0x6a>
          break;
 8006fce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006fd0:	693b      	ldr	r3, [r7, #16]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b085      	sub	sp, #20
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	881a      	ldrh	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	4413      	add	r3, r2
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4413      	add	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007006:	68fb      	ldr	r3, [r7, #12]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	3301      	adds	r3, #1
 800702a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007032:	8a3b      	ldrh	r3, [r7, #16]
 8007034:	021b      	lsls	r3, r3, #8
 8007036:	b21a      	sxth	r2, r3
 8007038:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800703c:	4313      	orrs	r3, r2
 800703e:	b21b      	sxth	r3, r3
 8007040:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007042:	89fb      	ldrh	r3, [r7, #14]
}
 8007044:	4618      	mov	r0, r3
 8007046:	371c      	adds	r7, #28
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007066:	2b40      	cmp	r3, #64	; 0x40
 8007068:	d005      	beq.n	8007076 <USBD_StdDevReq+0x26>
 800706a:	2b40      	cmp	r3, #64	; 0x40
 800706c:	d857      	bhi.n	800711e <USBD_StdDevReq+0xce>
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00f      	beq.n	8007092 <USBD_StdDevReq+0x42>
 8007072:	2b20      	cmp	r3, #32
 8007074:	d153      	bne.n	800711e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	32ae      	adds	r2, #174	; 0xae
 8007080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	6839      	ldr	r1, [r7, #0]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	4798      	blx	r3
 800708c:	4603      	mov	r3, r0
 800708e:	73fb      	strb	r3, [r7, #15]
      break;
 8007090:	e04a      	b.n	8007128 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	785b      	ldrb	r3, [r3, #1]
 8007096:	2b09      	cmp	r3, #9
 8007098:	d83b      	bhi.n	8007112 <USBD_StdDevReq+0xc2>
 800709a:	a201      	add	r2, pc, #4	; (adr r2, 80070a0 <USBD_StdDevReq+0x50>)
 800709c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a0:	080070f5 	.word	0x080070f5
 80070a4:	08007109 	.word	0x08007109
 80070a8:	08007113 	.word	0x08007113
 80070ac:	080070ff 	.word	0x080070ff
 80070b0:	08007113 	.word	0x08007113
 80070b4:	080070d3 	.word	0x080070d3
 80070b8:	080070c9 	.word	0x080070c9
 80070bc:	08007113 	.word	0x08007113
 80070c0:	080070eb 	.word	0x080070eb
 80070c4:	080070dd 	.word	0x080070dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80070c8:	6839      	ldr	r1, [r7, #0]
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fa3c 	bl	8007548 <USBD_GetDescriptor>
          break;
 80070d0:	e024      	b.n	800711c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fba1 	bl	800781c <USBD_SetAddress>
          break;
 80070da:	e01f      	b.n	800711c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fbe0 	bl	80078a4 <USBD_SetConfig>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73fb      	strb	r3, [r7, #15]
          break;
 80070e8:	e018      	b.n	800711c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fc83 	bl	80079f8 <USBD_GetConfig>
          break;
 80070f2:	e013      	b.n	800711c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fcb4 	bl	8007a64 <USBD_GetStatus>
          break;
 80070fc:	e00e      	b.n	800711c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fce3 	bl	8007acc <USBD_SetFeature>
          break;
 8007106:	e009      	b.n	800711c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fd07 	bl	8007b1e <USBD_ClrFeature>
          break;
 8007110:	e004      	b.n	800711c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fd5e 	bl	8007bd6 <USBD_CtlError>
          break;
 800711a:	bf00      	nop
      }
      break;
 800711c:	e004      	b.n	8007128 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fd58 	bl	8007bd6 <USBD_CtlError>
      break;
 8007126:	bf00      	nop
  }

  return ret;
 8007128:	7bfb      	ldrb	r3, [r7, #15]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop

08007134 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800714a:	2b40      	cmp	r3, #64	; 0x40
 800714c:	d005      	beq.n	800715a <USBD_StdItfReq+0x26>
 800714e:	2b40      	cmp	r3, #64	; 0x40
 8007150:	d852      	bhi.n	80071f8 <USBD_StdItfReq+0xc4>
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <USBD_StdItfReq+0x26>
 8007156:	2b20      	cmp	r3, #32
 8007158:	d14e      	bne.n	80071f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007160:	b2db      	uxtb	r3, r3
 8007162:	3b01      	subs	r3, #1
 8007164:	2b02      	cmp	r3, #2
 8007166:	d840      	bhi.n	80071ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	889b      	ldrh	r3, [r3, #4]
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b01      	cmp	r3, #1
 8007170:	d836      	bhi.n	80071e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	889b      	ldrh	r3, [r3, #4]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	4619      	mov	r1, r3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7ff fed9 	bl	8006f32 <USBD_CoreFindIF>
 8007180:	4603      	mov	r3, r0
 8007182:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	2bff      	cmp	r3, #255	; 0xff
 8007188:	d01d      	beq.n	80071c6 <USBD_StdItfReq+0x92>
 800718a:	7bbb      	ldrb	r3, [r7, #14]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d11a      	bne.n	80071c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007190:	7bba      	ldrb	r2, [r7, #14]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	32ae      	adds	r2, #174	; 0xae
 8007196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00f      	beq.n	80071c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80071a0:	7bba      	ldrb	r2, [r7, #14]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80071a8:	7bba      	ldrb	r2, [r7, #14]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	32ae      	adds	r2, #174	; 0xae
 80071ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	4798      	blx	r3
 80071ba:	4603      	mov	r3, r0
 80071bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80071be:	e004      	b.n	80071ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80071c0:	2303      	movs	r3, #3
 80071c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80071c4:	e001      	b.n	80071ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80071c6:	2303      	movs	r3, #3
 80071c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	88db      	ldrh	r3, [r3, #6]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d110      	bne.n	80071f4 <USBD_StdItfReq+0xc0>
 80071d2:	7bfb      	ldrb	r3, [r7, #15]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10d      	bne.n	80071f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fdc7 	bl	8007d6c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80071de:	e009      	b.n	80071f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fcf7 	bl	8007bd6 <USBD_CtlError>
          break;
 80071e8:	e004      	b.n	80071f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fcf2 	bl	8007bd6 <USBD_CtlError>
          break;
 80071f2:	e000      	b.n	80071f6 <USBD_StdItfReq+0xc2>
          break;
 80071f4:	bf00      	nop
      }
      break;
 80071f6:	e004      	b.n	8007202 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fceb 	bl	8007bd6 <USBD_CtlError>
      break;
 8007200:	bf00      	nop
  }

  return ret;
 8007202:	7bfb      	ldrb	r3, [r7, #15]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	889b      	ldrh	r3, [r3, #4]
 800721e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007228:	2b40      	cmp	r3, #64	; 0x40
 800722a:	d007      	beq.n	800723c <USBD_StdEPReq+0x30>
 800722c:	2b40      	cmp	r3, #64	; 0x40
 800722e:	f200 817f 	bhi.w	8007530 <USBD_StdEPReq+0x324>
 8007232:	2b00      	cmp	r3, #0
 8007234:	d02a      	beq.n	800728c <USBD_StdEPReq+0x80>
 8007236:	2b20      	cmp	r3, #32
 8007238:	f040 817a 	bne.w	8007530 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800723c:	7bbb      	ldrb	r3, [r7, #14]
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7ff fe83 	bl	8006f4c <USBD_CoreFindEP>
 8007246:	4603      	mov	r3, r0
 8007248:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800724a:	7b7b      	ldrb	r3, [r7, #13]
 800724c:	2bff      	cmp	r3, #255	; 0xff
 800724e:	f000 8174 	beq.w	800753a <USBD_StdEPReq+0x32e>
 8007252:	7b7b      	ldrb	r3, [r7, #13]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f040 8170 	bne.w	800753a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800725a:	7b7a      	ldrb	r2, [r7, #13]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007262:	7b7a      	ldrb	r2, [r7, #13]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	32ae      	adds	r2, #174	; 0xae
 8007268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	f000 8163 	beq.w	800753a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007274:	7b7a      	ldrb	r2, [r7, #13]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	32ae      	adds	r2, #174	; 0xae
 800727a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	4798      	blx	r3
 8007286:	4603      	mov	r3, r0
 8007288:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800728a:	e156      	b.n	800753a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	785b      	ldrb	r3, [r3, #1]
 8007290:	2b03      	cmp	r3, #3
 8007292:	d008      	beq.n	80072a6 <USBD_StdEPReq+0x9a>
 8007294:	2b03      	cmp	r3, #3
 8007296:	f300 8145 	bgt.w	8007524 <USBD_StdEPReq+0x318>
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 809b 	beq.w	80073d6 <USBD_StdEPReq+0x1ca>
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d03c      	beq.n	800731e <USBD_StdEPReq+0x112>
 80072a4:	e13e      	b.n	8007524 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d002      	beq.n	80072b8 <USBD_StdEPReq+0xac>
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	d016      	beq.n	80072e4 <USBD_StdEPReq+0xd8>
 80072b6:	e02c      	b.n	8007312 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00d      	beq.n	80072da <USBD_StdEPReq+0xce>
 80072be:	7bbb      	ldrb	r3, [r7, #14]
 80072c0:	2b80      	cmp	r3, #128	; 0x80
 80072c2:	d00a      	beq.n	80072da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072c4:	7bbb      	ldrb	r3, [r7, #14]
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f001 f947 	bl	800855c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072ce:	2180      	movs	r1, #128	; 0x80
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f001 f943 	bl	800855c <USBD_LL_StallEP>
 80072d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072d8:	e020      	b.n	800731c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fc7a 	bl	8007bd6 <USBD_CtlError>
              break;
 80072e2:	e01b      	b.n	800731c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	885b      	ldrh	r3, [r3, #2]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10e      	bne.n	800730a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80072ec:	7bbb      	ldrb	r3, [r7, #14]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00b      	beq.n	800730a <USBD_StdEPReq+0xfe>
 80072f2:	7bbb      	ldrb	r3, [r7, #14]
 80072f4:	2b80      	cmp	r3, #128	; 0x80
 80072f6:	d008      	beq.n	800730a <USBD_StdEPReq+0xfe>
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	88db      	ldrh	r3, [r3, #6]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d104      	bne.n	800730a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 f929 	bl	800855c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fd2e 	bl	8007d6c <USBD_CtlSendStatus>

              break;
 8007310:	e004      	b.n	800731c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fc5e 	bl	8007bd6 <USBD_CtlError>
              break;
 800731a:	bf00      	nop
          }
          break;
 800731c:	e107      	b.n	800752e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b02      	cmp	r3, #2
 8007328:	d002      	beq.n	8007330 <USBD_StdEPReq+0x124>
 800732a:	2b03      	cmp	r3, #3
 800732c:	d016      	beq.n	800735c <USBD_StdEPReq+0x150>
 800732e:	e04b      	b.n	80073c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007330:	7bbb      	ldrb	r3, [r7, #14]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00d      	beq.n	8007352 <USBD_StdEPReq+0x146>
 8007336:	7bbb      	ldrb	r3, [r7, #14]
 8007338:	2b80      	cmp	r3, #128	; 0x80
 800733a:	d00a      	beq.n	8007352 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f001 f90b 	bl	800855c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007346:	2180      	movs	r1, #128	; 0x80
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f001 f907 	bl	800855c <USBD_LL_StallEP>
 800734e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007350:	e040      	b.n	80073d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fc3e 	bl	8007bd6 <USBD_CtlError>
              break;
 800735a:	e03b      	b.n	80073d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	885b      	ldrh	r3, [r3, #2]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d136      	bne.n	80073d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800736a:	2b00      	cmp	r3, #0
 800736c:	d004      	beq.n	8007378 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800736e:	7bbb      	ldrb	r3, [r7, #14]
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f001 f911 	bl	800859a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fcf7 	bl	8007d6c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800737e:	7bbb      	ldrb	r3, [r7, #14]
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7ff fde2 	bl	8006f4c <USBD_CoreFindEP>
 8007388:	4603      	mov	r3, r0
 800738a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800738c:	7b7b      	ldrb	r3, [r7, #13]
 800738e:	2bff      	cmp	r3, #255	; 0xff
 8007390:	d01f      	beq.n	80073d2 <USBD_StdEPReq+0x1c6>
 8007392:	7b7b      	ldrb	r3, [r7, #13]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d11c      	bne.n	80073d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007398:	7b7a      	ldrb	r2, [r7, #13]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80073a0:	7b7a      	ldrb	r2, [r7, #13]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	32ae      	adds	r2, #174	; 0xae
 80073a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d010      	beq.n	80073d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80073b0:	7b7a      	ldrb	r2, [r7, #13]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	32ae      	adds	r2, #174	; 0xae
 80073b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	4798      	blx	r3
 80073c2:	4603      	mov	r3, r0
 80073c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80073c6:	e004      	b.n	80073d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fc03 	bl	8007bd6 <USBD_CtlError>
              break;
 80073d0:	e000      	b.n	80073d4 <USBD_StdEPReq+0x1c8>
              break;
 80073d2:	bf00      	nop
          }
          break;
 80073d4:	e0ab      	b.n	800752e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d002      	beq.n	80073e8 <USBD_StdEPReq+0x1dc>
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d032      	beq.n	800744c <USBD_StdEPReq+0x240>
 80073e6:	e097      	b.n	8007518 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d007      	beq.n	80073fe <USBD_StdEPReq+0x1f2>
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	2b80      	cmp	r3, #128	; 0x80
 80073f2:	d004      	beq.n	80073fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fbed 	bl	8007bd6 <USBD_CtlError>
                break;
 80073fc:	e091      	b.n	8007522 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007402:	2b00      	cmp	r3, #0
 8007404:	da0b      	bge.n	800741e <USBD_StdEPReq+0x212>
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800740c:	4613      	mov	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	3310      	adds	r3, #16
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	4413      	add	r3, r2
 800741a:	3304      	adds	r3, #4
 800741c:	e00b      	b.n	8007436 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	4413      	add	r3, r2
 8007434:	3304      	adds	r3, #4
 8007436:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	2200      	movs	r2, #0
 800743c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2202      	movs	r2, #2
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fc37 	bl	8007cb8 <USBD_CtlSendData>
              break;
 800744a:	e06a      	b.n	8007522 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800744c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007450:	2b00      	cmp	r3, #0
 8007452:	da11      	bge.n	8007478 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	f003 020f 	and.w	r2, r3, #15
 800745a:	6879      	ldr	r1, [r7, #4]
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	440b      	add	r3, r1
 8007466:	3324      	adds	r3, #36	; 0x24
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d117      	bne.n	800749e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fbb0 	bl	8007bd6 <USBD_CtlError>
                  break;
 8007476:	e054      	b.n	8007522 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	f003 020f 	and.w	r2, r3, #15
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	4613      	mov	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	440b      	add	r3, r1
 800748a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d104      	bne.n	800749e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fb9d 	bl	8007bd6 <USBD_CtlError>
                  break;
 800749c:	e041      	b.n	8007522 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800749e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	da0b      	bge.n	80074be <USBD_StdEPReq+0x2b2>
 80074a6:	7bbb      	ldrb	r3, [r7, #14]
 80074a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074ac:	4613      	mov	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	3310      	adds	r3, #16
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	4413      	add	r3, r2
 80074ba:	3304      	adds	r3, #4
 80074bc:	e00b      	b.n	80074d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074be:	7bbb      	ldrb	r3, [r7, #14]
 80074c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074c4:	4613      	mov	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	4413      	add	r3, r2
 80074d4:	3304      	adds	r3, #4
 80074d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80074d8:	7bbb      	ldrb	r3, [r7, #14]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d002      	beq.n	80074e4 <USBD_StdEPReq+0x2d8>
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	2b80      	cmp	r3, #128	; 0x80
 80074e2:	d103      	bne.n	80074ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2200      	movs	r2, #0
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	e00e      	b.n	800750a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f001 f871 	bl	80085d8 <USBD_LL_IsStallEP>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	2201      	movs	r2, #1
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	e002      	b.n	800750a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2200      	movs	r2, #0
 8007508:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2202      	movs	r2, #2
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fbd1 	bl	8007cb8 <USBD_CtlSendData>
              break;
 8007516:	e004      	b.n	8007522 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fb5b 	bl	8007bd6 <USBD_CtlError>
              break;
 8007520:	bf00      	nop
          }
          break;
 8007522:	e004      	b.n	800752e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fb55 	bl	8007bd6 <USBD_CtlError>
          break;
 800752c:	bf00      	nop
      }
      break;
 800752e:	e005      	b.n	800753c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fb4f 	bl	8007bd6 <USBD_CtlError>
      break;
 8007538:	e000      	b.n	800753c <USBD_StdEPReq+0x330>
      break;
 800753a:	bf00      	nop
  }

  return ret;
 800753c:	7bfb      	ldrb	r3, [r7, #15]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
	...

08007548 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007552:	2300      	movs	r3, #0
 8007554:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007556:	2300      	movs	r3, #0
 8007558:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	885b      	ldrh	r3, [r3, #2]
 8007562:	0a1b      	lsrs	r3, r3, #8
 8007564:	b29b      	uxth	r3, r3
 8007566:	3b01      	subs	r3, #1
 8007568:	2b06      	cmp	r3, #6
 800756a:	f200 8128 	bhi.w	80077be <USBD_GetDescriptor+0x276>
 800756e:	a201      	add	r2, pc, #4	; (adr r2, 8007574 <USBD_GetDescriptor+0x2c>)
 8007570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007574:	08007591 	.word	0x08007591
 8007578:	080075a9 	.word	0x080075a9
 800757c:	080075e9 	.word	0x080075e9
 8007580:	080077bf 	.word	0x080077bf
 8007584:	080077bf 	.word	0x080077bf
 8007588:	0800775f 	.word	0x0800775f
 800758c:	0800778b 	.word	0x0800778b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	7c12      	ldrb	r2, [r2, #16]
 800759c:	f107 0108 	add.w	r1, r7, #8
 80075a0:	4610      	mov	r0, r2
 80075a2:	4798      	blx	r3
 80075a4:	60f8      	str	r0, [r7, #12]
      break;
 80075a6:	e112      	b.n	80077ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	7c1b      	ldrb	r3, [r3, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10d      	bne.n	80075cc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b8:	f107 0208 	add.w	r2, r7, #8
 80075bc:	4610      	mov	r0, r2
 80075be:	4798      	blx	r3
 80075c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	3301      	adds	r3, #1
 80075c6:	2202      	movs	r2, #2
 80075c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80075ca:	e100      	b.n	80077ce <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d4:	f107 0208 	add.w	r2, r7, #8
 80075d8:	4610      	mov	r0, r2
 80075da:	4798      	blx	r3
 80075dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3301      	adds	r3, #1
 80075e2:	2202      	movs	r2, #2
 80075e4:	701a      	strb	r2, [r3, #0]
      break;
 80075e6:	e0f2      	b.n	80077ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	885b      	ldrh	r3, [r3, #2]
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b05      	cmp	r3, #5
 80075f0:	f200 80ac 	bhi.w	800774c <USBD_GetDescriptor+0x204>
 80075f4:	a201      	add	r2, pc, #4	; (adr r2, 80075fc <USBD_GetDescriptor+0xb4>)
 80075f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fa:	bf00      	nop
 80075fc:	08007615 	.word	0x08007615
 8007600:	08007649 	.word	0x08007649
 8007604:	0800767d 	.word	0x0800767d
 8007608:	080076b1 	.word	0x080076b1
 800760c:	080076e5 	.word	0x080076e5
 8007610:	08007719 	.word	0x08007719
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	7c12      	ldrb	r2, [r2, #16]
 800762c:	f107 0108 	add.w	r1, r7, #8
 8007630:	4610      	mov	r0, r2
 8007632:	4798      	blx	r3
 8007634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007636:	e091      	b.n	800775c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 facb 	bl	8007bd6 <USBD_CtlError>
            err++;
 8007640:	7afb      	ldrb	r3, [r7, #11]
 8007642:	3301      	adds	r3, #1
 8007644:	72fb      	strb	r3, [r7, #11]
          break;
 8007646:	e089      	b.n	800775c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00b      	beq.n	800766c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	7c12      	ldrb	r2, [r2, #16]
 8007660:	f107 0108 	add.w	r1, r7, #8
 8007664:	4610      	mov	r0, r2
 8007666:	4798      	blx	r3
 8007668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800766a:	e077      	b.n	800775c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fab1 	bl	8007bd6 <USBD_CtlError>
            err++;
 8007674:	7afb      	ldrb	r3, [r7, #11]
 8007676:	3301      	adds	r3, #1
 8007678:	72fb      	strb	r3, [r7, #11]
          break;
 800767a:	e06f      	b.n	800775c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00b      	beq.n	80076a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	7c12      	ldrb	r2, [r2, #16]
 8007694:	f107 0108 	add.w	r1, r7, #8
 8007698:	4610      	mov	r0, r2
 800769a:	4798      	blx	r3
 800769c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800769e:	e05d      	b.n	800775c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fa97 	bl	8007bd6 <USBD_CtlError>
            err++;
 80076a8:	7afb      	ldrb	r3, [r7, #11]
 80076aa:	3301      	adds	r3, #1
 80076ac:	72fb      	strb	r3, [r7, #11]
          break;
 80076ae:	e055      	b.n	800775c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00b      	beq.n	80076d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	7c12      	ldrb	r2, [r2, #16]
 80076c8:	f107 0108 	add.w	r1, r7, #8
 80076cc:	4610      	mov	r0, r2
 80076ce:	4798      	blx	r3
 80076d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076d2:	e043      	b.n	800775c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa7d 	bl	8007bd6 <USBD_CtlError>
            err++;
 80076dc:	7afb      	ldrb	r3, [r7, #11]
 80076de:	3301      	adds	r3, #1
 80076e0:	72fb      	strb	r3, [r7, #11]
          break;
 80076e2:	e03b      	b.n	800775c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ea:	695b      	ldr	r3, [r3, #20]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00b      	beq.n	8007708 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	7c12      	ldrb	r2, [r2, #16]
 80076fc:	f107 0108 	add.w	r1, r7, #8
 8007700:	4610      	mov	r0, r2
 8007702:	4798      	blx	r3
 8007704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007706:	e029      	b.n	800775c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fa63 	bl	8007bd6 <USBD_CtlError>
            err++;
 8007710:	7afb      	ldrb	r3, [r7, #11]
 8007712:	3301      	adds	r3, #1
 8007714:	72fb      	strb	r3, [r7, #11]
          break;
 8007716:	e021      	b.n	800775c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00b      	beq.n	800773c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	7c12      	ldrb	r2, [r2, #16]
 8007730:	f107 0108 	add.w	r1, r7, #8
 8007734:	4610      	mov	r0, r2
 8007736:	4798      	blx	r3
 8007738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800773a:	e00f      	b.n	800775c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fa49 	bl	8007bd6 <USBD_CtlError>
            err++;
 8007744:	7afb      	ldrb	r3, [r7, #11]
 8007746:	3301      	adds	r3, #1
 8007748:	72fb      	strb	r3, [r7, #11]
          break;
 800774a:	e007      	b.n	800775c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fa41 	bl	8007bd6 <USBD_CtlError>
          err++;
 8007754:	7afb      	ldrb	r3, [r7, #11]
 8007756:	3301      	adds	r3, #1
 8007758:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800775a:	bf00      	nop
      }
      break;
 800775c:	e037      	b.n	80077ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	7c1b      	ldrb	r3, [r3, #16]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d109      	bne.n	800777a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800776c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800776e:	f107 0208 	add.w	r2, r7, #8
 8007772:	4610      	mov	r0, r2
 8007774:	4798      	blx	r3
 8007776:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007778:	e029      	b.n	80077ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fa2a 	bl	8007bd6 <USBD_CtlError>
        err++;
 8007782:	7afb      	ldrb	r3, [r7, #11]
 8007784:	3301      	adds	r3, #1
 8007786:	72fb      	strb	r3, [r7, #11]
      break;
 8007788:	e021      	b.n	80077ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	7c1b      	ldrb	r3, [r3, #16]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10d      	bne.n	80077ae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779a:	f107 0208 	add.w	r2, r7, #8
 800779e:	4610      	mov	r0, r2
 80077a0:	4798      	blx	r3
 80077a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3301      	adds	r3, #1
 80077a8:	2207      	movs	r2, #7
 80077aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077ac:	e00f      	b.n	80077ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fa10 	bl	8007bd6 <USBD_CtlError>
        err++;
 80077b6:	7afb      	ldrb	r3, [r7, #11]
 80077b8:	3301      	adds	r3, #1
 80077ba:	72fb      	strb	r3, [r7, #11]
      break;
 80077bc:	e007      	b.n	80077ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fa08 	bl	8007bd6 <USBD_CtlError>
      err++;
 80077c6:	7afb      	ldrb	r3, [r7, #11]
 80077c8:	3301      	adds	r3, #1
 80077ca:	72fb      	strb	r3, [r7, #11]
      break;
 80077cc:	bf00      	nop
  }

  if (err != 0U)
 80077ce:	7afb      	ldrb	r3, [r7, #11]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d11e      	bne.n	8007812 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	88db      	ldrh	r3, [r3, #6]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d016      	beq.n	800780a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80077dc:	893b      	ldrh	r3, [r7, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00e      	beq.n	8007800 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	88da      	ldrh	r2, [r3, #6]
 80077e6:	893b      	ldrh	r3, [r7, #8]
 80077e8:	4293      	cmp	r3, r2
 80077ea:	bf28      	it	cs
 80077ec:	4613      	movcs	r3, r2
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80077f2:	893b      	ldrh	r3, [r7, #8]
 80077f4:	461a      	mov	r2, r3
 80077f6:	68f9      	ldr	r1, [r7, #12]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fa5d 	bl	8007cb8 <USBD_CtlSendData>
 80077fe:	e009      	b.n	8007814 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f9e7 	bl	8007bd6 <USBD_CtlError>
 8007808:	e004      	b.n	8007814 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 faae 	bl	8007d6c <USBD_CtlSendStatus>
 8007810:	e000      	b.n	8007814 <USBD_GetDescriptor+0x2cc>
    return;
 8007812:	bf00      	nop
  }
}
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop

0800781c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	889b      	ldrh	r3, [r3, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d131      	bne.n	8007892 <USBD_SetAddress+0x76>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	88db      	ldrh	r3, [r3, #6]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d12d      	bne.n	8007892 <USBD_SetAddress+0x76>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	885b      	ldrh	r3, [r3, #2]
 800783a:	2b7f      	cmp	r3, #127	; 0x7f
 800783c:	d829      	bhi.n	8007892 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	885b      	ldrh	r3, [r3, #2]
 8007842:	b2db      	uxtb	r3, r3
 8007844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007848:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b03      	cmp	r3, #3
 8007854:	d104      	bne.n	8007860 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f9bc 	bl	8007bd6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800785e:	e01d      	b.n	800789c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	7bfa      	ldrb	r2, [r7, #15]
 8007864:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fedf 	bl	8008630 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fa7a 	bl	8007d6c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007878:	7bfb      	ldrb	r3, [r7, #15]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d004      	beq.n	8007888 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2202      	movs	r2, #2
 8007882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007886:	e009      	b.n	800789c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007890:	e004      	b.n	800789c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f99e 	bl	8007bd6 <USBD_CtlError>
  }
}
 800789a:	bf00      	nop
 800789c:	bf00      	nop
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	885b      	ldrh	r3, [r3, #2]
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	4b4e      	ldr	r3, [pc, #312]	; (80079f4 <USBD_SetConfig+0x150>)
 80078ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80078bc:	4b4d      	ldr	r3, [pc, #308]	; (80079f4 <USBD_SetConfig+0x150>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d905      	bls.n	80078d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f985 	bl	8007bd6 <USBD_CtlError>
    return USBD_FAIL;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e08c      	b.n	80079ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d002      	beq.n	80078e2 <USBD_SetConfig+0x3e>
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d029      	beq.n	8007934 <USBD_SetConfig+0x90>
 80078e0:	e075      	b.n	80079ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80078e2:	4b44      	ldr	r3, [pc, #272]	; (80079f4 <USBD_SetConfig+0x150>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d020      	beq.n	800792c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80078ea:	4b42      	ldr	r3, [pc, #264]	; (80079f4 <USBD_SetConfig+0x150>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078f4:	4b3f      	ldr	r3, [pc, #252]	; (80079f4 <USBD_SetConfig+0x150>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7fe ffe7 	bl	80068ce <USBD_SetClassConfig>
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007904:	7bfb      	ldrb	r3, [r7, #15]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d008      	beq.n	800791c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f962 	bl	8007bd6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2202      	movs	r2, #2
 8007916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800791a:	e065      	b.n	80079e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fa25 	bl	8007d6c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2203      	movs	r2, #3
 8007926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800792a:	e05d      	b.n	80079e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fa1d 	bl	8007d6c <USBD_CtlSendStatus>
      break;
 8007932:	e059      	b.n	80079e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007934:	4b2f      	ldr	r3, [pc, #188]	; (80079f4 <USBD_SetConfig+0x150>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d112      	bne.n	8007962 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2202      	movs	r2, #2
 8007940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007944:	4b2b      	ldr	r3, [pc, #172]	; (80079f4 <USBD_SetConfig+0x150>)
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	461a      	mov	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800794e:	4b29      	ldr	r3, [pc, #164]	; (80079f4 <USBD_SetConfig+0x150>)
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7fe ffd6 	bl	8006906 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fa06 	bl	8007d6c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007960:	e042      	b.n	80079e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007962:	4b24      	ldr	r3, [pc, #144]	; (80079f4 <USBD_SetConfig+0x150>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	429a      	cmp	r2, r3
 800796e:	d02a      	beq.n	80079c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	b2db      	uxtb	r3, r3
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7fe ffc4 	bl	8006906 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800797e:	4b1d      	ldr	r3, [pc, #116]	; (80079f4 <USBD_SetConfig+0x150>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	461a      	mov	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007988:	4b1a      	ldr	r3, [pc, #104]	; (80079f4 <USBD_SetConfig+0x150>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	4619      	mov	r1, r3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7fe ff9d 	bl	80068ce <USBD_SetClassConfig>
 8007994:	4603      	mov	r3, r0
 8007996:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00f      	beq.n	80079be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f918 	bl	8007bd6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7fe ffa9 	bl	8006906 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2202      	movs	r2, #2
 80079b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80079bc:	e014      	b.n	80079e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f9d4 	bl	8007d6c <USBD_CtlSendStatus>
      break;
 80079c4:	e010      	b.n	80079e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f9d0 	bl	8007d6c <USBD_CtlSendStatus>
      break;
 80079cc:	e00c      	b.n	80079e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f900 	bl	8007bd6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079d6:	4b07      	ldr	r3, [pc, #28]	; (80079f4 <USBD_SetConfig+0x150>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	4619      	mov	r1, r3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7fe ff92 	bl	8006906 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80079e2:	2303      	movs	r3, #3
 80079e4:	73fb      	strb	r3, [r7, #15]
      break;
 80079e6:	bf00      	nop
  }

  return ret;
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	2000062c 	.word	0x2000062c

080079f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	88db      	ldrh	r3, [r3, #6]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d004      	beq.n	8007a14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f8e2 	bl	8007bd6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a12:	e023      	b.n	8007a5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	dc02      	bgt.n	8007a26 <USBD_GetConfig+0x2e>
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	dc03      	bgt.n	8007a2c <USBD_GetConfig+0x34>
 8007a24:	e015      	b.n	8007a52 <USBD_GetConfig+0x5a>
 8007a26:	2b03      	cmp	r3, #3
 8007a28:	d00b      	beq.n	8007a42 <USBD_GetConfig+0x4a>
 8007a2a:	e012      	b.n	8007a52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	3308      	adds	r3, #8
 8007a36:	2201      	movs	r2, #1
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f93c 	bl	8007cb8 <USBD_CtlSendData>
        break;
 8007a40:	e00c      	b.n	8007a5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	3304      	adds	r3, #4
 8007a46:	2201      	movs	r2, #1
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f934 	bl	8007cb8 <USBD_CtlSendData>
        break;
 8007a50:	e004      	b.n	8007a5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f8be 	bl	8007bd6 <USBD_CtlError>
        break;
 8007a5a:	bf00      	nop
}
 8007a5c:	bf00      	nop
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	3b01      	subs	r3, #1
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d81e      	bhi.n	8007aba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	88db      	ldrh	r3, [r3, #6]
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d004      	beq.n	8007a8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f8a5 	bl	8007bd6 <USBD_CtlError>
        break;
 8007a8c:	e01a      	b.n	8007ac4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d005      	beq.n	8007aaa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	f043 0202 	orr.w	r2, r3, #2
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	330c      	adds	r3, #12
 8007aae:	2202      	movs	r2, #2
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f900 	bl	8007cb8 <USBD_CtlSendData>
      break;
 8007ab8:	e004      	b.n	8007ac4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f88a 	bl	8007bd6 <USBD_CtlError>
      break;
 8007ac2:	bf00      	nop
  }
}
 8007ac4:	bf00      	nop
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	885b      	ldrh	r3, [r3, #2]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d107      	bne.n	8007aee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f940 	bl	8007d6c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007aec:	e013      	b.n	8007b16 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	885b      	ldrh	r3, [r3, #2]
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d10b      	bne.n	8007b0e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	889b      	ldrh	r3, [r3, #4]
 8007afa:	0a1b      	lsrs	r3, r3, #8
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f930 	bl	8007d6c <USBD_CtlSendStatus>
}
 8007b0c:	e003      	b.n	8007b16 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f860 	bl	8007bd6 <USBD_CtlError>
}
 8007b16:	bf00      	nop
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b082      	sub	sp, #8
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	3b01      	subs	r3, #1
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d80b      	bhi.n	8007b4e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	885b      	ldrh	r3, [r3, #2]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d10c      	bne.n	8007b58 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f910 	bl	8007d6c <USBD_CtlSendStatus>
      }
      break;
 8007b4c:	e004      	b.n	8007b58 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f840 	bl	8007bd6 <USBD_CtlError>
      break;
 8007b56:	e000      	b.n	8007b5a <USBD_ClrFeature+0x3c>
      break;
 8007b58:	bf00      	nop
  }
}
 8007b5a:	bf00      	nop
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	781a      	ldrb	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	781a      	ldrb	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f7ff fa41 	bl	8007014 <SWAPBYTE>
 8007b92:	4603      	mov	r3, r0
 8007b94:	461a      	mov	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f7ff fa34 	bl	8007014 <SWAPBYTE>
 8007bac:	4603      	mov	r3, r0
 8007bae:	461a      	mov	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f7ff fa27 	bl	8007014 <SWAPBYTE>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	461a      	mov	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	80da      	strh	r2, [r3, #6]
}
 8007bce:	bf00      	nop
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b082      	sub	sp, #8
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007be0:	2180      	movs	r1, #128	; 0x80
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fcba 	bl	800855c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007be8:	2100      	movs	r1, #0
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fcb6 	bl	800855c <USBD_LL_StallEP>
}
 8007bf0:	bf00      	nop
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d036      	beq.n	8007c7c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c12:	6938      	ldr	r0, [r7, #16]
 8007c14:	f000 f836 	bl	8007c84 <USBD_GetLen>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	7812      	ldrb	r2, [r2, #0]
 8007c30:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c32:	7dfb      	ldrb	r3, [r7, #23]
 8007c34:	3301      	adds	r3, #1
 8007c36:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	2203      	movs	r2, #3
 8007c40:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
 8007c44:	3301      	adds	r3, #1
 8007c46:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c48:	e013      	b.n	8007c72 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	4413      	add	r3, r2
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	7812      	ldrb	r2, [r2, #0]
 8007c54:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	613b      	str	r3, [r7, #16]
    idx++;
 8007c5c:	7dfb      	ldrb	r3, [r7, #23]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	4413      	add	r3, r2
 8007c68:	2200      	movs	r2, #0
 8007c6a:	701a      	strb	r2, [r3, #0]
    idx++;
 8007c6c:	7dfb      	ldrb	r3, [r7, #23]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1e7      	bne.n	8007c4a <USBD_GetString+0x52>
 8007c7a:	e000      	b.n	8007c7e <USBD_GetString+0x86>
    return;
 8007c7c:	bf00      	nop
  }
}
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c94:	e005      	b.n	8007ca2 <USBD_GetLen+0x1e>
  {
    len++;
 8007c96:	7bfb      	ldrb	r3, [r7, #15]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1f5      	bne.n	8007c96 <USBD_GetLen+0x12>
  }

  return len;
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	2100      	movs	r1, #0
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 fcc5 	bl	800866e <USBD_LL_Transmit>

  return USBD_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	60f8      	str	r0, [r7, #12]
 8007cf6:	60b9      	str	r1, [r7, #8]
 8007cf8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	2100      	movs	r1, #0
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f000 fcb4 	bl	800866e <USBD_LL_Transmit>

  return USBD_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2203      	movs	r2, #3
 8007d20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	2100      	movs	r1, #0
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f000 fcb8 	bl	80086b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	60f8      	str	r0, [r7, #12]
 8007d52:	60b9      	str	r1, [r7, #8]
 8007d54:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 fca7 	bl	80086b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2204      	movs	r2, #4
 8007d78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	2200      	movs	r2, #0
 8007d80:	2100      	movs	r1, #0
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fc73 	bl	800866e <USBD_LL_Transmit>

  return USBD_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2205      	movs	r2, #5
 8007d9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007da2:	2300      	movs	r3, #0
 8007da4:	2200      	movs	r2, #0
 8007da6:	2100      	movs	r1, #0
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fc81 	bl	80086b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	4912      	ldr	r1, [pc, #72]	; (8007e08 <MX_USB_DEVICE_Init+0x50>)
 8007dc0:	4812      	ldr	r0, [pc, #72]	; (8007e0c <MX_USB_DEVICE_Init+0x54>)
 8007dc2:	f7fe fd07 	bl	80067d4 <USBD_Init>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007dcc:	f7f8 fd54 	bl	8000878 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007dd0:	490f      	ldr	r1, [pc, #60]	; (8007e10 <MX_USB_DEVICE_Init+0x58>)
 8007dd2:	480e      	ldr	r0, [pc, #56]	; (8007e0c <MX_USB_DEVICE_Init+0x54>)
 8007dd4:	f7fe fd2e 	bl	8006834 <USBD_RegisterClass>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007dde:	f7f8 fd4b 	bl	8000878 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007de2:	490c      	ldr	r1, [pc, #48]	; (8007e14 <MX_USB_DEVICE_Init+0x5c>)
 8007de4:	4809      	ldr	r0, [pc, #36]	; (8007e0c <MX_USB_DEVICE_Init+0x54>)
 8007de6:	f7fe fc65 	bl	80066b4 <USBD_CDC_RegisterInterface>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007df0:	f7f8 fd42 	bl	8000878 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007df4:	4805      	ldr	r0, [pc, #20]	; (8007e0c <MX_USB_DEVICE_Init+0x54>)
 8007df6:	f7fe fd53 	bl	80068a0 <USBD_Start>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e00:	f7f8 fd3a 	bl	8000878 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e04:	bf00      	nop
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	200000b4 	.word	0x200000b4
 8007e0c:	20000630 	.word	0x20000630
 8007e10:	20000020 	.word	0x20000020
 8007e14:	200000a0 	.word	0x200000a0

08007e18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	4905      	ldr	r1, [pc, #20]	; (8007e34 <CDC_Init_FS+0x1c>)
 8007e20:	4805      	ldr	r0, [pc, #20]	; (8007e38 <CDC_Init_FS+0x20>)
 8007e22:	f7fe fc61 	bl	80066e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e26:	4905      	ldr	r1, [pc, #20]	; (8007e3c <CDC_Init_FS+0x24>)
 8007e28:	4803      	ldr	r0, [pc, #12]	; (8007e38 <CDC_Init_FS+0x20>)
 8007e2a:	f7fe fc7f 	bl	800672c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e2e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	2000110c 	.word	0x2000110c
 8007e38:	20000630 	.word	0x20000630
 8007e3c:	2000090c 	.word	0x2000090c

08007e40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e40:	b480      	push	{r7}
 8007e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	4603      	mov	r3, r0
 8007e58:	6039      	str	r1, [r7, #0]
 8007e5a:	71fb      	strb	r3, [r7, #7]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e60:	79fb      	ldrb	r3, [r7, #7]
 8007e62:	2b23      	cmp	r3, #35	; 0x23
 8007e64:	d84a      	bhi.n	8007efc <CDC_Control_FS+0xac>
 8007e66:	a201      	add	r2, pc, #4	; (adr r2, 8007e6c <CDC_Control_FS+0x1c>)
 8007e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6c:	08007efd 	.word	0x08007efd
 8007e70:	08007efd 	.word	0x08007efd
 8007e74:	08007efd 	.word	0x08007efd
 8007e78:	08007efd 	.word	0x08007efd
 8007e7c:	08007efd 	.word	0x08007efd
 8007e80:	08007efd 	.word	0x08007efd
 8007e84:	08007efd 	.word	0x08007efd
 8007e88:	08007efd 	.word	0x08007efd
 8007e8c:	08007efd 	.word	0x08007efd
 8007e90:	08007efd 	.word	0x08007efd
 8007e94:	08007efd 	.word	0x08007efd
 8007e98:	08007efd 	.word	0x08007efd
 8007e9c:	08007efd 	.word	0x08007efd
 8007ea0:	08007efd 	.word	0x08007efd
 8007ea4:	08007efd 	.word	0x08007efd
 8007ea8:	08007efd 	.word	0x08007efd
 8007eac:	08007efd 	.word	0x08007efd
 8007eb0:	08007efd 	.word	0x08007efd
 8007eb4:	08007efd 	.word	0x08007efd
 8007eb8:	08007efd 	.word	0x08007efd
 8007ebc:	08007efd 	.word	0x08007efd
 8007ec0:	08007efd 	.word	0x08007efd
 8007ec4:	08007efd 	.word	0x08007efd
 8007ec8:	08007efd 	.word	0x08007efd
 8007ecc:	08007efd 	.word	0x08007efd
 8007ed0:	08007efd 	.word	0x08007efd
 8007ed4:	08007efd 	.word	0x08007efd
 8007ed8:	08007efd 	.word	0x08007efd
 8007edc:	08007efd 	.word	0x08007efd
 8007ee0:	08007efd 	.word	0x08007efd
 8007ee4:	08007efd 	.word	0x08007efd
 8007ee8:	08007efd 	.word	0x08007efd
 8007eec:	08007efd 	.word	0x08007efd
 8007ef0:	08007efd 	.word	0x08007efd
 8007ef4:	08007efd 	.word	0x08007efd
 8007ef8:	08007efd 	.word	0x08007efd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007efc:	bf00      	nop
  }

  return (USBD_OK);
 8007efe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	4805      	ldr	r0, [pc, #20]	; (8007f30 <CDC_Receive_FS+0x24>)
 8007f1a:	f7fe fc07 	bl	800672c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f1e:	4804      	ldr	r0, [pc, #16]	; (8007f30 <CDC_Receive_FS+0x24>)
 8007f20:	f7fe fc22 	bl	8006768 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	20000630 	.word	0x20000630

08007f34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007f46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	371c      	adds	r7, #28
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
	...

08007f58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	6039      	str	r1, [r7, #0]
 8007f62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	2212      	movs	r2, #18
 8007f68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f6a:	4b03      	ldr	r3, [pc, #12]	; (8007f78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	200000d0 	.word	0x200000d0

08007f7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	4603      	mov	r3, r0
 8007f84:	6039      	str	r1, [r7, #0]
 8007f86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	2204      	movs	r2, #4
 8007f8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f8e:	4b03      	ldr	r3, [pc, #12]	; (8007f9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	200000e4 	.word	0x200000e4

08007fa0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	6039      	str	r1, [r7, #0]
 8007faa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fac:	79fb      	ldrb	r3, [r7, #7]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d105      	bne.n	8007fbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	4907      	ldr	r1, [pc, #28]	; (8007fd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007fb6:	4808      	ldr	r0, [pc, #32]	; (8007fd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fb8:	f7ff fe1e 	bl	8007bf8 <USBD_GetString>
 8007fbc:	e004      	b.n	8007fc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	4904      	ldr	r1, [pc, #16]	; (8007fd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007fc2:	4805      	ldr	r0, [pc, #20]	; (8007fd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fc4:	f7ff fe18 	bl	8007bf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fc8:	4b02      	ldr	r3, [pc, #8]	; (8007fd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	2000190c 	.word	0x2000190c
 8007fd8:	0800910c 	.word	0x0800910c

08007fdc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	6039      	str	r1, [r7, #0]
 8007fe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	4904      	ldr	r1, [pc, #16]	; (8007ffc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007fec:	4804      	ldr	r0, [pc, #16]	; (8008000 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007fee:	f7ff fe03 	bl	8007bf8 <USBD_GetString>
  return USBD_StrDesc;
 8007ff2:	4b02      	ldr	r3, [pc, #8]	; (8007ffc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	2000190c 	.word	0x2000190c
 8008000:	08009124 	.word	0x08009124

08008004 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	4603      	mov	r3, r0
 800800c:	6039      	str	r1, [r7, #0]
 800800e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	221a      	movs	r2, #26
 8008014:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008016:	f000 f843 	bl	80080a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800801a:	4b02      	ldr	r3, [pc, #8]	; (8008024 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800801c:	4618      	mov	r0, r3
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	200000e8 	.word	0x200000e8

08008028 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	4603      	mov	r3, r0
 8008030:	6039      	str	r1, [r7, #0]
 8008032:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008034:	79fb      	ldrb	r3, [r7, #7]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d105      	bne.n	8008046 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	4907      	ldr	r1, [pc, #28]	; (800805c <USBD_FS_ConfigStrDescriptor+0x34>)
 800803e:	4808      	ldr	r0, [pc, #32]	; (8008060 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008040:	f7ff fdda 	bl	8007bf8 <USBD_GetString>
 8008044:	e004      	b.n	8008050 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	4904      	ldr	r1, [pc, #16]	; (800805c <USBD_FS_ConfigStrDescriptor+0x34>)
 800804a:	4805      	ldr	r0, [pc, #20]	; (8008060 <USBD_FS_ConfigStrDescriptor+0x38>)
 800804c:	f7ff fdd4 	bl	8007bf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008050:	4b02      	ldr	r3, [pc, #8]	; (800805c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008052:	4618      	mov	r0, r3
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	2000190c 	.word	0x2000190c
 8008060:	08009138 	.word	0x08009138

08008064 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	4603      	mov	r3, r0
 800806c:	6039      	str	r1, [r7, #0]
 800806e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008070:	79fb      	ldrb	r3, [r7, #7]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d105      	bne.n	8008082 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	4907      	ldr	r1, [pc, #28]	; (8008098 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800807a:	4808      	ldr	r0, [pc, #32]	; (800809c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800807c:	f7ff fdbc 	bl	8007bf8 <USBD_GetString>
 8008080:	e004      	b.n	800808c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	4904      	ldr	r1, [pc, #16]	; (8008098 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008086:	4805      	ldr	r0, [pc, #20]	; (800809c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008088:	f7ff fdb6 	bl	8007bf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800808c:	4b02      	ldr	r3, [pc, #8]	; (8008098 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800808e:	4618      	mov	r0, r3
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	2000190c 	.word	0x2000190c
 800809c:	08009144 	.word	0x08009144

080080a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80080a6:	4b0f      	ldr	r3, [pc, #60]	; (80080e4 <Get_SerialNum+0x44>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80080ac:	4b0e      	ldr	r3, [pc, #56]	; (80080e8 <Get_SerialNum+0x48>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80080b2:	4b0e      	ldr	r3, [pc, #56]	; (80080ec <Get_SerialNum+0x4c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4413      	add	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d009      	beq.n	80080da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80080c6:	2208      	movs	r2, #8
 80080c8:	4909      	ldr	r1, [pc, #36]	; (80080f0 <Get_SerialNum+0x50>)
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 f814 	bl	80080f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80080d0:	2204      	movs	r2, #4
 80080d2:	4908      	ldr	r1, [pc, #32]	; (80080f4 <Get_SerialNum+0x54>)
 80080d4:	68b8      	ldr	r0, [r7, #8]
 80080d6:	f000 f80f 	bl	80080f8 <IntToUnicode>
  }
}
 80080da:	bf00      	nop
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	1fff7a10 	.word	0x1fff7a10
 80080e8:	1fff7a14 	.word	0x1fff7a14
 80080ec:	1fff7a18 	.word	0x1fff7a18
 80080f0:	200000ea 	.word	0x200000ea
 80080f4:	200000fa 	.word	0x200000fa

080080f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b087      	sub	sp, #28
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	4613      	mov	r3, r2
 8008104:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008106:	2300      	movs	r3, #0
 8008108:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800810a:	2300      	movs	r3, #0
 800810c:	75fb      	strb	r3, [r7, #23]
 800810e:	e027      	b.n	8008160 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	0f1b      	lsrs	r3, r3, #28
 8008114:	2b09      	cmp	r3, #9
 8008116:	d80b      	bhi.n	8008130 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	0f1b      	lsrs	r3, r3, #28
 800811c:	b2da      	uxtb	r2, r3
 800811e:	7dfb      	ldrb	r3, [r7, #23]
 8008120:	005b      	lsls	r3, r3, #1
 8008122:	4619      	mov	r1, r3
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	440b      	add	r3, r1
 8008128:	3230      	adds	r2, #48	; 0x30
 800812a:	b2d2      	uxtb	r2, r2
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	e00a      	b.n	8008146 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	0f1b      	lsrs	r3, r3, #28
 8008134:	b2da      	uxtb	r2, r3
 8008136:	7dfb      	ldrb	r3, [r7, #23]
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	4619      	mov	r1, r3
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	440b      	add	r3, r1
 8008140:	3237      	adds	r2, #55	; 0x37
 8008142:	b2d2      	uxtb	r2, r2
 8008144:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	011b      	lsls	r3, r3, #4
 800814a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800814c:	7dfb      	ldrb	r3, [r7, #23]
 800814e:	005b      	lsls	r3, r3, #1
 8008150:	3301      	adds	r3, #1
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	4413      	add	r3, r2
 8008156:	2200      	movs	r2, #0
 8008158:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800815a:	7dfb      	ldrb	r3, [r7, #23]
 800815c:	3301      	adds	r3, #1
 800815e:	75fb      	strb	r3, [r7, #23]
 8008160:	7dfa      	ldrb	r2, [r7, #23]
 8008162:	79fb      	ldrb	r3, [r7, #7]
 8008164:	429a      	cmp	r2, r3
 8008166:	d3d3      	bcc.n	8008110 <IntToUnicode+0x18>
  }
}
 8008168:	bf00      	nop
 800816a:	bf00      	nop
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
	...

08008178 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b08a      	sub	sp, #40	; 0x28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008180:	f107 0314 	add.w	r3, r7, #20
 8008184:	2200      	movs	r2, #0
 8008186:	601a      	str	r2, [r3, #0]
 8008188:	605a      	str	r2, [r3, #4]
 800818a:	609a      	str	r2, [r3, #8]
 800818c:	60da      	str	r2, [r3, #12]
 800818e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008198:	d13a      	bne.n	8008210 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800819a:	2300      	movs	r3, #0
 800819c:	613b      	str	r3, [r7, #16]
 800819e:	4b1e      	ldr	r3, [pc, #120]	; (8008218 <HAL_PCD_MspInit+0xa0>)
 80081a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a2:	4a1d      	ldr	r2, [pc, #116]	; (8008218 <HAL_PCD_MspInit+0xa0>)
 80081a4:	f043 0301 	orr.w	r3, r3, #1
 80081a8:	6313      	str	r3, [r2, #48]	; 0x30
 80081aa:	4b1b      	ldr	r3, [pc, #108]	; (8008218 <HAL_PCD_MspInit+0xa0>)
 80081ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	613b      	str	r3, [r7, #16]
 80081b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80081b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80081ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081bc:	2302      	movs	r3, #2
 80081be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081c0:	2300      	movs	r3, #0
 80081c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081c4:	2303      	movs	r3, #3
 80081c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80081c8:	230a      	movs	r3, #10
 80081ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081cc:	f107 0314 	add.w	r3, r7, #20
 80081d0:	4619      	mov	r1, r3
 80081d2:	4812      	ldr	r0, [pc, #72]	; (800821c <HAL_PCD_MspInit+0xa4>)
 80081d4:	f7f9 f91c 	bl	8001410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80081d8:	4b0f      	ldr	r3, [pc, #60]	; (8008218 <HAL_PCD_MspInit+0xa0>)
 80081da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081dc:	4a0e      	ldr	r2, [pc, #56]	; (8008218 <HAL_PCD_MspInit+0xa0>)
 80081de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081e2:	6353      	str	r3, [r2, #52]	; 0x34
 80081e4:	2300      	movs	r3, #0
 80081e6:	60fb      	str	r3, [r7, #12]
 80081e8:	4b0b      	ldr	r3, [pc, #44]	; (8008218 <HAL_PCD_MspInit+0xa0>)
 80081ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ec:	4a0a      	ldr	r2, [pc, #40]	; (8008218 <HAL_PCD_MspInit+0xa0>)
 80081ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081f2:	6453      	str	r3, [r2, #68]	; 0x44
 80081f4:	4b08      	ldr	r3, [pc, #32]	; (8008218 <HAL_PCD_MspInit+0xa0>)
 80081f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081fc:	60fb      	str	r3, [r7, #12]
 80081fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008200:	2200      	movs	r2, #0
 8008202:	2100      	movs	r1, #0
 8008204:	2043      	movs	r0, #67	; 0x43
 8008206:	f7f9 f8cc 	bl	80013a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800820a:	2043      	movs	r0, #67	; 0x43
 800820c:	f7f9 f8e5 	bl	80013da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008210:	bf00      	nop
 8008212:	3728      	adds	r7, #40	; 0x28
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	40023800 	.word	0x40023800
 800821c:	40020000 	.word	0x40020000

08008220 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008234:	4619      	mov	r1, r3
 8008236:	4610      	mov	r0, r2
 8008238:	f7fe fb7f 	bl	800693a <USBD_LL_SetupStage>
}
 800823c:	bf00      	nop
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008256:	78fa      	ldrb	r2, [r7, #3]
 8008258:	6879      	ldr	r1, [r7, #4]
 800825a:	4613      	mov	r3, r2
 800825c:	00db      	lsls	r3, r3, #3
 800825e:	4413      	add	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	440b      	add	r3, r1
 8008264:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	4619      	mov	r1, r3
 800826e:	f7fe fbb9 	bl	80069e4 <USBD_LL_DataOutStage>
}
 8008272:	bf00      	nop
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b082      	sub	sp, #8
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	460b      	mov	r3, r1
 8008284:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800828c:	78fa      	ldrb	r2, [r7, #3]
 800828e:	6879      	ldr	r1, [r7, #4]
 8008290:	4613      	mov	r3, r2
 8008292:	00db      	lsls	r3, r3, #3
 8008294:	4413      	add	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	440b      	add	r3, r1
 800829a:	334c      	adds	r3, #76	; 0x4c
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	78fb      	ldrb	r3, [r7, #3]
 80082a0:	4619      	mov	r1, r3
 80082a2:	f7fe fc52 	bl	8006b4a <USBD_LL_DataInStage>
}
 80082a6:	bf00      	nop
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b082      	sub	sp, #8
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082bc:	4618      	mov	r0, r3
 80082be:	f7fe fd86 	bl	8006dce <USBD_LL_SOF>
}
 80082c2:	bf00      	nop
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80082d2:	2301      	movs	r3, #1
 80082d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d102      	bne.n	80082e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80082de:	2300      	movs	r3, #0
 80082e0:	73fb      	strb	r3, [r7, #15]
 80082e2:	e008      	b.n	80082f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d102      	bne.n	80082f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80082ec:	2301      	movs	r3, #1
 80082ee:	73fb      	strb	r3, [r7, #15]
 80082f0:	e001      	b.n	80082f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80082f2:	f7f8 fac1 	bl	8000878 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082fc:	7bfa      	ldrb	r2, [r7, #15]
 80082fe:	4611      	mov	r1, r2
 8008300:	4618      	mov	r0, r3
 8008302:	f7fe fd26 	bl	8006d52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800830c:	4618      	mov	r0, r3
 800830e:	f7fe fcce 	bl	8006cae <USBD_LL_Reset>
}
 8008312:	bf00      	nop
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
	...

0800831c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800832a:	4618      	mov	r0, r3
 800832c:	f7fe fd21 	bl	8006d72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	6812      	ldr	r2, [r2, #0]
 800833e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008342:	f043 0301 	orr.w	r3, r3, #1
 8008346:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a1b      	ldr	r3, [r3, #32]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d005      	beq.n	800835c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008350:	4b04      	ldr	r3, [pc, #16]	; (8008364 <HAL_PCD_SuspendCallback+0x48>)
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	4a03      	ldr	r2, [pc, #12]	; (8008364 <HAL_PCD_SuspendCallback+0x48>)
 8008356:	f043 0306 	orr.w	r3, r3, #6
 800835a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800835c:	bf00      	nop
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	e000ed00 	.word	0xe000ed00

08008368 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008376:	4618      	mov	r0, r3
 8008378:	f7fe fd11 	bl	8006d9e <USBD_LL_Resume>
}
 800837c:	bf00      	nop
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	460b      	mov	r3, r1
 800838e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008396:	78fa      	ldrb	r2, [r7, #3]
 8008398:	4611      	mov	r1, r2
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe fd69 	bl	8006e72 <USBD_LL_IsoOUTIncomplete>
}
 80083a0:	bf00      	nop
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083ba:	78fa      	ldrb	r2, [r7, #3]
 80083bc:	4611      	mov	r1, r2
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fe fd25 	bl	8006e0e <USBD_LL_IsoINIncomplete>
}
 80083c4:	bf00      	nop
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe fd7b 	bl	8006ed6 <USBD_LL_DevConnected>
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fe fd78 	bl	8006eec <USBD_LL_DevDisconnected>
}
 80083fc:	bf00      	nop
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d13c      	bne.n	800848e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008414:	4a20      	ldr	r2, [pc, #128]	; (8008498 <USBD_LL_Init+0x94>)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a1e      	ldr	r2, [pc, #120]	; (8008498 <USBD_LL_Init+0x94>)
 8008420:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008424:	4b1c      	ldr	r3, [pc, #112]	; (8008498 <USBD_LL_Init+0x94>)
 8008426:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800842a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800842c:	4b1a      	ldr	r3, [pc, #104]	; (8008498 <USBD_LL_Init+0x94>)
 800842e:	2204      	movs	r2, #4
 8008430:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008432:	4b19      	ldr	r3, [pc, #100]	; (8008498 <USBD_LL_Init+0x94>)
 8008434:	2202      	movs	r2, #2
 8008436:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008438:	4b17      	ldr	r3, [pc, #92]	; (8008498 <USBD_LL_Init+0x94>)
 800843a:	2200      	movs	r2, #0
 800843c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800843e:	4b16      	ldr	r3, [pc, #88]	; (8008498 <USBD_LL_Init+0x94>)
 8008440:	2202      	movs	r2, #2
 8008442:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008444:	4b14      	ldr	r3, [pc, #80]	; (8008498 <USBD_LL_Init+0x94>)
 8008446:	2200      	movs	r2, #0
 8008448:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800844a:	4b13      	ldr	r3, [pc, #76]	; (8008498 <USBD_LL_Init+0x94>)
 800844c:	2200      	movs	r2, #0
 800844e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008450:	4b11      	ldr	r3, [pc, #68]	; (8008498 <USBD_LL_Init+0x94>)
 8008452:	2200      	movs	r2, #0
 8008454:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008456:	4b10      	ldr	r3, [pc, #64]	; (8008498 <USBD_LL_Init+0x94>)
 8008458:	2200      	movs	r2, #0
 800845a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800845c:	4b0e      	ldr	r3, [pc, #56]	; (8008498 <USBD_LL_Init+0x94>)
 800845e:	2200      	movs	r2, #0
 8008460:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008462:	480d      	ldr	r0, [pc, #52]	; (8008498 <USBD_LL_Init+0x94>)
 8008464:	f7f9 ff03 	bl	800226e <HAL_PCD_Init>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800846e:	f7f8 fa03 	bl	8000878 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008472:	2180      	movs	r1, #128	; 0x80
 8008474:	4808      	ldr	r0, [pc, #32]	; (8008498 <USBD_LL_Init+0x94>)
 8008476:	f7fb f95a 	bl	800372e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800847a:	2240      	movs	r2, #64	; 0x40
 800847c:	2100      	movs	r1, #0
 800847e:	4806      	ldr	r0, [pc, #24]	; (8008498 <USBD_LL_Init+0x94>)
 8008480:	f7fb f90e 	bl	80036a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008484:	2280      	movs	r2, #128	; 0x80
 8008486:	2101      	movs	r1, #1
 8008488:	4803      	ldr	r0, [pc, #12]	; (8008498 <USBD_LL_Init+0x94>)
 800848a:	f7fb f909 	bl	80036a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	20001b0c 	.word	0x20001b0c

0800849c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7f9 fff8 	bl	80024a8 <HAL_PCD_Start>
 80084b8:	4603      	mov	r3, r0
 80084ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 f942 	bl	8008748 <USBD_Get_USB_Status>
 80084c4:	4603      	mov	r3, r0
 80084c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b084      	sub	sp, #16
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	4608      	mov	r0, r1
 80084dc:	4611      	mov	r1, r2
 80084de:	461a      	mov	r2, r3
 80084e0:	4603      	mov	r3, r0
 80084e2:	70fb      	strb	r3, [r7, #3]
 80084e4:	460b      	mov	r3, r1
 80084e6:	70bb      	strb	r3, [r7, #2]
 80084e8:	4613      	mov	r3, r2
 80084ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80084fa:	78bb      	ldrb	r3, [r7, #2]
 80084fc:	883a      	ldrh	r2, [r7, #0]
 80084fe:	78f9      	ldrb	r1, [r7, #3]
 8008500:	f7fa fcc9 	bl	8002e96 <HAL_PCD_EP_Open>
 8008504:	4603      	mov	r3, r0
 8008506:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008508:	7bfb      	ldrb	r3, [r7, #15]
 800850a:	4618      	mov	r0, r3
 800850c:	f000 f91c 	bl	8008748 <USBD_Get_USB_Status>
 8008510:	4603      	mov	r3, r0
 8008512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008514:	7bbb      	ldrb	r3, [r7, #14]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	460b      	mov	r3, r1
 8008528:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008538:	78fa      	ldrb	r2, [r7, #3]
 800853a:	4611      	mov	r1, r2
 800853c:	4618      	mov	r0, r3
 800853e:	f7fa fd12 	bl	8002f66 <HAL_PCD_EP_Close>
 8008542:	4603      	mov	r3, r0
 8008544:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008546:	7bfb      	ldrb	r3, [r7, #15]
 8008548:	4618      	mov	r0, r3
 800854a:	f000 f8fd 	bl	8008748 <USBD_Get_USB_Status>
 800854e:	4603      	mov	r3, r0
 8008550:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008552:	7bbb      	ldrb	r3, [r7, #14]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008576:	78fa      	ldrb	r2, [r7, #3]
 8008578:	4611      	mov	r1, r2
 800857a:	4618      	mov	r0, r3
 800857c:	f7fa fdea 	bl	8003154 <HAL_PCD_EP_SetStall>
 8008580:	4603      	mov	r3, r0
 8008582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008584:	7bfb      	ldrb	r3, [r7, #15]
 8008586:	4618      	mov	r0, r3
 8008588:	f000 f8de 	bl	8008748 <USBD_Get_USB_Status>
 800858c:	4603      	mov	r3, r0
 800858e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008590:	7bbb      	ldrb	r3, [r7, #14]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b084      	sub	sp, #16
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
 80085a2:	460b      	mov	r3, r1
 80085a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085b4:	78fa      	ldrb	r2, [r7, #3]
 80085b6:	4611      	mov	r1, r2
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fa fe2f 	bl	800321c <HAL_PCD_EP_ClrStall>
 80085be:	4603      	mov	r3, r0
 80085c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f000 f8bf 	bl	8008748 <USBD_Get_USB_Status>
 80085ca:	4603      	mov	r3, r0
 80085cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	460b      	mov	r3, r1
 80085e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80085ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	da0b      	bge.n	800860c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80085f4:	78fb      	ldrb	r3, [r7, #3]
 80085f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085fa:	68f9      	ldr	r1, [r7, #12]
 80085fc:	4613      	mov	r3, r2
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	440b      	add	r3, r1
 8008606:	333e      	adds	r3, #62	; 0x3e
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	e00b      	b.n	8008624 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008612:	68f9      	ldr	r1, [r7, #12]
 8008614:	4613      	mov	r3, r2
 8008616:	00db      	lsls	r3, r3, #3
 8008618:	4413      	add	r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	440b      	add	r3, r1
 800861e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008622:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008624:	4618      	mov	r0, r3
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800864a:	78fa      	ldrb	r2, [r7, #3]
 800864c:	4611      	mov	r1, r2
 800864e:	4618      	mov	r0, r3
 8008650:	f7fa fbfc 	bl	8002e4c <HAL_PCD_SetAddress>
 8008654:	4603      	mov	r3, r0
 8008656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	4618      	mov	r0, r3
 800865c:	f000 f874 	bl	8008748 <USBD_Get_USB_Status>
 8008660:	4603      	mov	r3, r0
 8008662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008664:	7bbb      	ldrb	r3, [r7, #14]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b086      	sub	sp, #24
 8008672:	af00      	add	r7, sp, #0
 8008674:	60f8      	str	r0, [r7, #12]
 8008676:	607a      	str	r2, [r7, #4]
 8008678:	603b      	str	r3, [r7, #0]
 800867a:	460b      	mov	r3, r1
 800867c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800868c:	7af9      	ldrb	r1, [r7, #11]
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	f7fa fd15 	bl	80030c0 <HAL_PCD_EP_Transmit>
 8008696:	4603      	mov	r3, r0
 8008698:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	4618      	mov	r0, r3
 800869e:	f000 f853 	bl	8008748 <USBD_Get_USB_Status>
 80086a2:	4603      	mov	r3, r0
 80086a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3718      	adds	r7, #24
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	607a      	str	r2, [r7, #4]
 80086ba:	603b      	str	r3, [r7, #0]
 80086bc:	460b      	mov	r3, r1
 80086be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80086ce:	7af9      	ldrb	r1, [r7, #11]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	f7fa fc91 	bl	8002ffa <HAL_PCD_EP_Receive>
 80086d8:	4603      	mov	r3, r0
 80086da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086dc:	7dfb      	ldrb	r3, [r7, #23]
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 f832 	bl	8008748 <USBD_Get_USB_Status>
 80086e4:	4603      	mov	r3, r0
 80086e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3718      	adds	r7, #24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b082      	sub	sp, #8
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	460b      	mov	r3, r1
 80086fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008704:	78fa      	ldrb	r2, [r7, #3]
 8008706:	4611      	mov	r1, r2
 8008708:	4618      	mov	r0, r3
 800870a:	f7fa fcc1 	bl	8003090 <HAL_PCD_EP_GetRxCount>
 800870e:	4603      	mov	r3, r0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008720:	4b03      	ldr	r3, [pc, #12]	; (8008730 <USBD_static_malloc+0x18>)
}
 8008722:	4618      	mov	r0, r3
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	20002018 	.word	0x20002018

08008734 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]

}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	4603      	mov	r3, r0
 8008750:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008756:	79fb      	ldrb	r3, [r7, #7]
 8008758:	2b03      	cmp	r3, #3
 800875a:	d817      	bhi.n	800878c <USBD_Get_USB_Status+0x44>
 800875c:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <USBD_Get_USB_Status+0x1c>)
 800875e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008762:	bf00      	nop
 8008764:	08008775 	.word	0x08008775
 8008768:	0800877b 	.word	0x0800877b
 800876c:	08008781 	.word	0x08008781
 8008770:	08008787 	.word	0x08008787
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	73fb      	strb	r3, [r7, #15]
    break;
 8008778:	e00b      	b.n	8008792 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800877a:	2303      	movs	r3, #3
 800877c:	73fb      	strb	r3, [r7, #15]
    break;
 800877e:	e008      	b.n	8008792 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008780:	2301      	movs	r3, #1
 8008782:	73fb      	strb	r3, [r7, #15]
    break;
 8008784:	e005      	b.n	8008792 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008786:	2303      	movs	r3, #3
 8008788:	73fb      	strb	r3, [r7, #15]
    break;
 800878a:	e002      	b.n	8008792 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800878c:	2303      	movs	r3, #3
 800878e:	73fb      	strb	r3, [r7, #15]
    break;
 8008790:	bf00      	nop
  }
  return usb_status;
 8008792:	7bfb      	ldrb	r3, [r7, #15]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <__errno>:
 80087a0:	4b01      	ldr	r3, [pc, #4]	; (80087a8 <__errno+0x8>)
 80087a2:	6818      	ldr	r0, [r3, #0]
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	20000104 	.word	0x20000104

080087ac <__libc_init_array>:
 80087ac:	b570      	push	{r4, r5, r6, lr}
 80087ae:	4d0d      	ldr	r5, [pc, #52]	; (80087e4 <__libc_init_array+0x38>)
 80087b0:	4c0d      	ldr	r4, [pc, #52]	; (80087e8 <__libc_init_array+0x3c>)
 80087b2:	1b64      	subs	r4, r4, r5
 80087b4:	10a4      	asrs	r4, r4, #2
 80087b6:	2600      	movs	r6, #0
 80087b8:	42a6      	cmp	r6, r4
 80087ba:	d109      	bne.n	80087d0 <__libc_init_array+0x24>
 80087bc:	4d0b      	ldr	r5, [pc, #44]	; (80087ec <__libc_init_array+0x40>)
 80087be:	4c0c      	ldr	r4, [pc, #48]	; (80087f0 <__libc_init_array+0x44>)
 80087c0:	f000 fc8e 	bl	80090e0 <_init>
 80087c4:	1b64      	subs	r4, r4, r5
 80087c6:	10a4      	asrs	r4, r4, #2
 80087c8:	2600      	movs	r6, #0
 80087ca:	42a6      	cmp	r6, r4
 80087cc:	d105      	bne.n	80087da <__libc_init_array+0x2e>
 80087ce:	bd70      	pop	{r4, r5, r6, pc}
 80087d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80087d4:	4798      	blx	r3
 80087d6:	3601      	adds	r6, #1
 80087d8:	e7ee      	b.n	80087b8 <__libc_init_array+0xc>
 80087da:	f855 3b04 	ldr.w	r3, [r5], #4
 80087de:	4798      	blx	r3
 80087e0:	3601      	adds	r6, #1
 80087e2:	e7f2      	b.n	80087ca <__libc_init_array+0x1e>
 80087e4:	08009f04 	.word	0x08009f04
 80087e8:	08009f04 	.word	0x08009f04
 80087ec:	08009f04 	.word	0x08009f04
 80087f0:	08009f08 	.word	0x08009f08

080087f4 <memset>:
 80087f4:	4402      	add	r2, r0
 80087f6:	4603      	mov	r3, r0
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d100      	bne.n	80087fe <memset+0xa>
 80087fc:	4770      	bx	lr
 80087fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008802:	e7f9      	b.n	80087f8 <memset+0x4>

08008804 <siprintf>:
 8008804:	b40e      	push	{r1, r2, r3}
 8008806:	b500      	push	{lr}
 8008808:	b09c      	sub	sp, #112	; 0x70
 800880a:	ab1d      	add	r3, sp, #116	; 0x74
 800880c:	9002      	str	r0, [sp, #8]
 800880e:	9006      	str	r0, [sp, #24]
 8008810:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008814:	4809      	ldr	r0, [pc, #36]	; (800883c <siprintf+0x38>)
 8008816:	9107      	str	r1, [sp, #28]
 8008818:	9104      	str	r1, [sp, #16]
 800881a:	4909      	ldr	r1, [pc, #36]	; (8008840 <siprintf+0x3c>)
 800881c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008820:	9105      	str	r1, [sp, #20]
 8008822:	6800      	ldr	r0, [r0, #0]
 8008824:	9301      	str	r3, [sp, #4]
 8008826:	a902      	add	r1, sp, #8
 8008828:	f000 f868 	bl	80088fc <_svfiprintf_r>
 800882c:	9b02      	ldr	r3, [sp, #8]
 800882e:	2200      	movs	r2, #0
 8008830:	701a      	strb	r2, [r3, #0]
 8008832:	b01c      	add	sp, #112	; 0x70
 8008834:	f85d eb04 	ldr.w	lr, [sp], #4
 8008838:	b003      	add	sp, #12
 800883a:	4770      	bx	lr
 800883c:	20000104 	.word	0x20000104
 8008840:	ffff0208 	.word	0xffff0208

08008844 <__ssputs_r>:
 8008844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008848:	688e      	ldr	r6, [r1, #8]
 800884a:	429e      	cmp	r6, r3
 800884c:	4682      	mov	sl, r0
 800884e:	460c      	mov	r4, r1
 8008850:	4690      	mov	r8, r2
 8008852:	461f      	mov	r7, r3
 8008854:	d838      	bhi.n	80088c8 <__ssputs_r+0x84>
 8008856:	898a      	ldrh	r2, [r1, #12]
 8008858:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800885c:	d032      	beq.n	80088c4 <__ssputs_r+0x80>
 800885e:	6825      	ldr	r5, [r4, #0]
 8008860:	6909      	ldr	r1, [r1, #16]
 8008862:	eba5 0901 	sub.w	r9, r5, r1
 8008866:	6965      	ldr	r5, [r4, #20]
 8008868:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800886c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008870:	3301      	adds	r3, #1
 8008872:	444b      	add	r3, r9
 8008874:	106d      	asrs	r5, r5, #1
 8008876:	429d      	cmp	r5, r3
 8008878:	bf38      	it	cc
 800887a:	461d      	movcc	r5, r3
 800887c:	0553      	lsls	r3, r2, #21
 800887e:	d531      	bpl.n	80088e4 <__ssputs_r+0xa0>
 8008880:	4629      	mov	r1, r5
 8008882:	f000 fb63 	bl	8008f4c <_malloc_r>
 8008886:	4606      	mov	r6, r0
 8008888:	b950      	cbnz	r0, 80088a0 <__ssputs_r+0x5c>
 800888a:	230c      	movs	r3, #12
 800888c:	f8ca 3000 	str.w	r3, [sl]
 8008890:	89a3      	ldrh	r3, [r4, #12]
 8008892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008896:	81a3      	strh	r3, [r4, #12]
 8008898:	f04f 30ff 	mov.w	r0, #4294967295
 800889c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a0:	6921      	ldr	r1, [r4, #16]
 80088a2:	464a      	mov	r2, r9
 80088a4:	f000 fabe 	bl	8008e24 <memcpy>
 80088a8:	89a3      	ldrh	r3, [r4, #12]
 80088aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088b2:	81a3      	strh	r3, [r4, #12]
 80088b4:	6126      	str	r6, [r4, #16]
 80088b6:	6165      	str	r5, [r4, #20]
 80088b8:	444e      	add	r6, r9
 80088ba:	eba5 0509 	sub.w	r5, r5, r9
 80088be:	6026      	str	r6, [r4, #0]
 80088c0:	60a5      	str	r5, [r4, #8]
 80088c2:	463e      	mov	r6, r7
 80088c4:	42be      	cmp	r6, r7
 80088c6:	d900      	bls.n	80088ca <__ssputs_r+0x86>
 80088c8:	463e      	mov	r6, r7
 80088ca:	6820      	ldr	r0, [r4, #0]
 80088cc:	4632      	mov	r2, r6
 80088ce:	4641      	mov	r1, r8
 80088d0:	f000 fab6 	bl	8008e40 <memmove>
 80088d4:	68a3      	ldr	r3, [r4, #8]
 80088d6:	1b9b      	subs	r3, r3, r6
 80088d8:	60a3      	str	r3, [r4, #8]
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	4433      	add	r3, r6
 80088de:	6023      	str	r3, [r4, #0]
 80088e0:	2000      	movs	r0, #0
 80088e2:	e7db      	b.n	800889c <__ssputs_r+0x58>
 80088e4:	462a      	mov	r2, r5
 80088e6:	f000 fba5 	bl	8009034 <_realloc_r>
 80088ea:	4606      	mov	r6, r0
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d1e1      	bne.n	80088b4 <__ssputs_r+0x70>
 80088f0:	6921      	ldr	r1, [r4, #16]
 80088f2:	4650      	mov	r0, sl
 80088f4:	f000 fabe 	bl	8008e74 <_free_r>
 80088f8:	e7c7      	b.n	800888a <__ssputs_r+0x46>
	...

080088fc <_svfiprintf_r>:
 80088fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008900:	4698      	mov	r8, r3
 8008902:	898b      	ldrh	r3, [r1, #12]
 8008904:	061b      	lsls	r3, r3, #24
 8008906:	b09d      	sub	sp, #116	; 0x74
 8008908:	4607      	mov	r7, r0
 800890a:	460d      	mov	r5, r1
 800890c:	4614      	mov	r4, r2
 800890e:	d50e      	bpl.n	800892e <_svfiprintf_r+0x32>
 8008910:	690b      	ldr	r3, [r1, #16]
 8008912:	b963      	cbnz	r3, 800892e <_svfiprintf_r+0x32>
 8008914:	2140      	movs	r1, #64	; 0x40
 8008916:	f000 fb19 	bl	8008f4c <_malloc_r>
 800891a:	6028      	str	r0, [r5, #0]
 800891c:	6128      	str	r0, [r5, #16]
 800891e:	b920      	cbnz	r0, 800892a <_svfiprintf_r+0x2e>
 8008920:	230c      	movs	r3, #12
 8008922:	603b      	str	r3, [r7, #0]
 8008924:	f04f 30ff 	mov.w	r0, #4294967295
 8008928:	e0d1      	b.n	8008ace <_svfiprintf_r+0x1d2>
 800892a:	2340      	movs	r3, #64	; 0x40
 800892c:	616b      	str	r3, [r5, #20]
 800892e:	2300      	movs	r3, #0
 8008930:	9309      	str	r3, [sp, #36]	; 0x24
 8008932:	2320      	movs	r3, #32
 8008934:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008938:	f8cd 800c 	str.w	r8, [sp, #12]
 800893c:	2330      	movs	r3, #48	; 0x30
 800893e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ae8 <_svfiprintf_r+0x1ec>
 8008942:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008946:	f04f 0901 	mov.w	r9, #1
 800894a:	4623      	mov	r3, r4
 800894c:	469a      	mov	sl, r3
 800894e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008952:	b10a      	cbz	r2, 8008958 <_svfiprintf_r+0x5c>
 8008954:	2a25      	cmp	r2, #37	; 0x25
 8008956:	d1f9      	bne.n	800894c <_svfiprintf_r+0x50>
 8008958:	ebba 0b04 	subs.w	fp, sl, r4
 800895c:	d00b      	beq.n	8008976 <_svfiprintf_r+0x7a>
 800895e:	465b      	mov	r3, fp
 8008960:	4622      	mov	r2, r4
 8008962:	4629      	mov	r1, r5
 8008964:	4638      	mov	r0, r7
 8008966:	f7ff ff6d 	bl	8008844 <__ssputs_r>
 800896a:	3001      	adds	r0, #1
 800896c:	f000 80aa 	beq.w	8008ac4 <_svfiprintf_r+0x1c8>
 8008970:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008972:	445a      	add	r2, fp
 8008974:	9209      	str	r2, [sp, #36]	; 0x24
 8008976:	f89a 3000 	ldrb.w	r3, [sl]
 800897a:	2b00      	cmp	r3, #0
 800897c:	f000 80a2 	beq.w	8008ac4 <_svfiprintf_r+0x1c8>
 8008980:	2300      	movs	r3, #0
 8008982:	f04f 32ff 	mov.w	r2, #4294967295
 8008986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800898a:	f10a 0a01 	add.w	sl, sl, #1
 800898e:	9304      	str	r3, [sp, #16]
 8008990:	9307      	str	r3, [sp, #28]
 8008992:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008996:	931a      	str	r3, [sp, #104]	; 0x68
 8008998:	4654      	mov	r4, sl
 800899a:	2205      	movs	r2, #5
 800899c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a0:	4851      	ldr	r0, [pc, #324]	; (8008ae8 <_svfiprintf_r+0x1ec>)
 80089a2:	f7f7 fc15 	bl	80001d0 <memchr>
 80089a6:	9a04      	ldr	r2, [sp, #16]
 80089a8:	b9d8      	cbnz	r0, 80089e2 <_svfiprintf_r+0xe6>
 80089aa:	06d0      	lsls	r0, r2, #27
 80089ac:	bf44      	itt	mi
 80089ae:	2320      	movmi	r3, #32
 80089b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089b4:	0711      	lsls	r1, r2, #28
 80089b6:	bf44      	itt	mi
 80089b8:	232b      	movmi	r3, #43	; 0x2b
 80089ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089be:	f89a 3000 	ldrb.w	r3, [sl]
 80089c2:	2b2a      	cmp	r3, #42	; 0x2a
 80089c4:	d015      	beq.n	80089f2 <_svfiprintf_r+0xf6>
 80089c6:	9a07      	ldr	r2, [sp, #28]
 80089c8:	4654      	mov	r4, sl
 80089ca:	2000      	movs	r0, #0
 80089cc:	f04f 0c0a 	mov.w	ip, #10
 80089d0:	4621      	mov	r1, r4
 80089d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089d6:	3b30      	subs	r3, #48	; 0x30
 80089d8:	2b09      	cmp	r3, #9
 80089da:	d94e      	bls.n	8008a7a <_svfiprintf_r+0x17e>
 80089dc:	b1b0      	cbz	r0, 8008a0c <_svfiprintf_r+0x110>
 80089de:	9207      	str	r2, [sp, #28]
 80089e0:	e014      	b.n	8008a0c <_svfiprintf_r+0x110>
 80089e2:	eba0 0308 	sub.w	r3, r0, r8
 80089e6:	fa09 f303 	lsl.w	r3, r9, r3
 80089ea:	4313      	orrs	r3, r2
 80089ec:	9304      	str	r3, [sp, #16]
 80089ee:	46a2      	mov	sl, r4
 80089f0:	e7d2      	b.n	8008998 <_svfiprintf_r+0x9c>
 80089f2:	9b03      	ldr	r3, [sp, #12]
 80089f4:	1d19      	adds	r1, r3, #4
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	9103      	str	r1, [sp, #12]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	bfbb      	ittet	lt
 80089fe:	425b      	neglt	r3, r3
 8008a00:	f042 0202 	orrlt.w	r2, r2, #2
 8008a04:	9307      	strge	r3, [sp, #28]
 8008a06:	9307      	strlt	r3, [sp, #28]
 8008a08:	bfb8      	it	lt
 8008a0a:	9204      	strlt	r2, [sp, #16]
 8008a0c:	7823      	ldrb	r3, [r4, #0]
 8008a0e:	2b2e      	cmp	r3, #46	; 0x2e
 8008a10:	d10c      	bne.n	8008a2c <_svfiprintf_r+0x130>
 8008a12:	7863      	ldrb	r3, [r4, #1]
 8008a14:	2b2a      	cmp	r3, #42	; 0x2a
 8008a16:	d135      	bne.n	8008a84 <_svfiprintf_r+0x188>
 8008a18:	9b03      	ldr	r3, [sp, #12]
 8008a1a:	1d1a      	adds	r2, r3, #4
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	9203      	str	r2, [sp, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	bfb8      	it	lt
 8008a24:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a28:	3402      	adds	r4, #2
 8008a2a:	9305      	str	r3, [sp, #20]
 8008a2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008af8 <_svfiprintf_r+0x1fc>
 8008a30:	7821      	ldrb	r1, [r4, #0]
 8008a32:	2203      	movs	r2, #3
 8008a34:	4650      	mov	r0, sl
 8008a36:	f7f7 fbcb 	bl	80001d0 <memchr>
 8008a3a:	b140      	cbz	r0, 8008a4e <_svfiprintf_r+0x152>
 8008a3c:	2340      	movs	r3, #64	; 0x40
 8008a3e:	eba0 000a 	sub.w	r0, r0, sl
 8008a42:	fa03 f000 	lsl.w	r0, r3, r0
 8008a46:	9b04      	ldr	r3, [sp, #16]
 8008a48:	4303      	orrs	r3, r0
 8008a4a:	3401      	adds	r4, #1
 8008a4c:	9304      	str	r3, [sp, #16]
 8008a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a52:	4826      	ldr	r0, [pc, #152]	; (8008aec <_svfiprintf_r+0x1f0>)
 8008a54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a58:	2206      	movs	r2, #6
 8008a5a:	f7f7 fbb9 	bl	80001d0 <memchr>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d038      	beq.n	8008ad4 <_svfiprintf_r+0x1d8>
 8008a62:	4b23      	ldr	r3, [pc, #140]	; (8008af0 <_svfiprintf_r+0x1f4>)
 8008a64:	bb1b      	cbnz	r3, 8008aae <_svfiprintf_r+0x1b2>
 8008a66:	9b03      	ldr	r3, [sp, #12]
 8008a68:	3307      	adds	r3, #7
 8008a6a:	f023 0307 	bic.w	r3, r3, #7
 8008a6e:	3308      	adds	r3, #8
 8008a70:	9303      	str	r3, [sp, #12]
 8008a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a74:	4433      	add	r3, r6
 8008a76:	9309      	str	r3, [sp, #36]	; 0x24
 8008a78:	e767      	b.n	800894a <_svfiprintf_r+0x4e>
 8008a7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a7e:	460c      	mov	r4, r1
 8008a80:	2001      	movs	r0, #1
 8008a82:	e7a5      	b.n	80089d0 <_svfiprintf_r+0xd4>
 8008a84:	2300      	movs	r3, #0
 8008a86:	3401      	adds	r4, #1
 8008a88:	9305      	str	r3, [sp, #20]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	f04f 0c0a 	mov.w	ip, #10
 8008a90:	4620      	mov	r0, r4
 8008a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a96:	3a30      	subs	r2, #48	; 0x30
 8008a98:	2a09      	cmp	r2, #9
 8008a9a:	d903      	bls.n	8008aa4 <_svfiprintf_r+0x1a8>
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d0c5      	beq.n	8008a2c <_svfiprintf_r+0x130>
 8008aa0:	9105      	str	r1, [sp, #20]
 8008aa2:	e7c3      	b.n	8008a2c <_svfiprintf_r+0x130>
 8008aa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e7f0      	b.n	8008a90 <_svfiprintf_r+0x194>
 8008aae:	ab03      	add	r3, sp, #12
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	462a      	mov	r2, r5
 8008ab4:	4b0f      	ldr	r3, [pc, #60]	; (8008af4 <_svfiprintf_r+0x1f8>)
 8008ab6:	a904      	add	r1, sp, #16
 8008ab8:	4638      	mov	r0, r7
 8008aba:	f3af 8000 	nop.w
 8008abe:	1c42      	adds	r2, r0, #1
 8008ac0:	4606      	mov	r6, r0
 8008ac2:	d1d6      	bne.n	8008a72 <_svfiprintf_r+0x176>
 8008ac4:	89ab      	ldrh	r3, [r5, #12]
 8008ac6:	065b      	lsls	r3, r3, #25
 8008ac8:	f53f af2c 	bmi.w	8008924 <_svfiprintf_r+0x28>
 8008acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ace:	b01d      	add	sp, #116	; 0x74
 8008ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad4:	ab03      	add	r3, sp, #12
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	462a      	mov	r2, r5
 8008ada:	4b06      	ldr	r3, [pc, #24]	; (8008af4 <_svfiprintf_r+0x1f8>)
 8008adc:	a904      	add	r1, sp, #16
 8008ade:	4638      	mov	r0, r7
 8008ae0:	f000 f87a 	bl	8008bd8 <_printf_i>
 8008ae4:	e7eb      	b.n	8008abe <_svfiprintf_r+0x1c2>
 8008ae6:	bf00      	nop
 8008ae8:	08009ec8 	.word	0x08009ec8
 8008aec:	08009ed2 	.word	0x08009ed2
 8008af0:	00000000 	.word	0x00000000
 8008af4:	08008845 	.word	0x08008845
 8008af8:	08009ece 	.word	0x08009ece

08008afc <_printf_common>:
 8008afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b00:	4616      	mov	r6, r2
 8008b02:	4699      	mov	r9, r3
 8008b04:	688a      	ldr	r2, [r1, #8]
 8008b06:	690b      	ldr	r3, [r1, #16]
 8008b08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	bfb8      	it	lt
 8008b10:	4613      	movlt	r3, r2
 8008b12:	6033      	str	r3, [r6, #0]
 8008b14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b18:	4607      	mov	r7, r0
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	b10a      	cbz	r2, 8008b22 <_printf_common+0x26>
 8008b1e:	3301      	adds	r3, #1
 8008b20:	6033      	str	r3, [r6, #0]
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	0699      	lsls	r1, r3, #26
 8008b26:	bf42      	ittt	mi
 8008b28:	6833      	ldrmi	r3, [r6, #0]
 8008b2a:	3302      	addmi	r3, #2
 8008b2c:	6033      	strmi	r3, [r6, #0]
 8008b2e:	6825      	ldr	r5, [r4, #0]
 8008b30:	f015 0506 	ands.w	r5, r5, #6
 8008b34:	d106      	bne.n	8008b44 <_printf_common+0x48>
 8008b36:	f104 0a19 	add.w	sl, r4, #25
 8008b3a:	68e3      	ldr	r3, [r4, #12]
 8008b3c:	6832      	ldr	r2, [r6, #0]
 8008b3e:	1a9b      	subs	r3, r3, r2
 8008b40:	42ab      	cmp	r3, r5
 8008b42:	dc26      	bgt.n	8008b92 <_printf_common+0x96>
 8008b44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b48:	1e13      	subs	r3, r2, #0
 8008b4a:	6822      	ldr	r2, [r4, #0]
 8008b4c:	bf18      	it	ne
 8008b4e:	2301      	movne	r3, #1
 8008b50:	0692      	lsls	r2, r2, #26
 8008b52:	d42b      	bmi.n	8008bac <_printf_common+0xb0>
 8008b54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b58:	4649      	mov	r1, r9
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	47c0      	blx	r8
 8008b5e:	3001      	adds	r0, #1
 8008b60:	d01e      	beq.n	8008ba0 <_printf_common+0xa4>
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	68e5      	ldr	r5, [r4, #12]
 8008b66:	6832      	ldr	r2, [r6, #0]
 8008b68:	f003 0306 	and.w	r3, r3, #6
 8008b6c:	2b04      	cmp	r3, #4
 8008b6e:	bf08      	it	eq
 8008b70:	1aad      	subeq	r5, r5, r2
 8008b72:	68a3      	ldr	r3, [r4, #8]
 8008b74:	6922      	ldr	r2, [r4, #16]
 8008b76:	bf0c      	ite	eq
 8008b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b7c:	2500      	movne	r5, #0
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	bfc4      	itt	gt
 8008b82:	1a9b      	subgt	r3, r3, r2
 8008b84:	18ed      	addgt	r5, r5, r3
 8008b86:	2600      	movs	r6, #0
 8008b88:	341a      	adds	r4, #26
 8008b8a:	42b5      	cmp	r5, r6
 8008b8c:	d11a      	bne.n	8008bc4 <_printf_common+0xc8>
 8008b8e:	2000      	movs	r0, #0
 8008b90:	e008      	b.n	8008ba4 <_printf_common+0xa8>
 8008b92:	2301      	movs	r3, #1
 8008b94:	4652      	mov	r2, sl
 8008b96:	4649      	mov	r1, r9
 8008b98:	4638      	mov	r0, r7
 8008b9a:	47c0      	blx	r8
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	d103      	bne.n	8008ba8 <_printf_common+0xac>
 8008ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba8:	3501      	adds	r5, #1
 8008baa:	e7c6      	b.n	8008b3a <_printf_common+0x3e>
 8008bac:	18e1      	adds	r1, r4, r3
 8008bae:	1c5a      	adds	r2, r3, #1
 8008bb0:	2030      	movs	r0, #48	; 0x30
 8008bb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bb6:	4422      	add	r2, r4
 8008bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bc0:	3302      	adds	r3, #2
 8008bc2:	e7c7      	b.n	8008b54 <_printf_common+0x58>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	4649      	mov	r1, r9
 8008bca:	4638      	mov	r0, r7
 8008bcc:	47c0      	blx	r8
 8008bce:	3001      	adds	r0, #1
 8008bd0:	d0e6      	beq.n	8008ba0 <_printf_common+0xa4>
 8008bd2:	3601      	adds	r6, #1
 8008bd4:	e7d9      	b.n	8008b8a <_printf_common+0x8e>
	...

08008bd8 <_printf_i>:
 8008bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bdc:	7e0f      	ldrb	r7, [r1, #24]
 8008bde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008be0:	2f78      	cmp	r7, #120	; 0x78
 8008be2:	4691      	mov	r9, r2
 8008be4:	4680      	mov	r8, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	469a      	mov	sl, r3
 8008bea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bee:	d807      	bhi.n	8008c00 <_printf_i+0x28>
 8008bf0:	2f62      	cmp	r7, #98	; 0x62
 8008bf2:	d80a      	bhi.n	8008c0a <_printf_i+0x32>
 8008bf4:	2f00      	cmp	r7, #0
 8008bf6:	f000 80d8 	beq.w	8008daa <_printf_i+0x1d2>
 8008bfa:	2f58      	cmp	r7, #88	; 0x58
 8008bfc:	f000 80a3 	beq.w	8008d46 <_printf_i+0x16e>
 8008c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c08:	e03a      	b.n	8008c80 <_printf_i+0xa8>
 8008c0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c0e:	2b15      	cmp	r3, #21
 8008c10:	d8f6      	bhi.n	8008c00 <_printf_i+0x28>
 8008c12:	a101      	add	r1, pc, #4	; (adr r1, 8008c18 <_printf_i+0x40>)
 8008c14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c18:	08008c71 	.word	0x08008c71
 8008c1c:	08008c85 	.word	0x08008c85
 8008c20:	08008c01 	.word	0x08008c01
 8008c24:	08008c01 	.word	0x08008c01
 8008c28:	08008c01 	.word	0x08008c01
 8008c2c:	08008c01 	.word	0x08008c01
 8008c30:	08008c85 	.word	0x08008c85
 8008c34:	08008c01 	.word	0x08008c01
 8008c38:	08008c01 	.word	0x08008c01
 8008c3c:	08008c01 	.word	0x08008c01
 8008c40:	08008c01 	.word	0x08008c01
 8008c44:	08008d91 	.word	0x08008d91
 8008c48:	08008cb5 	.word	0x08008cb5
 8008c4c:	08008d73 	.word	0x08008d73
 8008c50:	08008c01 	.word	0x08008c01
 8008c54:	08008c01 	.word	0x08008c01
 8008c58:	08008db3 	.word	0x08008db3
 8008c5c:	08008c01 	.word	0x08008c01
 8008c60:	08008cb5 	.word	0x08008cb5
 8008c64:	08008c01 	.word	0x08008c01
 8008c68:	08008c01 	.word	0x08008c01
 8008c6c:	08008d7b 	.word	0x08008d7b
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	1d1a      	adds	r2, r3, #4
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	602a      	str	r2, [r5, #0]
 8008c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c80:	2301      	movs	r3, #1
 8008c82:	e0a3      	b.n	8008dcc <_printf_i+0x1f4>
 8008c84:	6820      	ldr	r0, [r4, #0]
 8008c86:	6829      	ldr	r1, [r5, #0]
 8008c88:	0606      	lsls	r6, r0, #24
 8008c8a:	f101 0304 	add.w	r3, r1, #4
 8008c8e:	d50a      	bpl.n	8008ca6 <_printf_i+0xce>
 8008c90:	680e      	ldr	r6, [r1, #0]
 8008c92:	602b      	str	r3, [r5, #0]
 8008c94:	2e00      	cmp	r6, #0
 8008c96:	da03      	bge.n	8008ca0 <_printf_i+0xc8>
 8008c98:	232d      	movs	r3, #45	; 0x2d
 8008c9a:	4276      	negs	r6, r6
 8008c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ca0:	485e      	ldr	r0, [pc, #376]	; (8008e1c <_printf_i+0x244>)
 8008ca2:	230a      	movs	r3, #10
 8008ca4:	e019      	b.n	8008cda <_printf_i+0x102>
 8008ca6:	680e      	ldr	r6, [r1, #0]
 8008ca8:	602b      	str	r3, [r5, #0]
 8008caa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cae:	bf18      	it	ne
 8008cb0:	b236      	sxthne	r6, r6
 8008cb2:	e7ef      	b.n	8008c94 <_printf_i+0xbc>
 8008cb4:	682b      	ldr	r3, [r5, #0]
 8008cb6:	6820      	ldr	r0, [r4, #0]
 8008cb8:	1d19      	adds	r1, r3, #4
 8008cba:	6029      	str	r1, [r5, #0]
 8008cbc:	0601      	lsls	r1, r0, #24
 8008cbe:	d501      	bpl.n	8008cc4 <_printf_i+0xec>
 8008cc0:	681e      	ldr	r6, [r3, #0]
 8008cc2:	e002      	b.n	8008cca <_printf_i+0xf2>
 8008cc4:	0646      	lsls	r6, r0, #25
 8008cc6:	d5fb      	bpl.n	8008cc0 <_printf_i+0xe8>
 8008cc8:	881e      	ldrh	r6, [r3, #0]
 8008cca:	4854      	ldr	r0, [pc, #336]	; (8008e1c <_printf_i+0x244>)
 8008ccc:	2f6f      	cmp	r7, #111	; 0x6f
 8008cce:	bf0c      	ite	eq
 8008cd0:	2308      	moveq	r3, #8
 8008cd2:	230a      	movne	r3, #10
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cda:	6865      	ldr	r5, [r4, #4]
 8008cdc:	60a5      	str	r5, [r4, #8]
 8008cde:	2d00      	cmp	r5, #0
 8008ce0:	bfa2      	ittt	ge
 8008ce2:	6821      	ldrge	r1, [r4, #0]
 8008ce4:	f021 0104 	bicge.w	r1, r1, #4
 8008ce8:	6021      	strge	r1, [r4, #0]
 8008cea:	b90e      	cbnz	r6, 8008cf0 <_printf_i+0x118>
 8008cec:	2d00      	cmp	r5, #0
 8008cee:	d04d      	beq.n	8008d8c <_printf_i+0x1b4>
 8008cf0:	4615      	mov	r5, r2
 8008cf2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cf6:	fb03 6711 	mls	r7, r3, r1, r6
 8008cfa:	5dc7      	ldrb	r7, [r0, r7]
 8008cfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d00:	4637      	mov	r7, r6
 8008d02:	42bb      	cmp	r3, r7
 8008d04:	460e      	mov	r6, r1
 8008d06:	d9f4      	bls.n	8008cf2 <_printf_i+0x11a>
 8008d08:	2b08      	cmp	r3, #8
 8008d0a:	d10b      	bne.n	8008d24 <_printf_i+0x14c>
 8008d0c:	6823      	ldr	r3, [r4, #0]
 8008d0e:	07de      	lsls	r6, r3, #31
 8008d10:	d508      	bpl.n	8008d24 <_printf_i+0x14c>
 8008d12:	6923      	ldr	r3, [r4, #16]
 8008d14:	6861      	ldr	r1, [r4, #4]
 8008d16:	4299      	cmp	r1, r3
 8008d18:	bfde      	ittt	le
 8008d1a:	2330      	movle	r3, #48	; 0x30
 8008d1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d24:	1b52      	subs	r2, r2, r5
 8008d26:	6122      	str	r2, [r4, #16]
 8008d28:	f8cd a000 	str.w	sl, [sp]
 8008d2c:	464b      	mov	r3, r9
 8008d2e:	aa03      	add	r2, sp, #12
 8008d30:	4621      	mov	r1, r4
 8008d32:	4640      	mov	r0, r8
 8008d34:	f7ff fee2 	bl	8008afc <_printf_common>
 8008d38:	3001      	adds	r0, #1
 8008d3a:	d14c      	bne.n	8008dd6 <_printf_i+0x1fe>
 8008d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d40:	b004      	add	sp, #16
 8008d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d46:	4835      	ldr	r0, [pc, #212]	; (8008e1c <_printf_i+0x244>)
 8008d48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d4c:	6829      	ldr	r1, [r5, #0]
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d54:	6029      	str	r1, [r5, #0]
 8008d56:	061d      	lsls	r5, r3, #24
 8008d58:	d514      	bpl.n	8008d84 <_printf_i+0x1ac>
 8008d5a:	07df      	lsls	r7, r3, #31
 8008d5c:	bf44      	itt	mi
 8008d5e:	f043 0320 	orrmi.w	r3, r3, #32
 8008d62:	6023      	strmi	r3, [r4, #0]
 8008d64:	b91e      	cbnz	r6, 8008d6e <_printf_i+0x196>
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	f023 0320 	bic.w	r3, r3, #32
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	2310      	movs	r3, #16
 8008d70:	e7b0      	b.n	8008cd4 <_printf_i+0xfc>
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	f043 0320 	orr.w	r3, r3, #32
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	2378      	movs	r3, #120	; 0x78
 8008d7c:	4828      	ldr	r0, [pc, #160]	; (8008e20 <_printf_i+0x248>)
 8008d7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d82:	e7e3      	b.n	8008d4c <_printf_i+0x174>
 8008d84:	0659      	lsls	r1, r3, #25
 8008d86:	bf48      	it	mi
 8008d88:	b2b6      	uxthmi	r6, r6
 8008d8a:	e7e6      	b.n	8008d5a <_printf_i+0x182>
 8008d8c:	4615      	mov	r5, r2
 8008d8e:	e7bb      	b.n	8008d08 <_printf_i+0x130>
 8008d90:	682b      	ldr	r3, [r5, #0]
 8008d92:	6826      	ldr	r6, [r4, #0]
 8008d94:	6961      	ldr	r1, [r4, #20]
 8008d96:	1d18      	adds	r0, r3, #4
 8008d98:	6028      	str	r0, [r5, #0]
 8008d9a:	0635      	lsls	r5, r6, #24
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	d501      	bpl.n	8008da4 <_printf_i+0x1cc>
 8008da0:	6019      	str	r1, [r3, #0]
 8008da2:	e002      	b.n	8008daa <_printf_i+0x1d2>
 8008da4:	0670      	lsls	r0, r6, #25
 8008da6:	d5fb      	bpl.n	8008da0 <_printf_i+0x1c8>
 8008da8:	8019      	strh	r1, [r3, #0]
 8008daa:	2300      	movs	r3, #0
 8008dac:	6123      	str	r3, [r4, #16]
 8008dae:	4615      	mov	r5, r2
 8008db0:	e7ba      	b.n	8008d28 <_printf_i+0x150>
 8008db2:	682b      	ldr	r3, [r5, #0]
 8008db4:	1d1a      	adds	r2, r3, #4
 8008db6:	602a      	str	r2, [r5, #0]
 8008db8:	681d      	ldr	r5, [r3, #0]
 8008dba:	6862      	ldr	r2, [r4, #4]
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	f7f7 fa06 	bl	80001d0 <memchr>
 8008dc4:	b108      	cbz	r0, 8008dca <_printf_i+0x1f2>
 8008dc6:	1b40      	subs	r0, r0, r5
 8008dc8:	6060      	str	r0, [r4, #4]
 8008dca:	6863      	ldr	r3, [r4, #4]
 8008dcc:	6123      	str	r3, [r4, #16]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dd4:	e7a8      	b.n	8008d28 <_printf_i+0x150>
 8008dd6:	6923      	ldr	r3, [r4, #16]
 8008dd8:	462a      	mov	r2, r5
 8008dda:	4649      	mov	r1, r9
 8008ddc:	4640      	mov	r0, r8
 8008dde:	47d0      	blx	sl
 8008de0:	3001      	adds	r0, #1
 8008de2:	d0ab      	beq.n	8008d3c <_printf_i+0x164>
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	079b      	lsls	r3, r3, #30
 8008de8:	d413      	bmi.n	8008e12 <_printf_i+0x23a>
 8008dea:	68e0      	ldr	r0, [r4, #12]
 8008dec:	9b03      	ldr	r3, [sp, #12]
 8008dee:	4298      	cmp	r0, r3
 8008df0:	bfb8      	it	lt
 8008df2:	4618      	movlt	r0, r3
 8008df4:	e7a4      	b.n	8008d40 <_printf_i+0x168>
 8008df6:	2301      	movs	r3, #1
 8008df8:	4632      	mov	r2, r6
 8008dfa:	4649      	mov	r1, r9
 8008dfc:	4640      	mov	r0, r8
 8008dfe:	47d0      	blx	sl
 8008e00:	3001      	adds	r0, #1
 8008e02:	d09b      	beq.n	8008d3c <_printf_i+0x164>
 8008e04:	3501      	adds	r5, #1
 8008e06:	68e3      	ldr	r3, [r4, #12]
 8008e08:	9903      	ldr	r1, [sp, #12]
 8008e0a:	1a5b      	subs	r3, r3, r1
 8008e0c:	42ab      	cmp	r3, r5
 8008e0e:	dcf2      	bgt.n	8008df6 <_printf_i+0x21e>
 8008e10:	e7eb      	b.n	8008dea <_printf_i+0x212>
 8008e12:	2500      	movs	r5, #0
 8008e14:	f104 0619 	add.w	r6, r4, #25
 8008e18:	e7f5      	b.n	8008e06 <_printf_i+0x22e>
 8008e1a:	bf00      	nop
 8008e1c:	08009ed9 	.word	0x08009ed9
 8008e20:	08009eea 	.word	0x08009eea

08008e24 <memcpy>:
 8008e24:	440a      	add	r2, r1
 8008e26:	4291      	cmp	r1, r2
 8008e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e2c:	d100      	bne.n	8008e30 <memcpy+0xc>
 8008e2e:	4770      	bx	lr
 8008e30:	b510      	push	{r4, lr}
 8008e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e3a:	4291      	cmp	r1, r2
 8008e3c:	d1f9      	bne.n	8008e32 <memcpy+0xe>
 8008e3e:	bd10      	pop	{r4, pc}

08008e40 <memmove>:
 8008e40:	4288      	cmp	r0, r1
 8008e42:	b510      	push	{r4, lr}
 8008e44:	eb01 0402 	add.w	r4, r1, r2
 8008e48:	d902      	bls.n	8008e50 <memmove+0x10>
 8008e4a:	4284      	cmp	r4, r0
 8008e4c:	4623      	mov	r3, r4
 8008e4e:	d807      	bhi.n	8008e60 <memmove+0x20>
 8008e50:	1e43      	subs	r3, r0, #1
 8008e52:	42a1      	cmp	r1, r4
 8008e54:	d008      	beq.n	8008e68 <memmove+0x28>
 8008e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e5e:	e7f8      	b.n	8008e52 <memmove+0x12>
 8008e60:	4402      	add	r2, r0
 8008e62:	4601      	mov	r1, r0
 8008e64:	428a      	cmp	r2, r1
 8008e66:	d100      	bne.n	8008e6a <memmove+0x2a>
 8008e68:	bd10      	pop	{r4, pc}
 8008e6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e72:	e7f7      	b.n	8008e64 <memmove+0x24>

08008e74 <_free_r>:
 8008e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e76:	2900      	cmp	r1, #0
 8008e78:	d044      	beq.n	8008f04 <_free_r+0x90>
 8008e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e7e:	9001      	str	r0, [sp, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f1a1 0404 	sub.w	r4, r1, #4
 8008e86:	bfb8      	it	lt
 8008e88:	18e4      	addlt	r4, r4, r3
 8008e8a:	f000 f913 	bl	80090b4 <__malloc_lock>
 8008e8e:	4a1e      	ldr	r2, [pc, #120]	; (8008f08 <_free_r+0x94>)
 8008e90:	9801      	ldr	r0, [sp, #4]
 8008e92:	6813      	ldr	r3, [r2, #0]
 8008e94:	b933      	cbnz	r3, 8008ea4 <_free_r+0x30>
 8008e96:	6063      	str	r3, [r4, #4]
 8008e98:	6014      	str	r4, [r2, #0]
 8008e9a:	b003      	add	sp, #12
 8008e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ea0:	f000 b90e 	b.w	80090c0 <__malloc_unlock>
 8008ea4:	42a3      	cmp	r3, r4
 8008ea6:	d908      	bls.n	8008eba <_free_r+0x46>
 8008ea8:	6825      	ldr	r5, [r4, #0]
 8008eaa:	1961      	adds	r1, r4, r5
 8008eac:	428b      	cmp	r3, r1
 8008eae:	bf01      	itttt	eq
 8008eb0:	6819      	ldreq	r1, [r3, #0]
 8008eb2:	685b      	ldreq	r3, [r3, #4]
 8008eb4:	1949      	addeq	r1, r1, r5
 8008eb6:	6021      	streq	r1, [r4, #0]
 8008eb8:	e7ed      	b.n	8008e96 <_free_r+0x22>
 8008eba:	461a      	mov	r2, r3
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	b10b      	cbz	r3, 8008ec4 <_free_r+0x50>
 8008ec0:	42a3      	cmp	r3, r4
 8008ec2:	d9fa      	bls.n	8008eba <_free_r+0x46>
 8008ec4:	6811      	ldr	r1, [r2, #0]
 8008ec6:	1855      	adds	r5, r2, r1
 8008ec8:	42a5      	cmp	r5, r4
 8008eca:	d10b      	bne.n	8008ee4 <_free_r+0x70>
 8008ecc:	6824      	ldr	r4, [r4, #0]
 8008ece:	4421      	add	r1, r4
 8008ed0:	1854      	adds	r4, r2, r1
 8008ed2:	42a3      	cmp	r3, r4
 8008ed4:	6011      	str	r1, [r2, #0]
 8008ed6:	d1e0      	bne.n	8008e9a <_free_r+0x26>
 8008ed8:	681c      	ldr	r4, [r3, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	6053      	str	r3, [r2, #4]
 8008ede:	4421      	add	r1, r4
 8008ee0:	6011      	str	r1, [r2, #0]
 8008ee2:	e7da      	b.n	8008e9a <_free_r+0x26>
 8008ee4:	d902      	bls.n	8008eec <_free_r+0x78>
 8008ee6:	230c      	movs	r3, #12
 8008ee8:	6003      	str	r3, [r0, #0]
 8008eea:	e7d6      	b.n	8008e9a <_free_r+0x26>
 8008eec:	6825      	ldr	r5, [r4, #0]
 8008eee:	1961      	adds	r1, r4, r5
 8008ef0:	428b      	cmp	r3, r1
 8008ef2:	bf04      	itt	eq
 8008ef4:	6819      	ldreq	r1, [r3, #0]
 8008ef6:	685b      	ldreq	r3, [r3, #4]
 8008ef8:	6063      	str	r3, [r4, #4]
 8008efa:	bf04      	itt	eq
 8008efc:	1949      	addeq	r1, r1, r5
 8008efe:	6021      	streq	r1, [r4, #0]
 8008f00:	6054      	str	r4, [r2, #4]
 8008f02:	e7ca      	b.n	8008e9a <_free_r+0x26>
 8008f04:	b003      	add	sp, #12
 8008f06:	bd30      	pop	{r4, r5, pc}
 8008f08:	20002238 	.word	0x20002238

08008f0c <sbrk_aligned>:
 8008f0c:	b570      	push	{r4, r5, r6, lr}
 8008f0e:	4e0e      	ldr	r6, [pc, #56]	; (8008f48 <sbrk_aligned+0x3c>)
 8008f10:	460c      	mov	r4, r1
 8008f12:	6831      	ldr	r1, [r6, #0]
 8008f14:	4605      	mov	r5, r0
 8008f16:	b911      	cbnz	r1, 8008f1e <sbrk_aligned+0x12>
 8008f18:	f000 f8bc 	bl	8009094 <_sbrk_r>
 8008f1c:	6030      	str	r0, [r6, #0]
 8008f1e:	4621      	mov	r1, r4
 8008f20:	4628      	mov	r0, r5
 8008f22:	f000 f8b7 	bl	8009094 <_sbrk_r>
 8008f26:	1c43      	adds	r3, r0, #1
 8008f28:	d00a      	beq.n	8008f40 <sbrk_aligned+0x34>
 8008f2a:	1cc4      	adds	r4, r0, #3
 8008f2c:	f024 0403 	bic.w	r4, r4, #3
 8008f30:	42a0      	cmp	r0, r4
 8008f32:	d007      	beq.n	8008f44 <sbrk_aligned+0x38>
 8008f34:	1a21      	subs	r1, r4, r0
 8008f36:	4628      	mov	r0, r5
 8008f38:	f000 f8ac 	bl	8009094 <_sbrk_r>
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	d101      	bne.n	8008f44 <sbrk_aligned+0x38>
 8008f40:	f04f 34ff 	mov.w	r4, #4294967295
 8008f44:	4620      	mov	r0, r4
 8008f46:	bd70      	pop	{r4, r5, r6, pc}
 8008f48:	2000223c 	.word	0x2000223c

08008f4c <_malloc_r>:
 8008f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f50:	1ccd      	adds	r5, r1, #3
 8008f52:	f025 0503 	bic.w	r5, r5, #3
 8008f56:	3508      	adds	r5, #8
 8008f58:	2d0c      	cmp	r5, #12
 8008f5a:	bf38      	it	cc
 8008f5c:	250c      	movcc	r5, #12
 8008f5e:	2d00      	cmp	r5, #0
 8008f60:	4607      	mov	r7, r0
 8008f62:	db01      	blt.n	8008f68 <_malloc_r+0x1c>
 8008f64:	42a9      	cmp	r1, r5
 8008f66:	d905      	bls.n	8008f74 <_malloc_r+0x28>
 8008f68:	230c      	movs	r3, #12
 8008f6a:	603b      	str	r3, [r7, #0]
 8008f6c:	2600      	movs	r6, #0
 8008f6e:	4630      	mov	r0, r6
 8008f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f74:	4e2e      	ldr	r6, [pc, #184]	; (8009030 <_malloc_r+0xe4>)
 8008f76:	f000 f89d 	bl	80090b4 <__malloc_lock>
 8008f7a:	6833      	ldr	r3, [r6, #0]
 8008f7c:	461c      	mov	r4, r3
 8008f7e:	bb34      	cbnz	r4, 8008fce <_malloc_r+0x82>
 8008f80:	4629      	mov	r1, r5
 8008f82:	4638      	mov	r0, r7
 8008f84:	f7ff ffc2 	bl	8008f0c <sbrk_aligned>
 8008f88:	1c43      	adds	r3, r0, #1
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	d14d      	bne.n	800902a <_malloc_r+0xde>
 8008f8e:	6834      	ldr	r4, [r6, #0]
 8008f90:	4626      	mov	r6, r4
 8008f92:	2e00      	cmp	r6, #0
 8008f94:	d140      	bne.n	8009018 <_malloc_r+0xcc>
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	4631      	mov	r1, r6
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	eb04 0803 	add.w	r8, r4, r3
 8008fa0:	f000 f878 	bl	8009094 <_sbrk_r>
 8008fa4:	4580      	cmp	r8, r0
 8008fa6:	d13a      	bne.n	800901e <_malloc_r+0xd2>
 8008fa8:	6821      	ldr	r1, [r4, #0]
 8008faa:	3503      	adds	r5, #3
 8008fac:	1a6d      	subs	r5, r5, r1
 8008fae:	f025 0503 	bic.w	r5, r5, #3
 8008fb2:	3508      	adds	r5, #8
 8008fb4:	2d0c      	cmp	r5, #12
 8008fb6:	bf38      	it	cc
 8008fb8:	250c      	movcc	r5, #12
 8008fba:	4629      	mov	r1, r5
 8008fbc:	4638      	mov	r0, r7
 8008fbe:	f7ff ffa5 	bl	8008f0c <sbrk_aligned>
 8008fc2:	3001      	adds	r0, #1
 8008fc4:	d02b      	beq.n	800901e <_malloc_r+0xd2>
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	442b      	add	r3, r5
 8008fca:	6023      	str	r3, [r4, #0]
 8008fcc:	e00e      	b.n	8008fec <_malloc_r+0xa0>
 8008fce:	6822      	ldr	r2, [r4, #0]
 8008fd0:	1b52      	subs	r2, r2, r5
 8008fd2:	d41e      	bmi.n	8009012 <_malloc_r+0xc6>
 8008fd4:	2a0b      	cmp	r2, #11
 8008fd6:	d916      	bls.n	8009006 <_malloc_r+0xba>
 8008fd8:	1961      	adds	r1, r4, r5
 8008fda:	42a3      	cmp	r3, r4
 8008fdc:	6025      	str	r5, [r4, #0]
 8008fde:	bf18      	it	ne
 8008fe0:	6059      	strne	r1, [r3, #4]
 8008fe2:	6863      	ldr	r3, [r4, #4]
 8008fe4:	bf08      	it	eq
 8008fe6:	6031      	streq	r1, [r6, #0]
 8008fe8:	5162      	str	r2, [r4, r5]
 8008fea:	604b      	str	r3, [r1, #4]
 8008fec:	4638      	mov	r0, r7
 8008fee:	f104 060b 	add.w	r6, r4, #11
 8008ff2:	f000 f865 	bl	80090c0 <__malloc_unlock>
 8008ff6:	f026 0607 	bic.w	r6, r6, #7
 8008ffa:	1d23      	adds	r3, r4, #4
 8008ffc:	1af2      	subs	r2, r6, r3
 8008ffe:	d0b6      	beq.n	8008f6e <_malloc_r+0x22>
 8009000:	1b9b      	subs	r3, r3, r6
 8009002:	50a3      	str	r3, [r4, r2]
 8009004:	e7b3      	b.n	8008f6e <_malloc_r+0x22>
 8009006:	6862      	ldr	r2, [r4, #4]
 8009008:	42a3      	cmp	r3, r4
 800900a:	bf0c      	ite	eq
 800900c:	6032      	streq	r2, [r6, #0]
 800900e:	605a      	strne	r2, [r3, #4]
 8009010:	e7ec      	b.n	8008fec <_malloc_r+0xa0>
 8009012:	4623      	mov	r3, r4
 8009014:	6864      	ldr	r4, [r4, #4]
 8009016:	e7b2      	b.n	8008f7e <_malloc_r+0x32>
 8009018:	4634      	mov	r4, r6
 800901a:	6876      	ldr	r6, [r6, #4]
 800901c:	e7b9      	b.n	8008f92 <_malloc_r+0x46>
 800901e:	230c      	movs	r3, #12
 8009020:	603b      	str	r3, [r7, #0]
 8009022:	4638      	mov	r0, r7
 8009024:	f000 f84c 	bl	80090c0 <__malloc_unlock>
 8009028:	e7a1      	b.n	8008f6e <_malloc_r+0x22>
 800902a:	6025      	str	r5, [r4, #0]
 800902c:	e7de      	b.n	8008fec <_malloc_r+0xa0>
 800902e:	bf00      	nop
 8009030:	20002238 	.word	0x20002238

08009034 <_realloc_r>:
 8009034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009038:	4680      	mov	r8, r0
 800903a:	4614      	mov	r4, r2
 800903c:	460e      	mov	r6, r1
 800903e:	b921      	cbnz	r1, 800904a <_realloc_r+0x16>
 8009040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009044:	4611      	mov	r1, r2
 8009046:	f7ff bf81 	b.w	8008f4c <_malloc_r>
 800904a:	b92a      	cbnz	r2, 8009058 <_realloc_r+0x24>
 800904c:	f7ff ff12 	bl	8008e74 <_free_r>
 8009050:	4625      	mov	r5, r4
 8009052:	4628      	mov	r0, r5
 8009054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009058:	f000 f838 	bl	80090cc <_malloc_usable_size_r>
 800905c:	4284      	cmp	r4, r0
 800905e:	4607      	mov	r7, r0
 8009060:	d802      	bhi.n	8009068 <_realloc_r+0x34>
 8009062:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009066:	d812      	bhi.n	800908e <_realloc_r+0x5a>
 8009068:	4621      	mov	r1, r4
 800906a:	4640      	mov	r0, r8
 800906c:	f7ff ff6e 	bl	8008f4c <_malloc_r>
 8009070:	4605      	mov	r5, r0
 8009072:	2800      	cmp	r0, #0
 8009074:	d0ed      	beq.n	8009052 <_realloc_r+0x1e>
 8009076:	42bc      	cmp	r4, r7
 8009078:	4622      	mov	r2, r4
 800907a:	4631      	mov	r1, r6
 800907c:	bf28      	it	cs
 800907e:	463a      	movcs	r2, r7
 8009080:	f7ff fed0 	bl	8008e24 <memcpy>
 8009084:	4631      	mov	r1, r6
 8009086:	4640      	mov	r0, r8
 8009088:	f7ff fef4 	bl	8008e74 <_free_r>
 800908c:	e7e1      	b.n	8009052 <_realloc_r+0x1e>
 800908e:	4635      	mov	r5, r6
 8009090:	e7df      	b.n	8009052 <_realloc_r+0x1e>
	...

08009094 <_sbrk_r>:
 8009094:	b538      	push	{r3, r4, r5, lr}
 8009096:	4d06      	ldr	r5, [pc, #24]	; (80090b0 <_sbrk_r+0x1c>)
 8009098:	2300      	movs	r3, #0
 800909a:	4604      	mov	r4, r0
 800909c:	4608      	mov	r0, r1
 800909e:	602b      	str	r3, [r5, #0]
 80090a0:	f7f7 ff9c 	bl	8000fdc <_sbrk>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	d102      	bne.n	80090ae <_sbrk_r+0x1a>
 80090a8:	682b      	ldr	r3, [r5, #0]
 80090aa:	b103      	cbz	r3, 80090ae <_sbrk_r+0x1a>
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	20002240 	.word	0x20002240

080090b4 <__malloc_lock>:
 80090b4:	4801      	ldr	r0, [pc, #4]	; (80090bc <__malloc_lock+0x8>)
 80090b6:	f000 b811 	b.w	80090dc <__retarget_lock_acquire_recursive>
 80090ba:	bf00      	nop
 80090bc:	20002244 	.word	0x20002244

080090c0 <__malloc_unlock>:
 80090c0:	4801      	ldr	r0, [pc, #4]	; (80090c8 <__malloc_unlock+0x8>)
 80090c2:	f000 b80c 	b.w	80090de <__retarget_lock_release_recursive>
 80090c6:	bf00      	nop
 80090c8:	20002244 	.word	0x20002244

080090cc <_malloc_usable_size_r>:
 80090cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090d0:	1f18      	subs	r0, r3, #4
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	bfbc      	itt	lt
 80090d6:	580b      	ldrlt	r3, [r1, r0]
 80090d8:	18c0      	addlt	r0, r0, r3
 80090da:	4770      	bx	lr

080090dc <__retarget_lock_acquire_recursive>:
 80090dc:	4770      	bx	lr

080090de <__retarget_lock_release_recursive>:
 80090de:	4770      	bx	lr

080090e0 <_init>:
 80090e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e2:	bf00      	nop
 80090e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e6:	bc08      	pop	{r3}
 80090e8:	469e      	mov	lr, r3
 80090ea:	4770      	bx	lr

080090ec <_fini>:
 80090ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ee:	bf00      	nop
 80090f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090f2:	bc08      	pop	{r3}
 80090f4:	469e      	mov	lr, r3
 80090f6:	4770      	bx	lr
